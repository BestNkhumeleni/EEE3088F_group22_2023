
foolaround.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000350  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000410  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000410  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000418  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800041c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800041c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d20  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000508  00000000  00000000  00020d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00021258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  000213f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f9d9  00000000  00000000  00021540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f0a  00000000  00000000  00030f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fc98  00000000  00000000  00032e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00092abb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000440  00000000  00000000  00092b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080003f8 	.word	0x080003f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080003f8 	.word	0x080003f8

08000108 <main>:
void SystemClock_Config(void);
void GPIO_Init(void);
void delay_ms(uint32_t milliseconds);

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
  SystemInit();
 800010e:	f000 f90e 	bl	800032e <SystemInit>
  SystemClock_Config();
 8000112:	f000 f881 	bl	8000218 <SystemClock_Config>
  GPIO_Init();
 8000116:	f000 f89d 	bl	8000254 <GPIO_Init>

  uint8_t button_press_count = 0;
 800011a:	1dfb      	adds	r3, r7, #7
 800011c:	2200      	movs	r2, #0
 800011e:	701a      	strb	r2, [r3, #0]

  while (1)
  {
    if (!(GPIOA->IDR & BUTTON_PIN)) // Check if SW0 button is pressed
 8000120:	2390      	movs	r3, #144	; 0x90
 8000122:	05db      	lsls	r3, r3, #23
 8000124:	691b      	ldr	r3, [r3, #16]
 8000126:	2201      	movs	r2, #1
 8000128:	4013      	ands	r3, r2
 800012a:	d1f9      	bne.n	8000120 <main+0x18>
    {
      delay_ms(10); // Delay for de-bouncing
 800012c:	200a      	movs	r0, #10
 800012e:	f000 f8cd 	bl	80002cc <delay_ms>

      if (!(GPIOA->IDR & BUTTON_PIN)) // Check if SW0 button is still pressed after debouncing
 8000132:	2390      	movs	r3, #144	; 0x90
 8000134:	05db      	lsls	r3, r3, #23
 8000136:	691b      	ldr	r3, [r3, #16]
 8000138:	2201      	movs	r2, #1
 800013a:	4013      	ands	r3, r2
 800013c:	d162      	bne.n	8000204 <main+0xfc>
      {
        button_press_count++;
 800013e:	1dfb      	adds	r3, r7, #7
 8000140:	781a      	ldrb	r2, [r3, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	3201      	adds	r2, #1
 8000146:	701a      	strb	r2, [r3, #0]

        if (button_press_count == 1)
 8000148:	1dfb      	adds	r3, r7, #7
 800014a:	781b      	ldrb	r3, [r3, #0]
 800014c:	2b01      	cmp	r3, #1
 800014e:	d103      	bne.n	8000158 <main+0x50>
        {
          GPIOB->BSRR = LED_PIN_1; // Turn on LED1
 8000150:	4b30      	ldr	r3, [pc, #192]	; (8000214 <main+0x10c>)
 8000152:	2280      	movs	r2, #128	; 0x80
 8000154:	619a      	str	r2, [r3, #24]
 8000156:	e00e      	b.n	8000176 <main+0x6e>
        }
        else if (button_press_count == 2)
 8000158:	1dfb      	adds	r3, r7, #7
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	2b02      	cmp	r3, #2
 800015e:	d103      	bne.n	8000168 <main+0x60>
        {
          GPIOB->BSRR = LED_PIN_2; // Turn on LED2
 8000160:	4b2c      	ldr	r3, [pc, #176]	; (8000214 <main+0x10c>)
 8000162:	2240      	movs	r2, #64	; 0x40
 8000164:	619a      	str	r2, [r3, #24]
 8000166:	e006      	b.n	8000176 <main+0x6e>
        }
        else if (button_press_count ==3){
 8000168:	1dfb      	adds	r3, r7, #7
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b03      	cmp	r3, #3
 800016e:	d102      	bne.n	8000176 <main+0x6e>
        	 GPIOB->BSRR = LED_PIN_3; // Turn on LED3
 8000170:	4b28      	ldr	r3, [pc, #160]	; (8000214 <main+0x10c>)
 8000172:	2220      	movs	r2, #32
 8000174:	619a      	str	r2, [r3, #24]
        }
        if (button_press_count == 4)
 8000176:	1dfb      	adds	r3, r7, #7
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	2b04      	cmp	r3, #4
 800017c:	d103      	bne.n	8000186 <main+0x7e>
        {
          GPIOB->BSRR = LED_PIN_4; // Turn on LED1
 800017e:	4b25      	ldr	r3, [pc, #148]	; (8000214 <main+0x10c>)
 8000180:	2210      	movs	r2, #16
 8000182:	619a      	str	r2, [r3, #24]
 8000184:	e03e      	b.n	8000204 <main+0xfc>
        }
        else if (button_press_count == 5)
 8000186:	1dfb      	adds	r3, r7, #7
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b05      	cmp	r3, #5
 800018c:	d103      	bne.n	8000196 <main+0x8e>
        {
          GPIOB->BSRR = LED_PIN_5; // Turn on LED2
 800018e:	4b21      	ldr	r3, [pc, #132]	; (8000214 <main+0x10c>)
 8000190:	2208      	movs	r2, #8
 8000192:	619a      	str	r2, [r3, #24]
 8000194:	e036      	b.n	8000204 <main+0xfc>
        }
        else if (button_press_count == 6){
 8000196:	1dfb      	adds	r3, r7, #7
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	2b06      	cmp	r3, #6
 800019c:	d103      	bne.n	80001a6 <main+0x9e>
        	 GPIOB->BSRR = LED_PIN_6; // Turn on LED3
 800019e:	4b1d      	ldr	r3, [pc, #116]	; (8000214 <main+0x10c>)
 80001a0:	2204      	movs	r2, #4
 80001a2:	619a      	str	r2, [r3, #24]
 80001a4:	e02e      	b.n	8000204 <main+0xfc>
        }
        else if (button_press_count == 7){
 80001a6:	1dfb      	adds	r3, r7, #7
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	2b07      	cmp	r3, #7
 80001ac:	d103      	bne.n	80001b6 <main+0xae>
                	 GPIOB->BSRR = LED_PIN_7; // Turn on LED3
 80001ae:	4b19      	ldr	r3, [pc, #100]	; (8000214 <main+0x10c>)
 80001b0:	2202      	movs	r2, #2
 80001b2:	619a      	str	r2, [r3, #24]
 80001b4:	e026      	b.n	8000204 <main+0xfc>
                }
        else if (button_press_count == 8){
 80001b6:	1dfb      	adds	r3, r7, #7
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	2b08      	cmp	r3, #8
 80001bc:	d103      	bne.n	80001c6 <main+0xbe>
                	 GPIOB->BSRR = LED_PIN_8; // Turn on LED3
 80001be:	4b15      	ldr	r3, [pc, #84]	; (8000214 <main+0x10c>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	619a      	str	r2, [r3, #24]
 80001c4:	e01e      	b.n	8000204 <main+0xfc>
                }

        else if (button_press_count == 9)
 80001c6:	1dfb      	adds	r3, r7, #7
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	2b09      	cmp	r3, #9
 80001cc:	d11a      	bne.n	8000204 <main+0xfc>
        {
          GPIOB->BRR = LED_PIN_1;
 80001ce:	4b11      	ldr	r3, [pc, #68]	; (8000214 <main+0x10c>)
 80001d0:	2280      	movs	r2, #128	; 0x80
 80001d2:	629a      	str	r2, [r3, #40]	; 0x28
          GPIOB->BRR = LED_PIN_2;
 80001d4:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <main+0x10c>)
 80001d6:	2240      	movs	r2, #64	; 0x40
 80001d8:	629a      	str	r2, [r3, #40]	; 0x28
          GPIOB->BRR = LED_PIN_3;
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <main+0x10c>)
 80001dc:	2220      	movs	r2, #32
 80001de:	629a      	str	r2, [r3, #40]	; 0x28
          GPIOB->BRR = LED_PIN_4;
 80001e0:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <main+0x10c>)
 80001e2:	2210      	movs	r2, #16
 80001e4:	629a      	str	r2, [r3, #40]	; 0x28
          GPIOB->BRR = LED_PIN_5;
 80001e6:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <main+0x10c>)
 80001e8:	2208      	movs	r2, #8
 80001ea:	629a      	str	r2, [r3, #40]	; 0x28
          GPIOB->BRR = LED_PIN_6;
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <main+0x10c>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	629a      	str	r2, [r3, #40]	; 0x28
          GPIOB->BRR = LED_PIN_7;
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <main+0x10c>)
 80001f4:	2202      	movs	r2, #2
 80001f6:	629a      	str	r2, [r3, #40]	; 0x28
          GPIOB->BRR = LED_PIN_8;
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <main+0x10c>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	629a      	str	r2, [r3, #40]	; 0x28
          button_press_count = 0; // Reset the counter
 80001fe:	1dfb      	adds	r3, r7, #7
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
        }
      }

      // Wait until the button is released
      while (!(GPIOA->IDR & BUTTON_PIN))
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	2390      	movs	r3, #144	; 0x90
 8000208:	05db      	lsls	r3, r3, #23
 800020a:	691b      	ldr	r3, [r3, #16]
 800020c:	2201      	movs	r2, #1
 800020e:	4013      	ands	r3, r2
 8000210:	d0f9      	beq.n	8000206 <main+0xfe>
    if (!(GPIOA->IDR & BUTTON_PIN)) // Check if SW0 button is pressed
 8000212:	e785      	b.n	8000120 <main+0x18>
 8000214:	48000400 	.word	0x48000400

08000218 <SystemClock_Config>:
    }
  }
}

void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  RCC->CR |= RCC_CR_HSION; // Enable HSI clock
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <SystemClock_Config+0x38>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <SystemClock_Config+0x38>)
 8000222:	2101      	movs	r1, #1
 8000224:	430a      	orrs	r2, r1
 8000226:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 8000228:	46c0      	nop			; (mov r8, r8)
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <SystemClock_Config+0x38>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2202      	movs	r2, #2
 8000230:	4013      	ands	r3, r2
 8000232:	d0fa      	beq.n	800022a <SystemClock_Config+0x12>

  RCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI as the system clock
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <SystemClock_Config+0x38>)
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <SystemClock_Config+0x38>)
 8000238:	6852      	ldr	r2, [r2, #4]
 800023a:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI); // Wait until HSI is used as the system clock
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <SystemClock_Config+0x38>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	220c      	movs	r2, #12
 8000244:	4013      	ands	r3, r2
 8000246:	d1fa      	bne.n	800023e <SystemClock_Config+0x26>
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40021000 	.word	0x40021000

08000254 <GPIO_Init>:

void GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN; // Enable GPIOA and GPIOB clocks
 8000258:	4b18      	ldr	r3, [pc, #96]	; (80002bc <GPIO_Init+0x68>)
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <GPIO_Init+0x68>)
 800025e:	21c0      	movs	r1, #192	; 0xc0
 8000260:	02c9      	lsls	r1, r1, #11
 8000262:	430a      	orrs	r2, r1
 8000264:	615a      	str	r2, [r3, #20]

  GPIOB->MODER |= GPIO_MODER_MODER7_0 | GPIO_MODER_MODER6_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER3_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER0_0; // Set LED pins as output
 8000266:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <GPIO_Init+0x6c>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <GPIO_Init+0x6c>)
 800026c:	4915      	ldr	r1, [pc, #84]	; (80002c4 <GPIO_Init+0x70>)
 800026e:	430a      	orrs	r2, r1
 8000270:	601a      	str	r2, [r3, #0]
  GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_7 | GPIO_OTYPER_OT_6 | GPIO_OTYPER_OT_5 | GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_3 | GPIO_OTYPER_OT_2 | GPIO_OTYPER_OT_1 | GPIO_OTYPER_OT_0); // Set LED pins as push-pull
 8000272:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <GPIO_Init+0x6c>)
 8000274:	685a      	ldr	r2, [r3, #4]
 8000276:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <GPIO_Init+0x6c>)
 8000278:	21ff      	movs	r1, #255	; 0xff
 800027a:	438a      	bics	r2, r1
 800027c:	605a      	str	r2, [r3, #4]
  GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7 | GPIO_OSPEEDER_OSPEEDR6 | GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR4 | GPIO_OSPEEDER_OSPEEDR3 | GPIO_OSPEEDER_OSPEEDR2 | GPIO_OSPEEDER_OSPEEDR1 | GPIO_OSPEEDER_OSPEEDR0; // Set LED pins speed to high
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <GPIO_Init+0x6c>)
 8000280:	689a      	ldr	r2, [r3, #8]
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <GPIO_Init+0x6c>)
 8000284:	4910      	ldr	r1, [pc, #64]	; (80002c8 <GPIO_Init+0x74>)
 8000286:	430a      	orrs	r2, r1
 8000288:	609a      	str	r2, [r3, #8]
  GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR7 | GPIO_PUPDR_PUPDR6 | GPIO_PUPDR_PUPDR5 | GPIO_PUPDR_PUPDR4 | GPIO_PUPDR_PUPDR3 | GPIO_PUPDR_PUPDR2 | GPIO_PUPDR_PUPDR1 | GPIO_PUPDR_PUPDR0); // Disable pull-up/down resistors
 800028a:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <GPIO_Init+0x6c>)
 800028c:	68da      	ldr	r2, [r3, #12]
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <GPIO_Init+0x6c>)
 8000290:	0c12      	lsrs	r2, r2, #16
 8000292:	0412      	lsls	r2, r2, #16
 8000294:	60da      	str	r2, [r3, #12]

  GPIOA->MODER &= ~GPIO_MODER_MODER0; // Set SW0 button pin as input
 8000296:	2390      	movs	r3, #144	; 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	2390      	movs	r3, #144	; 0x90
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	2103      	movs	r1, #3
 80002a2:	438a      	bics	r2, r1
 80002a4:	601a      	str	r2, [r3, #0]
  GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_0; // Enable pull-up resistor for SW0 button pin
 80002a6:	2390      	movs	r3, #144	; 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	68da      	ldr	r2, [r3, #12]
 80002ac:	2390      	movs	r3, #144	; 0x90
 80002ae:	05db      	lsls	r3, r3, #23
 80002b0:	2101      	movs	r1, #1
 80002b2:	430a      	orrs	r2, r1
 80002b4:	60da      	str	r2, [r3, #12]
}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40021000 	.word	0x40021000
 80002c0:	48000400 	.word	0x48000400
 80002c4:	00005555 	.word	0x00005555
 80002c8:	0000ffff 	.word	0x0000ffff

080002cc <delay_ms>:

void delay_ms(uint32_t milliseconds)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;
  for (i = 0; i < (milliseconds * 800); i++){} // Rough delay approximation
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	e002      	b.n	80002e0 <delay_ms+0x14>
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	3301      	adds	r3, #1
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	0013      	movs	r3, r2
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	189b      	adds	r3, r3, r2
 80002e8:	009a      	lsls	r2, r3, #2
 80002ea:	189b      	adds	r3, r3, r2
 80002ec:	015b      	lsls	r3, r3, #5
 80002ee:	001a      	movs	r2, r3
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d8f1      	bhi.n	80002da <delay_ms+0xe>
}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b004      	add	sp, #16
 80002fe:	bd80      	pop	{r7, pc}

08000300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <NMI_Handler+0x4>

08000306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800030a:	e7fe      	b.n	800030a <HardFault_Handler+0x4>

0800030c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000324:	f000 f832 	bl	800038c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}

0800032e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800032e:	b580      	push	{r7, lr}
 8000330:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f7ff fff7 	bl	800032e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f823 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff fecd 	bl	8000108 <main>

0800036e <LoopForever>:

LoopForever:
    b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800037c:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 8000380:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000384:	20000024 	.word	0x20000024

08000388 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_COMP_IRQHandler>
	...

0800038c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <HAL_IncTick+0x1c>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	001a      	movs	r2, r3
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <HAL_IncTick+0x20>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	18d2      	adds	r2, r2, r3
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <HAL_IncTick+0x20>)
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	46c0      	nop			; (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	20000000 	.word	0x20000000
 80003ac:	20000020 	.word	0x20000020

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	2600      	movs	r6, #0
 80003b4:	4d0c      	ldr	r5, [pc, #48]	; (80003e8 <__libc_init_array+0x38>)
 80003b6:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	2600      	movs	r6, #0
 80003c2:	f000 f819 	bl	80003f8 <_init>
 80003c6:	4d0a      	ldr	r5, [pc, #40]	; (80003f0 <__libc_init_array+0x40>)
 80003c8:	4c0a      	ldr	r4, [pc, #40]	; (80003f4 <__libc_init_array+0x44>)
 80003ca:	1b64      	subs	r4, r4, r5
 80003cc:	10a4      	asrs	r4, r4, #2
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	00b3      	lsls	r3, r6, #2
 80003d6:	58eb      	ldr	r3, [r5, r3]
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	00b3      	lsls	r3, r6, #2
 80003e0:	58eb      	ldr	r3, [r5, r3]
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
