
GNM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  08009d50  08009d50  00019d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a404  0800a404  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a404  0800a404  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a404  0800a404  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a404  0800a404  0001a404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a408  0800a408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a40c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  200001dc  0800a5e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  0800a5e8  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a8b  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201e  00000000  00000000  00030c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00032cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00033c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a55  00000000  00000000  00034b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012738  00000000  00000000  000485bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076294  00000000  00000000  0005acf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0f89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c9c  00000000  00000000  000d0fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009d38 	.word	0x08009d38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009d38 	.word	0x08009d38

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f9c3 	bl	80017c8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f913 	bl	8001678 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9b5 	bl	80017c8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9ab 	bl	80017c8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f93b 	bl	80016fc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f931 	bl	80016fc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46c6      	mov	lr, r8
 80004ac:	0243      	lsls	r3, r0, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	024e      	lsls	r6, r1, #9
 80004b2:	0045      	lsls	r5, r0, #1
 80004b4:	004f      	lsls	r7, r1, #1
 80004b6:	00da      	lsls	r2, r3, #3
 80004b8:	0fc4      	lsrs	r4, r0, #31
 80004ba:	469c      	mov	ip, r3
 80004bc:	0a70      	lsrs	r0, r6, #9
 80004be:	4690      	mov	r8, r2
 80004c0:	b500      	push	{lr}
 80004c2:	0e2d      	lsrs	r5, r5, #24
 80004c4:	0e3f      	lsrs	r7, r7, #24
 80004c6:	0fc9      	lsrs	r1, r1, #31
 80004c8:	09b6      	lsrs	r6, r6, #6
 80004ca:	428c      	cmp	r4, r1
 80004cc:	d04b      	beq.n	8000566 <__aeabi_fadd+0xbe>
 80004ce:	1bea      	subs	r2, r5, r7
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	dd36      	ble.n	8000542 <__aeabi_fadd+0x9a>
 80004d4:	2f00      	cmp	r7, #0
 80004d6:	d061      	beq.n	800059c <__aeabi_fadd+0xf4>
 80004d8:	2dff      	cmp	r5, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0x36>
 80004dc:	e0ad      	b.n	800063a <__aeabi_fadd+0x192>
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	04db      	lsls	r3, r3, #19
 80004e2:	431e      	orrs	r6, r3
 80004e4:	2a1b      	cmp	r2, #27
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_fadd+0x42>
 80004e8:	e0d3      	b.n	8000692 <__aeabi_fadd+0x1ea>
 80004ea:	2001      	movs	r0, #1
 80004ec:	4643      	mov	r3, r8
 80004ee:	1a18      	subs	r0, r3, r0
 80004f0:	0143      	lsls	r3, r0, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0x4e>
 80004f4:	e08c      	b.n	8000610 <__aeabi_fadd+0x168>
 80004f6:	0180      	lsls	r0, r0, #6
 80004f8:	0987      	lsrs	r7, r0, #6
 80004fa:	0038      	movs	r0, r7
 80004fc:	f002 f940 	bl	8002780 <__clzsi2>
 8000500:	3805      	subs	r0, #5
 8000502:	4087      	lsls	r7, r0
 8000504:	4285      	cmp	r5, r0
 8000506:	dc00      	bgt.n	800050a <__aeabi_fadd+0x62>
 8000508:	e0b6      	b.n	8000678 <__aeabi_fadd+0x1d0>
 800050a:	1a2d      	subs	r5, r5, r0
 800050c:	48b3      	ldr	r0, [pc, #716]	; (80007dc <__aeabi_fadd+0x334>)
 800050e:	4038      	ands	r0, r7
 8000510:	0743      	lsls	r3, r0, #29
 8000512:	d004      	beq.n	800051e <__aeabi_fadd+0x76>
 8000514:	230f      	movs	r3, #15
 8000516:	4003      	ands	r3, r0
 8000518:	2b04      	cmp	r3, #4
 800051a:	d000      	beq.n	800051e <__aeabi_fadd+0x76>
 800051c:	3004      	adds	r0, #4
 800051e:	0143      	lsls	r3, r0, #5
 8000520:	d400      	bmi.n	8000524 <__aeabi_fadd+0x7c>
 8000522:	e078      	b.n	8000616 <__aeabi_fadd+0x16e>
 8000524:	1c6a      	adds	r2, r5, #1
 8000526:	2dfe      	cmp	r5, #254	; 0xfe
 8000528:	d065      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800052a:	0180      	lsls	r0, r0, #6
 800052c:	0a43      	lsrs	r3, r0, #9
 800052e:	469c      	mov	ip, r3
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	4663      	mov	r3, ip
 8000534:	05d0      	lsls	r0, r2, #23
 8000536:	4318      	orrs	r0, r3
 8000538:	07e4      	lsls	r4, r4, #31
 800053a:	4320      	orrs	r0, r4
 800053c:	bc80      	pop	{r7}
 800053e:	46b8      	mov	r8, r7
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	2a00      	cmp	r2, #0
 8000544:	d035      	beq.n	80005b2 <__aeabi_fadd+0x10a>
 8000546:	1b7a      	subs	r2, r7, r5
 8000548:	2d00      	cmp	r5, #0
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0xa6>
 800054c:	e0af      	b.n	80006ae <__aeabi_fadd+0x206>
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0xae>
 8000554:	e0a7      	b.n	80006a6 <__aeabi_fadd+0x1fe>
 8000556:	1e53      	subs	r3, r2, #1
 8000558:	2a01      	cmp	r2, #1
 800055a:	d100      	bne.n	800055e <__aeabi_fadd+0xb6>
 800055c:	e12f      	b.n	80007be <__aeabi_fadd+0x316>
 800055e:	2aff      	cmp	r2, #255	; 0xff
 8000560:	d069      	beq.n	8000636 <__aeabi_fadd+0x18e>
 8000562:	001a      	movs	r2, r3
 8000564:	e0aa      	b.n	80006bc <__aeabi_fadd+0x214>
 8000566:	1be9      	subs	r1, r5, r7
 8000568:	2900      	cmp	r1, #0
 800056a:	dd70      	ble.n	800064e <__aeabi_fadd+0x1a6>
 800056c:	2f00      	cmp	r7, #0
 800056e:	d037      	beq.n	80005e0 <__aeabi_fadd+0x138>
 8000570:	2dff      	cmp	r5, #255	; 0xff
 8000572:	d062      	beq.n	800063a <__aeabi_fadd+0x192>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	04db      	lsls	r3, r3, #19
 8000578:	431e      	orrs	r6, r3
 800057a:	291b      	cmp	r1, #27
 800057c:	dc00      	bgt.n	8000580 <__aeabi_fadd+0xd8>
 800057e:	e0b0      	b.n	80006e2 <__aeabi_fadd+0x23a>
 8000580:	2001      	movs	r0, #1
 8000582:	4440      	add	r0, r8
 8000584:	0143      	lsls	r3, r0, #5
 8000586:	d543      	bpl.n	8000610 <__aeabi_fadd+0x168>
 8000588:	3501      	adds	r5, #1
 800058a:	2dff      	cmp	r5, #255	; 0xff
 800058c:	d033      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800058e:	2301      	movs	r3, #1
 8000590:	4a93      	ldr	r2, [pc, #588]	; (80007e0 <__aeabi_fadd+0x338>)
 8000592:	4003      	ands	r3, r0
 8000594:	0840      	lsrs	r0, r0, #1
 8000596:	4010      	ands	r0, r2
 8000598:	4318      	orrs	r0, r3
 800059a:	e7b9      	b.n	8000510 <__aeabi_fadd+0x68>
 800059c:	2e00      	cmp	r6, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0xfa>
 80005a0:	e083      	b.n	80006aa <__aeabi_fadd+0x202>
 80005a2:	1e51      	subs	r1, r2, #1
 80005a4:	2a01      	cmp	r2, #1
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x102>
 80005a8:	e0d8      	b.n	800075c <__aeabi_fadd+0x2b4>
 80005aa:	2aff      	cmp	r2, #255	; 0xff
 80005ac:	d045      	beq.n	800063a <__aeabi_fadd+0x192>
 80005ae:	000a      	movs	r2, r1
 80005b0:	e798      	b.n	80004e4 <__aeabi_fadd+0x3c>
 80005b2:	27fe      	movs	r7, #254	; 0xfe
 80005b4:	1c6a      	adds	r2, r5, #1
 80005b6:	4217      	tst	r7, r2
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x114>
 80005ba:	e086      	b.n	80006ca <__aeabi_fadd+0x222>
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x11a>
 80005c0:	e0b7      	b.n	8000732 <__aeabi_fadd+0x28a>
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x122>
 80005c8:	e0f3      	b.n	80007b2 <__aeabi_fadd+0x30a>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d0b0      	beq.n	8000532 <__aeabi_fadd+0x8a>
 80005d0:	1b98      	subs	r0, r3, r6
 80005d2:	0143      	lsls	r3, r0, #5
 80005d4:	d400      	bmi.n	80005d8 <__aeabi_fadd+0x130>
 80005d6:	e0fa      	b.n	80007ce <__aeabi_fadd+0x326>
 80005d8:	4643      	mov	r3, r8
 80005da:	000c      	movs	r4, r1
 80005dc:	1af0      	subs	r0, r6, r3
 80005de:	e797      	b.n	8000510 <__aeabi_fadd+0x68>
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0x13e>
 80005e4:	e0c8      	b.n	8000778 <__aeabi_fadd+0x2d0>
 80005e6:	1e4a      	subs	r2, r1, #1
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d100      	bne.n	80005ee <__aeabi_fadd+0x146>
 80005ec:	e0ae      	b.n	800074c <__aeabi_fadd+0x2a4>
 80005ee:	29ff      	cmp	r1, #255	; 0xff
 80005f0:	d023      	beq.n	800063a <__aeabi_fadd+0x192>
 80005f2:	0011      	movs	r1, r2
 80005f4:	e7c1      	b.n	800057a <__aeabi_fadd+0xd2>
 80005f6:	2300      	movs	r3, #0
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	469c      	mov	ip, r3
 80005fc:	e799      	b.n	8000532 <__aeabi_fadd+0x8a>
 80005fe:	21fe      	movs	r1, #254	; 0xfe
 8000600:	1c6a      	adds	r2, r5, #1
 8000602:	4211      	tst	r1, r2
 8000604:	d077      	beq.n	80006f6 <__aeabi_fadd+0x24e>
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d0f5      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800060a:	0015      	movs	r5, r2
 800060c:	4446      	add	r6, r8
 800060e:	0870      	lsrs	r0, r6, #1
 8000610:	0743      	lsls	r3, r0, #29
 8000612:	d000      	beq.n	8000616 <__aeabi_fadd+0x16e>
 8000614:	e77e      	b.n	8000514 <__aeabi_fadd+0x6c>
 8000616:	08c3      	lsrs	r3, r0, #3
 8000618:	2dff      	cmp	r5, #255	; 0xff
 800061a:	d00e      	beq.n	800063a <__aeabi_fadd+0x192>
 800061c:	025b      	lsls	r3, r3, #9
 800061e:	0a5b      	lsrs	r3, r3, #9
 8000620:	469c      	mov	ip, r3
 8000622:	b2ea      	uxtb	r2, r5
 8000624:	e785      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000626:	2e00      	cmp	r6, #0
 8000628:	d007      	beq.n	800063a <__aeabi_fadd+0x192>
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	4213      	tst	r3, r2
 8000630:	d003      	beq.n	800063a <__aeabi_fadd+0x192>
 8000632:	4210      	tst	r0, r2
 8000634:	d101      	bne.n	800063a <__aeabi_fadd+0x192>
 8000636:	000c      	movs	r4, r1
 8000638:	0003      	movs	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0db      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4318      	orrs	r0, r3
 8000644:	0240      	lsls	r0, r0, #9
 8000646:	0a43      	lsrs	r3, r0, #9
 8000648:	469c      	mov	ip, r3
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	e771      	b.n	8000532 <__aeabi_fadd+0x8a>
 800064e:	2900      	cmp	r1, #0
 8000650:	d0d5      	beq.n	80005fe <__aeabi_fadd+0x156>
 8000652:	1b7a      	subs	r2, r7, r5
 8000654:	2d00      	cmp	r5, #0
 8000656:	d160      	bne.n	800071a <__aeabi_fadd+0x272>
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d024      	beq.n	80006a8 <__aeabi_fadd+0x200>
 800065e:	1e53      	subs	r3, r2, #1
 8000660:	2a01      	cmp	r2, #1
 8000662:	d073      	beq.n	800074c <__aeabi_fadd+0x2a4>
 8000664:	2aff      	cmp	r2, #255	; 0xff
 8000666:	d0e7      	beq.n	8000638 <__aeabi_fadd+0x190>
 8000668:	001a      	movs	r2, r3
 800066a:	2a1b      	cmp	r2, #27
 800066c:	dc00      	bgt.n	8000670 <__aeabi_fadd+0x1c8>
 800066e:	e085      	b.n	800077c <__aeabi_fadd+0x2d4>
 8000670:	2001      	movs	r0, #1
 8000672:	003d      	movs	r5, r7
 8000674:	1980      	adds	r0, r0, r6
 8000676:	e785      	b.n	8000584 <__aeabi_fadd+0xdc>
 8000678:	2320      	movs	r3, #32
 800067a:	003a      	movs	r2, r7
 800067c:	1b45      	subs	r5, r0, r5
 800067e:	0038      	movs	r0, r7
 8000680:	3501      	adds	r5, #1
 8000682:	40ea      	lsrs	r2, r5
 8000684:	1b5d      	subs	r5, r3, r5
 8000686:	40a8      	lsls	r0, r5
 8000688:	1e43      	subs	r3, r0, #1
 800068a:	4198      	sbcs	r0, r3
 800068c:	2500      	movs	r5, #0
 800068e:	4310      	orrs	r0, r2
 8000690:	e73e      	b.n	8000510 <__aeabi_fadd+0x68>
 8000692:	2320      	movs	r3, #32
 8000694:	0030      	movs	r0, r6
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	0031      	movs	r1, r6
 800069a:	4098      	lsls	r0, r3
 800069c:	40d1      	lsrs	r1, r2
 800069e:	1e43      	subs	r3, r0, #1
 80006a0:	4198      	sbcs	r0, r3
 80006a2:	4308      	orrs	r0, r1
 80006a4:	e722      	b.n	80004ec <__aeabi_fadd+0x44>
 80006a6:	000c      	movs	r4, r1
 80006a8:	0003      	movs	r3, r0
 80006aa:	0015      	movs	r5, r2
 80006ac:	e7b4      	b.n	8000618 <__aeabi_fadd+0x170>
 80006ae:	2fff      	cmp	r7, #255	; 0xff
 80006b0:	d0c1      	beq.n	8000636 <__aeabi_fadd+0x18e>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	4640      	mov	r0, r8
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	4318      	orrs	r0, r3
 80006ba:	4680      	mov	r8, r0
 80006bc:	2a1b      	cmp	r2, #27
 80006be:	dd51      	ble.n	8000764 <__aeabi_fadd+0x2bc>
 80006c0:	2001      	movs	r0, #1
 80006c2:	000c      	movs	r4, r1
 80006c4:	003d      	movs	r5, r7
 80006c6:	1a30      	subs	r0, r6, r0
 80006c8:	e712      	b.n	80004f0 <__aeabi_fadd+0x48>
 80006ca:	4643      	mov	r3, r8
 80006cc:	1b9f      	subs	r7, r3, r6
 80006ce:	017b      	lsls	r3, r7, #5
 80006d0:	d42b      	bmi.n	800072a <__aeabi_fadd+0x282>
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80006d6:	e710      	b.n	80004fa <__aeabi_fadd+0x52>
 80006d8:	2300      	movs	r3, #0
 80006da:	2400      	movs	r4, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	469c      	mov	ip, r3
 80006e0:	e727      	b.n	8000532 <__aeabi_fadd+0x8a>
 80006e2:	2320      	movs	r3, #32
 80006e4:	0032      	movs	r2, r6
 80006e6:	0030      	movs	r0, r6
 80006e8:	40ca      	lsrs	r2, r1
 80006ea:	1a59      	subs	r1, r3, r1
 80006ec:	4088      	lsls	r0, r1
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4310      	orrs	r0, r2
 80006f4:	e745      	b.n	8000582 <__aeabi_fadd+0xda>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d14a      	bne.n	8000790 <__aeabi_fadd+0x2e8>
 80006fa:	4643      	mov	r3, r8
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d063      	beq.n	80007c8 <__aeabi_fadd+0x320>
 8000700:	2200      	movs	r2, #0
 8000702:	2e00      	cmp	r6, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x260>
 8000706:	e714      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000708:	0030      	movs	r0, r6
 800070a:	4440      	add	r0, r8
 800070c:	0143      	lsls	r3, r0, #5
 800070e:	d400      	bmi.n	8000712 <__aeabi_fadd+0x26a>
 8000710:	e77e      	b.n	8000610 <__aeabi_fadd+0x168>
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <__aeabi_fadd+0x334>)
 8000714:	3501      	adds	r5, #1
 8000716:	4018      	ands	r0, r3
 8000718:	e77a      	b.n	8000610 <__aeabi_fadd+0x168>
 800071a:	2fff      	cmp	r7, #255	; 0xff
 800071c:	d08c      	beq.n	8000638 <__aeabi_fadd+0x190>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	4641      	mov	r1, r8
 8000722:	04db      	lsls	r3, r3, #19
 8000724:	4319      	orrs	r1, r3
 8000726:	4688      	mov	r8, r1
 8000728:	e79f      	b.n	800066a <__aeabi_fadd+0x1c2>
 800072a:	4643      	mov	r3, r8
 800072c:	000c      	movs	r4, r1
 800072e:	1af7      	subs	r7, r6, r3
 8000730:	e6e3      	b.n	80004fa <__aeabi_fadd+0x52>
 8000732:	4642      	mov	r2, r8
 8000734:	2a00      	cmp	r2, #0
 8000736:	d000      	beq.n	800073a <__aeabi_fadd+0x292>
 8000738:	e775      	b.n	8000626 <__aeabi_fadd+0x17e>
 800073a:	2e00      	cmp	r6, #0
 800073c:	d000      	beq.n	8000740 <__aeabi_fadd+0x298>
 800073e:	e77a      	b.n	8000636 <__aeabi_fadd+0x18e>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	03db      	lsls	r3, r3, #15
 8000744:	2400      	movs	r4, #0
 8000746:	469c      	mov	ip, r3
 8000748:	22ff      	movs	r2, #255	; 0xff
 800074a:	e6f2      	b.n	8000532 <__aeabi_fadd+0x8a>
 800074c:	0030      	movs	r0, r6
 800074e:	4440      	add	r0, r8
 8000750:	2501      	movs	r5, #1
 8000752:	0143      	lsls	r3, r0, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fadd+0x2b0>
 8000756:	e75b      	b.n	8000610 <__aeabi_fadd+0x168>
 8000758:	2502      	movs	r5, #2
 800075a:	e718      	b.n	800058e <__aeabi_fadd+0xe6>
 800075c:	4643      	mov	r3, r8
 800075e:	2501      	movs	r5, #1
 8000760:	1b98      	subs	r0, r3, r6
 8000762:	e6c5      	b.n	80004f0 <__aeabi_fadd+0x48>
 8000764:	2320      	movs	r3, #32
 8000766:	4644      	mov	r4, r8
 8000768:	4640      	mov	r0, r8
 800076a:	40d4      	lsrs	r4, r2
 800076c:	1a9a      	subs	r2, r3, r2
 800076e:	4090      	lsls	r0, r2
 8000770:	1e43      	subs	r3, r0, #1
 8000772:	4198      	sbcs	r0, r3
 8000774:	4320      	orrs	r0, r4
 8000776:	e7a4      	b.n	80006c2 <__aeabi_fadd+0x21a>
 8000778:	000d      	movs	r5, r1
 800077a:	e74d      	b.n	8000618 <__aeabi_fadd+0x170>
 800077c:	2320      	movs	r3, #32
 800077e:	4641      	mov	r1, r8
 8000780:	4640      	mov	r0, r8
 8000782:	40d1      	lsrs	r1, r2
 8000784:	1a9a      	subs	r2, r3, r2
 8000786:	4090      	lsls	r0, r2
 8000788:	1e43      	subs	r3, r0, #1
 800078a:	4198      	sbcs	r0, r3
 800078c:	4308      	orrs	r0, r1
 800078e:	e770      	b.n	8000672 <__aeabi_fadd+0x1ca>
 8000790:	4642      	mov	r2, r8
 8000792:	2a00      	cmp	r2, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x2f0>
 8000796:	e74f      	b.n	8000638 <__aeabi_fadd+0x190>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2f6>
 800079c:	e74d      	b.n	800063a <__aeabi_fadd+0x192>
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4213      	tst	r3, r2
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x300>
 80007a6:	e748      	b.n	800063a <__aeabi_fadd+0x192>
 80007a8:	4210      	tst	r0, r2
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0x306>
 80007ac:	e745      	b.n	800063a <__aeabi_fadd+0x192>
 80007ae:	0003      	movs	r3, r0
 80007b0:	e743      	b.n	800063a <__aeabi_fadd+0x192>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d090      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80007b6:	000c      	movs	r4, r1
 80007b8:	4684      	mov	ip, r0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e6b9      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007be:	4643      	mov	r3, r8
 80007c0:	000c      	movs	r4, r1
 80007c2:	1af0      	subs	r0, r6, r3
 80007c4:	3501      	adds	r5, #1
 80007c6:	e693      	b.n	80004f0 <__aeabi_fadd+0x48>
 80007c8:	4684      	mov	ip, r0
 80007ca:	2200      	movs	r2, #0
 80007cc:	e6b1      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fadd+0x32c>
 80007d2:	e71d      	b.n	8000610 <__aeabi_fadd+0x168>
 80007d4:	2300      	movs	r3, #0
 80007d6:	2400      	movs	r4, #0
 80007d8:	469c      	mov	ip, r3
 80007da:	e6aa      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007dc:	fbffffff 	.word	0xfbffffff
 80007e0:	7dffffff 	.word	0x7dffffff

080007e4 <__aeabi_fdiv>:
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	464f      	mov	r7, r9
 80007e8:	4646      	mov	r6, r8
 80007ea:	46d6      	mov	lr, sl
 80007ec:	0245      	lsls	r5, r0, #9
 80007ee:	b5c0      	push	{r6, r7, lr}
 80007f0:	0047      	lsls	r7, r0, #1
 80007f2:	1c0c      	adds	r4, r1, #0
 80007f4:	0a6d      	lsrs	r5, r5, #9
 80007f6:	0e3f      	lsrs	r7, r7, #24
 80007f8:	0fc6      	lsrs	r6, r0, #31
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fdiv+0x1c>
 80007fe:	e070      	b.n	80008e2 <__aeabi_fdiv+0xfe>
 8000800:	2fff      	cmp	r7, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fdiv+0x22>
 8000804:	e075      	b.n	80008f2 <__aeabi_fdiv+0x10e>
 8000806:	00eb      	lsls	r3, r5, #3
 8000808:	2580      	movs	r5, #128	; 0x80
 800080a:	04ed      	lsls	r5, r5, #19
 800080c:	431d      	orrs	r5, r3
 800080e:	2300      	movs	r3, #0
 8000810:	4699      	mov	r9, r3
 8000812:	469a      	mov	sl, r3
 8000814:	3f7f      	subs	r7, #127	; 0x7f
 8000816:	0260      	lsls	r0, r4, #9
 8000818:	0a43      	lsrs	r3, r0, #9
 800081a:	4698      	mov	r8, r3
 800081c:	0063      	lsls	r3, r4, #1
 800081e:	0e1b      	lsrs	r3, r3, #24
 8000820:	0fe4      	lsrs	r4, r4, #31
 8000822:	2b00      	cmp	r3, #0
 8000824:	d04e      	beq.n	80008c4 <__aeabi_fdiv+0xe0>
 8000826:	2bff      	cmp	r3, #255	; 0xff
 8000828:	d046      	beq.n	80008b8 <__aeabi_fdiv+0xd4>
 800082a:	4642      	mov	r2, r8
 800082c:	00d0      	lsls	r0, r2, #3
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	04d2      	lsls	r2, r2, #19
 8000832:	4302      	orrs	r2, r0
 8000834:	4690      	mov	r8, r2
 8000836:	2200      	movs	r2, #0
 8000838:	3b7f      	subs	r3, #127	; 0x7f
 800083a:	0031      	movs	r1, r6
 800083c:	1aff      	subs	r7, r7, r3
 800083e:	464b      	mov	r3, r9
 8000840:	4061      	eors	r1, r4
 8000842:	b2c9      	uxtb	r1, r1
 8000844:	4313      	orrs	r3, r2
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d900      	bls.n	800084c <__aeabi_fdiv+0x68>
 800084a:	e0b5      	b.n	80009b8 <__aeabi_fdiv+0x1d4>
 800084c:	486e      	ldr	r0, [pc, #440]	; (8000a08 <__aeabi_fdiv+0x224>)
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	58c3      	ldr	r3, [r0, r3]
 8000852:	469f      	mov	pc, r3
 8000854:	2300      	movs	r3, #0
 8000856:	4698      	mov	r8, r3
 8000858:	0026      	movs	r6, r4
 800085a:	4645      	mov	r5, r8
 800085c:	4692      	mov	sl, r2
 800085e:	4653      	mov	r3, sl
 8000860:	2b02      	cmp	r3, #2
 8000862:	d100      	bne.n	8000866 <__aeabi_fdiv+0x82>
 8000864:	e089      	b.n	800097a <__aeabi_fdiv+0x196>
 8000866:	2b03      	cmp	r3, #3
 8000868:	d100      	bne.n	800086c <__aeabi_fdiv+0x88>
 800086a:	e09e      	b.n	80009aa <__aeabi_fdiv+0x1c6>
 800086c:	2b01      	cmp	r3, #1
 800086e:	d018      	beq.n	80008a2 <__aeabi_fdiv+0xbe>
 8000870:	003b      	movs	r3, r7
 8000872:	337f      	adds	r3, #127	; 0x7f
 8000874:	2b00      	cmp	r3, #0
 8000876:	dd69      	ble.n	800094c <__aeabi_fdiv+0x168>
 8000878:	076a      	lsls	r2, r5, #29
 800087a:	d004      	beq.n	8000886 <__aeabi_fdiv+0xa2>
 800087c:	220f      	movs	r2, #15
 800087e:	402a      	ands	r2, r5
 8000880:	2a04      	cmp	r2, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fdiv+0xa2>
 8000884:	3504      	adds	r5, #4
 8000886:	012a      	lsls	r2, r5, #4
 8000888:	d503      	bpl.n	8000892 <__aeabi_fdiv+0xae>
 800088a:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <__aeabi_fdiv+0x228>)
 800088c:	401d      	ands	r5, r3
 800088e:	003b      	movs	r3, r7
 8000890:	3380      	adds	r3, #128	; 0x80
 8000892:	2bfe      	cmp	r3, #254	; 0xfe
 8000894:	dd00      	ble.n	8000898 <__aeabi_fdiv+0xb4>
 8000896:	e070      	b.n	800097a <__aeabi_fdiv+0x196>
 8000898:	01ad      	lsls	r5, r5, #6
 800089a:	0a6d      	lsrs	r5, r5, #9
 800089c:	b2d8      	uxtb	r0, r3
 800089e:	e002      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 80008a0:	000e      	movs	r6, r1
 80008a2:	2000      	movs	r0, #0
 80008a4:	2500      	movs	r5, #0
 80008a6:	05c0      	lsls	r0, r0, #23
 80008a8:	4328      	orrs	r0, r5
 80008aa:	07f6      	lsls	r6, r6, #31
 80008ac:	4330      	orrs	r0, r6
 80008ae:	bce0      	pop	{r5, r6, r7}
 80008b0:	46ba      	mov	sl, r7
 80008b2:	46b1      	mov	r9, r6
 80008b4:	46a8      	mov	r8, r5
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b8:	4643      	mov	r3, r8
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d13f      	bne.n	800093e <__aeabi_fdiv+0x15a>
 80008be:	2202      	movs	r2, #2
 80008c0:	3fff      	subs	r7, #255	; 0xff
 80008c2:	e003      	b.n	80008cc <__aeabi_fdiv+0xe8>
 80008c4:	4643      	mov	r3, r8
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d12d      	bne.n	8000926 <__aeabi_fdiv+0x142>
 80008ca:	2201      	movs	r2, #1
 80008cc:	0031      	movs	r1, r6
 80008ce:	464b      	mov	r3, r9
 80008d0:	4061      	eors	r1, r4
 80008d2:	b2c9      	uxtb	r1, r1
 80008d4:	4313      	orrs	r3, r2
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d834      	bhi.n	8000944 <__aeabi_fdiv+0x160>
 80008da:	484d      	ldr	r0, [pc, #308]	; (8000a10 <__aeabi_fdiv+0x22c>)
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	58c3      	ldr	r3, [r0, r3]
 80008e0:	469f      	mov	pc, r3
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d113      	bne.n	800090e <__aeabi_fdiv+0x12a>
 80008e6:	2304      	movs	r3, #4
 80008e8:	4699      	mov	r9, r3
 80008ea:	3b03      	subs	r3, #3
 80008ec:	2700      	movs	r7, #0
 80008ee:	469a      	mov	sl, r3
 80008f0:	e791      	b.n	8000816 <__aeabi_fdiv+0x32>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d105      	bne.n	8000902 <__aeabi_fdiv+0x11e>
 80008f6:	2308      	movs	r3, #8
 80008f8:	4699      	mov	r9, r3
 80008fa:	3b06      	subs	r3, #6
 80008fc:	27ff      	movs	r7, #255	; 0xff
 80008fe:	469a      	mov	sl, r3
 8000900:	e789      	b.n	8000816 <__aeabi_fdiv+0x32>
 8000902:	230c      	movs	r3, #12
 8000904:	4699      	mov	r9, r3
 8000906:	3b09      	subs	r3, #9
 8000908:	27ff      	movs	r7, #255	; 0xff
 800090a:	469a      	mov	sl, r3
 800090c:	e783      	b.n	8000816 <__aeabi_fdiv+0x32>
 800090e:	0028      	movs	r0, r5
 8000910:	f001 ff36 	bl	8002780 <__clzsi2>
 8000914:	2776      	movs	r7, #118	; 0x76
 8000916:	1f43      	subs	r3, r0, #5
 8000918:	409d      	lsls	r5, r3
 800091a:	2300      	movs	r3, #0
 800091c:	427f      	negs	r7, r7
 800091e:	4699      	mov	r9, r3
 8000920:	469a      	mov	sl, r3
 8000922:	1a3f      	subs	r7, r7, r0
 8000924:	e777      	b.n	8000816 <__aeabi_fdiv+0x32>
 8000926:	4640      	mov	r0, r8
 8000928:	f001 ff2a 	bl	8002780 <__clzsi2>
 800092c:	4642      	mov	r2, r8
 800092e:	1f43      	subs	r3, r0, #5
 8000930:	409a      	lsls	r2, r3
 8000932:	2376      	movs	r3, #118	; 0x76
 8000934:	425b      	negs	r3, r3
 8000936:	4690      	mov	r8, r2
 8000938:	1a1b      	subs	r3, r3, r0
 800093a:	2200      	movs	r2, #0
 800093c:	e77d      	b.n	800083a <__aeabi_fdiv+0x56>
 800093e:	23ff      	movs	r3, #255	; 0xff
 8000940:	2203      	movs	r2, #3
 8000942:	e77a      	b.n	800083a <__aeabi_fdiv+0x56>
 8000944:	000e      	movs	r6, r1
 8000946:	20ff      	movs	r0, #255	; 0xff
 8000948:	2500      	movs	r5, #0
 800094a:	e7ac      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 800094c:	2001      	movs	r0, #1
 800094e:	1ac0      	subs	r0, r0, r3
 8000950:	281b      	cmp	r0, #27
 8000952:	dca6      	bgt.n	80008a2 <__aeabi_fdiv+0xbe>
 8000954:	379e      	adds	r7, #158	; 0x9e
 8000956:	002a      	movs	r2, r5
 8000958:	40bd      	lsls	r5, r7
 800095a:	40c2      	lsrs	r2, r0
 800095c:	1e6b      	subs	r3, r5, #1
 800095e:	419d      	sbcs	r5, r3
 8000960:	4315      	orrs	r5, r2
 8000962:	076b      	lsls	r3, r5, #29
 8000964:	d004      	beq.n	8000970 <__aeabi_fdiv+0x18c>
 8000966:	230f      	movs	r3, #15
 8000968:	402b      	ands	r3, r5
 800096a:	2b04      	cmp	r3, #4
 800096c:	d000      	beq.n	8000970 <__aeabi_fdiv+0x18c>
 800096e:	3504      	adds	r5, #4
 8000970:	016b      	lsls	r3, r5, #5
 8000972:	d544      	bpl.n	80009fe <__aeabi_fdiv+0x21a>
 8000974:	2001      	movs	r0, #1
 8000976:	2500      	movs	r5, #0
 8000978:	e795      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	2500      	movs	r5, #0
 800097e:	e792      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 8000980:	2580      	movs	r5, #128	; 0x80
 8000982:	2600      	movs	r6, #0
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	03ed      	lsls	r5, r5, #15
 8000988:	e78d      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 800098a:	2300      	movs	r3, #0
 800098c:	4698      	mov	r8, r3
 800098e:	2080      	movs	r0, #128	; 0x80
 8000990:	03c0      	lsls	r0, r0, #15
 8000992:	4205      	tst	r5, r0
 8000994:	d009      	beq.n	80009aa <__aeabi_fdiv+0x1c6>
 8000996:	4643      	mov	r3, r8
 8000998:	4203      	tst	r3, r0
 800099a:	d106      	bne.n	80009aa <__aeabi_fdiv+0x1c6>
 800099c:	4645      	mov	r5, r8
 800099e:	4305      	orrs	r5, r0
 80009a0:	026d      	lsls	r5, r5, #9
 80009a2:	0026      	movs	r6, r4
 80009a4:	20ff      	movs	r0, #255	; 0xff
 80009a6:	0a6d      	lsrs	r5, r5, #9
 80009a8:	e77d      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 80009aa:	2080      	movs	r0, #128	; 0x80
 80009ac:	03c0      	lsls	r0, r0, #15
 80009ae:	4305      	orrs	r5, r0
 80009b0:	026d      	lsls	r5, r5, #9
 80009b2:	20ff      	movs	r0, #255	; 0xff
 80009b4:	0a6d      	lsrs	r5, r5, #9
 80009b6:	e776      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 80009b8:	4642      	mov	r2, r8
 80009ba:	016b      	lsls	r3, r5, #5
 80009bc:	0150      	lsls	r0, r2, #5
 80009be:	4283      	cmp	r3, r0
 80009c0:	d219      	bcs.n	80009f6 <__aeabi_fdiv+0x212>
 80009c2:	221b      	movs	r2, #27
 80009c4:	2500      	movs	r5, #0
 80009c6:	3f01      	subs	r7, #1
 80009c8:	2601      	movs	r6, #1
 80009ca:	001c      	movs	r4, r3
 80009cc:	006d      	lsls	r5, r5, #1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2c00      	cmp	r4, #0
 80009d2:	db01      	blt.n	80009d8 <__aeabi_fdiv+0x1f4>
 80009d4:	4298      	cmp	r0, r3
 80009d6:	d801      	bhi.n	80009dc <__aeabi_fdiv+0x1f8>
 80009d8:	1a1b      	subs	r3, r3, r0
 80009da:	4335      	orrs	r5, r6
 80009dc:	3a01      	subs	r2, #1
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d1f3      	bne.n	80009ca <__aeabi_fdiv+0x1e6>
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	4193      	sbcs	r3, r2
 80009e6:	431d      	orrs	r5, r3
 80009e8:	003b      	movs	r3, r7
 80009ea:	337f      	adds	r3, #127	; 0x7f
 80009ec:	000e      	movs	r6, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	dd00      	ble.n	80009f4 <__aeabi_fdiv+0x210>
 80009f2:	e741      	b.n	8000878 <__aeabi_fdiv+0x94>
 80009f4:	e7aa      	b.n	800094c <__aeabi_fdiv+0x168>
 80009f6:	221a      	movs	r2, #26
 80009f8:	2501      	movs	r5, #1
 80009fa:	1a1b      	subs	r3, r3, r0
 80009fc:	e7e4      	b.n	80009c8 <__aeabi_fdiv+0x1e4>
 80009fe:	01ad      	lsls	r5, r5, #6
 8000a00:	2000      	movs	r0, #0
 8000a02:	0a6d      	lsrs	r5, r5, #9
 8000a04:	e74f      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	08009f10 	.word	0x08009f10
 8000a0c:	f7ffffff 	.word	0xf7ffffff
 8000a10:	08009f50 	.word	0x08009f50

08000a14 <__aeabi_dadd>:
 8000a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a16:	464f      	mov	r7, r9
 8000a18:	4646      	mov	r6, r8
 8000a1a:	46d6      	mov	lr, sl
 8000a1c:	000d      	movs	r5, r1
 8000a1e:	0004      	movs	r4, r0
 8000a20:	b5c0      	push	{r6, r7, lr}
 8000a22:	001f      	movs	r7, r3
 8000a24:	0011      	movs	r1, r2
 8000a26:	0328      	lsls	r0, r5, #12
 8000a28:	0f62      	lsrs	r2, r4, #29
 8000a2a:	0a40      	lsrs	r0, r0, #9
 8000a2c:	4310      	orrs	r0, r2
 8000a2e:	007a      	lsls	r2, r7, #1
 8000a30:	0d52      	lsrs	r2, r2, #21
 8000a32:	00e3      	lsls	r3, r4, #3
 8000a34:	033c      	lsls	r4, r7, #12
 8000a36:	4691      	mov	r9, r2
 8000a38:	0a64      	lsrs	r4, r4, #9
 8000a3a:	0ffa      	lsrs	r2, r7, #31
 8000a3c:	0f4f      	lsrs	r7, r1, #29
 8000a3e:	006e      	lsls	r6, r5, #1
 8000a40:	4327      	orrs	r7, r4
 8000a42:	4692      	mov	sl, r2
 8000a44:	46b8      	mov	r8, r7
 8000a46:	0d76      	lsrs	r6, r6, #21
 8000a48:	0fed      	lsrs	r5, r5, #31
 8000a4a:	00c9      	lsls	r1, r1, #3
 8000a4c:	4295      	cmp	r5, r2
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x3e>
 8000a50:	e099      	b.n	8000b86 <__aeabi_dadd+0x172>
 8000a52:	464c      	mov	r4, r9
 8000a54:	1b34      	subs	r4, r6, r4
 8000a56:	46a4      	mov	ip, r4
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	dc00      	bgt.n	8000a5e <__aeabi_dadd+0x4a>
 8000a5c:	e07c      	b.n	8000b58 <__aeabi_dadd+0x144>
 8000a5e:	464a      	mov	r2, r9
 8000a60:	2a00      	cmp	r2, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dadd+0x52>
 8000a64:	e0b8      	b.n	8000bd8 <__aeabi_dadd+0x1c4>
 8000a66:	4ac5      	ldr	r2, [pc, #788]	; (8000d7c <__aeabi_dadd+0x368>)
 8000a68:	4296      	cmp	r6, r2
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dadd+0x5a>
 8000a6c:	e11c      	b.n	8000ca8 <__aeabi_dadd+0x294>
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	003c      	movs	r4, r7
 8000a72:	0412      	lsls	r2, r2, #16
 8000a74:	4314      	orrs	r4, r2
 8000a76:	46a0      	mov	r8, r4
 8000a78:	4662      	mov	r2, ip
 8000a7a:	2a38      	cmp	r2, #56	; 0x38
 8000a7c:	dd00      	ble.n	8000a80 <__aeabi_dadd+0x6c>
 8000a7e:	e161      	b.n	8000d44 <__aeabi_dadd+0x330>
 8000a80:	2a1f      	cmp	r2, #31
 8000a82:	dd00      	ble.n	8000a86 <__aeabi_dadd+0x72>
 8000a84:	e1cc      	b.n	8000e20 <__aeabi_dadd+0x40c>
 8000a86:	4664      	mov	r4, ip
 8000a88:	2220      	movs	r2, #32
 8000a8a:	1b12      	subs	r2, r2, r4
 8000a8c:	4644      	mov	r4, r8
 8000a8e:	4094      	lsls	r4, r2
 8000a90:	000f      	movs	r7, r1
 8000a92:	46a1      	mov	r9, r4
 8000a94:	4664      	mov	r4, ip
 8000a96:	4091      	lsls	r1, r2
 8000a98:	40e7      	lsrs	r7, r4
 8000a9a:	464c      	mov	r4, r9
 8000a9c:	1e4a      	subs	r2, r1, #1
 8000a9e:	4191      	sbcs	r1, r2
 8000aa0:	433c      	orrs	r4, r7
 8000aa2:	4642      	mov	r2, r8
 8000aa4:	4321      	orrs	r1, r4
 8000aa6:	4664      	mov	r4, ip
 8000aa8:	40e2      	lsrs	r2, r4
 8000aaa:	1a80      	subs	r0, r0, r2
 8000aac:	1a5c      	subs	r4, r3, r1
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	419b      	sbcs	r3, r3
 8000ab2:	425f      	negs	r7, r3
 8000ab4:	1bc7      	subs	r7, r0, r7
 8000ab6:	023b      	lsls	r3, r7, #8
 8000ab8:	d400      	bmi.n	8000abc <__aeabi_dadd+0xa8>
 8000aba:	e0d0      	b.n	8000c5e <__aeabi_dadd+0x24a>
 8000abc:	027f      	lsls	r7, r7, #9
 8000abe:	0a7f      	lsrs	r7, r7, #9
 8000ac0:	2f00      	cmp	r7, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0xb2>
 8000ac4:	e0ff      	b.n	8000cc6 <__aeabi_dadd+0x2b2>
 8000ac6:	0038      	movs	r0, r7
 8000ac8:	f001 fe5a 	bl	8002780 <__clzsi2>
 8000acc:	0001      	movs	r1, r0
 8000ace:	3908      	subs	r1, #8
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	0022      	movs	r2, r4
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	408f      	lsls	r7, r1
 8000ad8:	40da      	lsrs	r2, r3
 8000ada:	408c      	lsls	r4, r1
 8000adc:	4317      	orrs	r7, r2
 8000ade:	42b1      	cmp	r1, r6
 8000ae0:	da00      	bge.n	8000ae4 <__aeabi_dadd+0xd0>
 8000ae2:	e0ff      	b.n	8000ce4 <__aeabi_dadd+0x2d0>
 8000ae4:	1b89      	subs	r1, r1, r6
 8000ae6:	1c4b      	adds	r3, r1, #1
 8000ae8:	2b1f      	cmp	r3, #31
 8000aea:	dd00      	ble.n	8000aee <__aeabi_dadd+0xda>
 8000aec:	e0a8      	b.n	8000c40 <__aeabi_dadd+0x22c>
 8000aee:	2220      	movs	r2, #32
 8000af0:	0039      	movs	r1, r7
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	0020      	movs	r0, r4
 8000af6:	4094      	lsls	r4, r2
 8000af8:	4091      	lsls	r1, r2
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	1e62      	subs	r2, r4, #1
 8000afe:	4194      	sbcs	r4, r2
 8000b00:	40df      	lsrs	r7, r3
 8000b02:	2600      	movs	r6, #0
 8000b04:	4301      	orrs	r1, r0
 8000b06:	430c      	orrs	r4, r1
 8000b08:	0763      	lsls	r3, r4, #29
 8000b0a:	d009      	beq.n	8000b20 <__aeabi_dadd+0x10c>
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	4023      	ands	r3, r4
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d005      	beq.n	8000b20 <__aeabi_dadd+0x10c>
 8000b14:	1d23      	adds	r3, r4, #4
 8000b16:	42a3      	cmp	r3, r4
 8000b18:	41a4      	sbcs	r4, r4
 8000b1a:	4264      	negs	r4, r4
 8000b1c:	193f      	adds	r7, r7, r4
 8000b1e:	001c      	movs	r4, r3
 8000b20:	023b      	lsls	r3, r7, #8
 8000b22:	d400      	bmi.n	8000b26 <__aeabi_dadd+0x112>
 8000b24:	e09e      	b.n	8000c64 <__aeabi_dadd+0x250>
 8000b26:	4b95      	ldr	r3, [pc, #596]	; (8000d7c <__aeabi_dadd+0x368>)
 8000b28:	3601      	adds	r6, #1
 8000b2a:	429e      	cmp	r6, r3
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x11c>
 8000b2e:	e0b7      	b.n	8000ca0 <__aeabi_dadd+0x28c>
 8000b30:	4a93      	ldr	r2, [pc, #588]	; (8000d80 <__aeabi_dadd+0x36c>)
 8000b32:	08e4      	lsrs	r4, r4, #3
 8000b34:	4017      	ands	r7, r2
 8000b36:	077b      	lsls	r3, r7, #29
 8000b38:	0571      	lsls	r1, r6, #21
 8000b3a:	027f      	lsls	r7, r7, #9
 8000b3c:	4323      	orrs	r3, r4
 8000b3e:	0b3f      	lsrs	r7, r7, #12
 8000b40:	0d4a      	lsrs	r2, r1, #21
 8000b42:	0512      	lsls	r2, r2, #20
 8000b44:	433a      	orrs	r2, r7
 8000b46:	07ed      	lsls	r5, r5, #31
 8000b48:	432a      	orrs	r2, r5
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	bce0      	pop	{r5, r6, r7}
 8000b50:	46ba      	mov	sl, r7
 8000b52:	46b1      	mov	r9, r6
 8000b54:	46a8      	mov	r8, r5
 8000b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b58:	2c00      	cmp	r4, #0
 8000b5a:	d04b      	beq.n	8000bf4 <__aeabi_dadd+0x1e0>
 8000b5c:	464c      	mov	r4, r9
 8000b5e:	1ba4      	subs	r4, r4, r6
 8000b60:	46a4      	mov	ip, r4
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d000      	beq.n	8000b68 <__aeabi_dadd+0x154>
 8000b66:	e123      	b.n	8000db0 <__aeabi_dadd+0x39c>
 8000b68:	0004      	movs	r4, r0
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_dadd+0x15c>
 8000b6e:	e1af      	b.n	8000ed0 <__aeabi_dadd+0x4bc>
 8000b70:	4662      	mov	r2, ip
 8000b72:	1e54      	subs	r4, r2, #1
 8000b74:	2a01      	cmp	r2, #1
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dadd+0x166>
 8000b78:	e215      	b.n	8000fa6 <__aeabi_dadd+0x592>
 8000b7a:	4d80      	ldr	r5, [pc, #512]	; (8000d7c <__aeabi_dadd+0x368>)
 8000b7c:	45ac      	cmp	ip, r5
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x16e>
 8000b80:	e1c8      	b.n	8000f14 <__aeabi_dadd+0x500>
 8000b82:	46a4      	mov	ip, r4
 8000b84:	e11b      	b.n	8000dbe <__aeabi_dadd+0x3aa>
 8000b86:	464a      	mov	r2, r9
 8000b88:	1ab2      	subs	r2, r6, r2
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	dc00      	bgt.n	8000b92 <__aeabi_dadd+0x17e>
 8000b90:	e0ac      	b.n	8000cec <__aeabi_dadd+0x2d8>
 8000b92:	464a      	mov	r2, r9
 8000b94:	2a00      	cmp	r2, #0
 8000b96:	d043      	beq.n	8000c20 <__aeabi_dadd+0x20c>
 8000b98:	4a78      	ldr	r2, [pc, #480]	; (8000d7c <__aeabi_dadd+0x368>)
 8000b9a:	4296      	cmp	r6, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0x18c>
 8000b9e:	e1af      	b.n	8000f00 <__aeabi_dadd+0x4ec>
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	003c      	movs	r4, r7
 8000ba4:	0412      	lsls	r2, r2, #16
 8000ba6:	4314      	orrs	r4, r2
 8000ba8:	46a0      	mov	r8, r4
 8000baa:	4662      	mov	r2, ip
 8000bac:	2a38      	cmp	r2, #56	; 0x38
 8000bae:	dc67      	bgt.n	8000c80 <__aeabi_dadd+0x26c>
 8000bb0:	2a1f      	cmp	r2, #31
 8000bb2:	dc00      	bgt.n	8000bb6 <__aeabi_dadd+0x1a2>
 8000bb4:	e15f      	b.n	8000e76 <__aeabi_dadd+0x462>
 8000bb6:	4647      	mov	r7, r8
 8000bb8:	3a20      	subs	r2, #32
 8000bba:	40d7      	lsrs	r7, r2
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	2a20      	cmp	r2, #32
 8000bc0:	d005      	beq.n	8000bce <__aeabi_dadd+0x1ba>
 8000bc2:	4664      	mov	r4, ip
 8000bc4:	2240      	movs	r2, #64	; 0x40
 8000bc6:	1b12      	subs	r2, r2, r4
 8000bc8:	4644      	mov	r4, r8
 8000bca:	4094      	lsls	r4, r2
 8000bcc:	4321      	orrs	r1, r4
 8000bce:	1e4a      	subs	r2, r1, #1
 8000bd0:	4191      	sbcs	r1, r2
 8000bd2:	000c      	movs	r4, r1
 8000bd4:	433c      	orrs	r4, r7
 8000bd6:	e057      	b.n	8000c88 <__aeabi_dadd+0x274>
 8000bd8:	003a      	movs	r2, r7
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x1cc>
 8000bde:	e105      	b.n	8000dec <__aeabi_dadd+0x3d8>
 8000be0:	0022      	movs	r2, r4
 8000be2:	3a01      	subs	r2, #1
 8000be4:	2c01      	cmp	r4, #1
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x1d6>
 8000be8:	e182      	b.n	8000ef0 <__aeabi_dadd+0x4dc>
 8000bea:	4c64      	ldr	r4, [pc, #400]	; (8000d7c <__aeabi_dadd+0x368>)
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d05b      	beq.n	8000ca8 <__aeabi_dadd+0x294>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	e741      	b.n	8000a78 <__aeabi_dadd+0x64>
 8000bf4:	4c63      	ldr	r4, [pc, #396]	; (8000d84 <__aeabi_dadd+0x370>)
 8000bf6:	1c77      	adds	r7, r6, #1
 8000bf8:	4227      	tst	r7, r4
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_dadd+0x1ea>
 8000bfc:	e0c4      	b.n	8000d88 <__aeabi_dadd+0x374>
 8000bfe:	0004      	movs	r4, r0
 8000c00:	431c      	orrs	r4, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d000      	beq.n	8000c08 <__aeabi_dadd+0x1f4>
 8000c06:	e169      	b.n	8000edc <__aeabi_dadd+0x4c8>
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dadd+0x1fa>
 8000c0c:	e1bf      	b.n	8000f8e <__aeabi_dadd+0x57a>
 8000c0e:	4644      	mov	r4, r8
 8000c10:	430c      	orrs	r4, r1
 8000c12:	d000      	beq.n	8000c16 <__aeabi_dadd+0x202>
 8000c14:	e1d0      	b.n	8000fb8 <__aeabi_dadd+0x5a4>
 8000c16:	0742      	lsls	r2, r0, #29
 8000c18:	08db      	lsrs	r3, r3, #3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	08c0      	lsrs	r0, r0, #3
 8000c1e:	e029      	b.n	8000c74 <__aeabi_dadd+0x260>
 8000c20:	003a      	movs	r2, r7
 8000c22:	430a      	orrs	r2, r1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x214>
 8000c26:	e170      	b.n	8000f0a <__aeabi_dadd+0x4f6>
 8000c28:	4662      	mov	r2, ip
 8000c2a:	4664      	mov	r4, ip
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	2c01      	cmp	r4, #1
 8000c30:	d100      	bne.n	8000c34 <__aeabi_dadd+0x220>
 8000c32:	e0e0      	b.n	8000df6 <__aeabi_dadd+0x3e2>
 8000c34:	4c51      	ldr	r4, [pc, #324]	; (8000d7c <__aeabi_dadd+0x368>)
 8000c36:	45a4      	cmp	ip, r4
 8000c38:	d100      	bne.n	8000c3c <__aeabi_dadd+0x228>
 8000c3a:	e161      	b.n	8000f00 <__aeabi_dadd+0x4ec>
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	e7b4      	b.n	8000baa <__aeabi_dadd+0x196>
 8000c40:	003a      	movs	r2, r7
 8000c42:	391f      	subs	r1, #31
 8000c44:	40ca      	lsrs	r2, r1
 8000c46:	0011      	movs	r1, r2
 8000c48:	2b20      	cmp	r3, #32
 8000c4a:	d003      	beq.n	8000c54 <__aeabi_dadd+0x240>
 8000c4c:	2240      	movs	r2, #64	; 0x40
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	409f      	lsls	r7, r3
 8000c52:	433c      	orrs	r4, r7
 8000c54:	1e63      	subs	r3, r4, #1
 8000c56:	419c      	sbcs	r4, r3
 8000c58:	2700      	movs	r7, #0
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	430c      	orrs	r4, r1
 8000c5e:	0763      	lsls	r3, r4, #29
 8000c60:	d000      	beq.n	8000c64 <__aeabi_dadd+0x250>
 8000c62:	e753      	b.n	8000b0c <__aeabi_dadd+0xf8>
 8000c64:	46b4      	mov	ip, r6
 8000c66:	08e4      	lsrs	r4, r4, #3
 8000c68:	077b      	lsls	r3, r7, #29
 8000c6a:	4323      	orrs	r3, r4
 8000c6c:	08f8      	lsrs	r0, r7, #3
 8000c6e:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <__aeabi_dadd+0x368>)
 8000c70:	4594      	cmp	ip, r2
 8000c72:	d01d      	beq.n	8000cb0 <__aeabi_dadd+0x29c>
 8000c74:	4662      	mov	r2, ip
 8000c76:	0307      	lsls	r7, r0, #12
 8000c78:	0552      	lsls	r2, r2, #21
 8000c7a:	0b3f      	lsrs	r7, r7, #12
 8000c7c:	0d52      	lsrs	r2, r2, #21
 8000c7e:	e760      	b.n	8000b42 <__aeabi_dadd+0x12e>
 8000c80:	4644      	mov	r4, r8
 8000c82:	430c      	orrs	r4, r1
 8000c84:	1e62      	subs	r2, r4, #1
 8000c86:	4194      	sbcs	r4, r2
 8000c88:	18e4      	adds	r4, r4, r3
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	419b      	sbcs	r3, r3
 8000c8e:	425f      	negs	r7, r3
 8000c90:	183f      	adds	r7, r7, r0
 8000c92:	023b      	lsls	r3, r7, #8
 8000c94:	d5e3      	bpl.n	8000c5e <__aeabi_dadd+0x24a>
 8000c96:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <__aeabi_dadd+0x368>)
 8000c98:	3601      	adds	r6, #1
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x28c>
 8000c9e:	e0b5      	b.n	8000e0c <__aeabi_dadd+0x3f8>
 8000ca0:	0032      	movs	r2, r6
 8000ca2:	2700      	movs	r7, #0
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e74c      	b.n	8000b42 <__aeabi_dadd+0x12e>
 8000ca8:	0742      	lsls	r2, r0, #29
 8000caa:	08db      	lsrs	r3, r3, #3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	08c0      	lsrs	r0, r0, #3
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	4302      	orrs	r2, r0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_dadd+0x2a4>
 8000cb6:	e1e1      	b.n	800107c <__aeabi_dadd+0x668>
 8000cb8:	2780      	movs	r7, #128	; 0x80
 8000cba:	033f      	lsls	r7, r7, #12
 8000cbc:	4307      	orrs	r7, r0
 8000cbe:	033f      	lsls	r7, r7, #12
 8000cc0:	4a2e      	ldr	r2, [pc, #184]	; (8000d7c <__aeabi_dadd+0x368>)
 8000cc2:	0b3f      	lsrs	r7, r7, #12
 8000cc4:	e73d      	b.n	8000b42 <__aeabi_dadd+0x12e>
 8000cc6:	0020      	movs	r0, r4
 8000cc8:	f001 fd5a 	bl	8002780 <__clzsi2>
 8000ccc:	0001      	movs	r1, r0
 8000cce:	3118      	adds	r1, #24
 8000cd0:	291f      	cmp	r1, #31
 8000cd2:	dc00      	bgt.n	8000cd6 <__aeabi_dadd+0x2c2>
 8000cd4:	e6fc      	b.n	8000ad0 <__aeabi_dadd+0xbc>
 8000cd6:	3808      	subs	r0, #8
 8000cd8:	4084      	lsls	r4, r0
 8000cda:	0027      	movs	r7, r4
 8000cdc:	2400      	movs	r4, #0
 8000cde:	42b1      	cmp	r1, r6
 8000ce0:	db00      	blt.n	8000ce4 <__aeabi_dadd+0x2d0>
 8000ce2:	e6ff      	b.n	8000ae4 <__aeabi_dadd+0xd0>
 8000ce4:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <__aeabi_dadd+0x36c>)
 8000ce6:	1a76      	subs	r6, r6, r1
 8000ce8:	4017      	ands	r7, r2
 8000cea:	e70d      	b.n	8000b08 <__aeabi_dadd+0xf4>
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	d02f      	beq.n	8000d50 <__aeabi_dadd+0x33c>
 8000cf0:	464a      	mov	r2, r9
 8000cf2:	1b92      	subs	r2, r2, r6
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x2e8>
 8000cfa:	e0ad      	b.n	8000e58 <__aeabi_dadd+0x444>
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <__aeabi_dadd+0x368>)
 8000cfe:	4591      	cmp	r9, r2
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x2f0>
 8000d02:	e10f      	b.n	8000f24 <__aeabi_dadd+0x510>
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	0412      	lsls	r2, r2, #16
 8000d08:	4310      	orrs	r0, r2
 8000d0a:	4662      	mov	r2, ip
 8000d0c:	2a38      	cmp	r2, #56	; 0x38
 8000d0e:	dd00      	ble.n	8000d12 <__aeabi_dadd+0x2fe>
 8000d10:	e10f      	b.n	8000f32 <__aeabi_dadd+0x51e>
 8000d12:	2a1f      	cmp	r2, #31
 8000d14:	dd00      	ble.n	8000d18 <__aeabi_dadd+0x304>
 8000d16:	e180      	b.n	800101a <__aeabi_dadd+0x606>
 8000d18:	4664      	mov	r4, ip
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	001e      	movs	r6, r3
 8000d1e:	1b12      	subs	r2, r2, r4
 8000d20:	4667      	mov	r7, ip
 8000d22:	0004      	movs	r4, r0
 8000d24:	4093      	lsls	r3, r2
 8000d26:	4094      	lsls	r4, r2
 8000d28:	40fe      	lsrs	r6, r7
 8000d2a:	1e5a      	subs	r2, r3, #1
 8000d2c:	4193      	sbcs	r3, r2
 8000d2e:	40f8      	lsrs	r0, r7
 8000d30:	4334      	orrs	r4, r6
 8000d32:	431c      	orrs	r4, r3
 8000d34:	4480      	add	r8, r0
 8000d36:	1864      	adds	r4, r4, r1
 8000d38:	428c      	cmp	r4, r1
 8000d3a:	41bf      	sbcs	r7, r7
 8000d3c:	427f      	negs	r7, r7
 8000d3e:	464e      	mov	r6, r9
 8000d40:	4447      	add	r7, r8
 8000d42:	e7a6      	b.n	8000c92 <__aeabi_dadd+0x27e>
 8000d44:	4642      	mov	r2, r8
 8000d46:	430a      	orrs	r2, r1
 8000d48:	0011      	movs	r1, r2
 8000d4a:	1e4a      	subs	r2, r1, #1
 8000d4c:	4191      	sbcs	r1, r2
 8000d4e:	e6ad      	b.n	8000aac <__aeabi_dadd+0x98>
 8000d50:	4c0c      	ldr	r4, [pc, #48]	; (8000d84 <__aeabi_dadd+0x370>)
 8000d52:	1c72      	adds	r2, r6, #1
 8000d54:	4222      	tst	r2, r4
 8000d56:	d000      	beq.n	8000d5a <__aeabi_dadd+0x346>
 8000d58:	e0a1      	b.n	8000e9e <__aeabi_dadd+0x48a>
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d000      	beq.n	8000d64 <__aeabi_dadd+0x350>
 8000d62:	e0fa      	b.n	8000f5a <__aeabi_dadd+0x546>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dadd+0x356>
 8000d68:	e145      	b.n	8000ff6 <__aeabi_dadd+0x5e2>
 8000d6a:	003a      	movs	r2, r7
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	d000      	beq.n	8000d72 <__aeabi_dadd+0x35e>
 8000d70:	e146      	b.n	8001000 <__aeabi_dadd+0x5ec>
 8000d72:	0742      	lsls	r2, r0, #29
 8000d74:	08db      	lsrs	r3, r3, #3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	08c0      	lsrs	r0, r0, #3
 8000d7a:	e77b      	b.n	8000c74 <__aeabi_dadd+0x260>
 8000d7c:	000007ff 	.word	0x000007ff
 8000d80:	ff7fffff 	.word	0xff7fffff
 8000d84:	000007fe 	.word	0x000007fe
 8000d88:	4647      	mov	r7, r8
 8000d8a:	1a5c      	subs	r4, r3, r1
 8000d8c:	1bc2      	subs	r2, r0, r7
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	41bf      	sbcs	r7, r7
 8000d92:	427f      	negs	r7, r7
 8000d94:	46b9      	mov	r9, r7
 8000d96:	0017      	movs	r7, r2
 8000d98:	464a      	mov	r2, r9
 8000d9a:	1abf      	subs	r7, r7, r2
 8000d9c:	023a      	lsls	r2, r7, #8
 8000d9e:	d500      	bpl.n	8000da2 <__aeabi_dadd+0x38e>
 8000da0:	e08d      	b.n	8000ebe <__aeabi_dadd+0x4aa>
 8000da2:	0023      	movs	r3, r4
 8000da4:	433b      	orrs	r3, r7
 8000da6:	d000      	beq.n	8000daa <__aeabi_dadd+0x396>
 8000da8:	e68a      	b.n	8000ac0 <__aeabi_dadd+0xac>
 8000daa:	2000      	movs	r0, #0
 8000dac:	2500      	movs	r5, #0
 8000dae:	e761      	b.n	8000c74 <__aeabi_dadd+0x260>
 8000db0:	4cb4      	ldr	r4, [pc, #720]	; (8001084 <__aeabi_dadd+0x670>)
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	d100      	bne.n	8000db8 <__aeabi_dadd+0x3a4>
 8000db6:	e0ad      	b.n	8000f14 <__aeabi_dadd+0x500>
 8000db8:	2480      	movs	r4, #128	; 0x80
 8000dba:	0424      	lsls	r4, r4, #16
 8000dbc:	4320      	orrs	r0, r4
 8000dbe:	4664      	mov	r4, ip
 8000dc0:	2c38      	cmp	r4, #56	; 0x38
 8000dc2:	dc3d      	bgt.n	8000e40 <__aeabi_dadd+0x42c>
 8000dc4:	4662      	mov	r2, ip
 8000dc6:	2c1f      	cmp	r4, #31
 8000dc8:	dd00      	ble.n	8000dcc <__aeabi_dadd+0x3b8>
 8000dca:	e0b7      	b.n	8000f3c <__aeabi_dadd+0x528>
 8000dcc:	2520      	movs	r5, #32
 8000dce:	001e      	movs	r6, r3
 8000dd0:	1b2d      	subs	r5, r5, r4
 8000dd2:	0004      	movs	r4, r0
 8000dd4:	40ab      	lsls	r3, r5
 8000dd6:	40ac      	lsls	r4, r5
 8000dd8:	40d6      	lsrs	r6, r2
 8000dda:	40d0      	lsrs	r0, r2
 8000ddc:	4642      	mov	r2, r8
 8000dde:	1e5d      	subs	r5, r3, #1
 8000de0:	41ab      	sbcs	r3, r5
 8000de2:	4334      	orrs	r4, r6
 8000de4:	1a12      	subs	r2, r2, r0
 8000de6:	4690      	mov	r8, r2
 8000de8:	4323      	orrs	r3, r4
 8000dea:	e02c      	b.n	8000e46 <__aeabi_dadd+0x432>
 8000dec:	0742      	lsls	r2, r0, #29
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	08c0      	lsrs	r0, r0, #3
 8000df4:	e73b      	b.n	8000c6e <__aeabi_dadd+0x25a>
 8000df6:	185c      	adds	r4, r3, r1
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	419b      	sbcs	r3, r3
 8000dfc:	4440      	add	r0, r8
 8000dfe:	425b      	negs	r3, r3
 8000e00:	18c7      	adds	r7, r0, r3
 8000e02:	2601      	movs	r6, #1
 8000e04:	023b      	lsls	r3, r7, #8
 8000e06:	d400      	bmi.n	8000e0a <__aeabi_dadd+0x3f6>
 8000e08:	e729      	b.n	8000c5e <__aeabi_dadd+0x24a>
 8000e0a:	2602      	movs	r6, #2
 8000e0c:	4a9e      	ldr	r2, [pc, #632]	; (8001088 <__aeabi_dadd+0x674>)
 8000e0e:	0863      	lsrs	r3, r4, #1
 8000e10:	4017      	ands	r7, r2
 8000e12:	2201      	movs	r2, #1
 8000e14:	4014      	ands	r4, r2
 8000e16:	431c      	orrs	r4, r3
 8000e18:	07fb      	lsls	r3, r7, #31
 8000e1a:	431c      	orrs	r4, r3
 8000e1c:	087f      	lsrs	r7, r7, #1
 8000e1e:	e673      	b.n	8000b08 <__aeabi_dadd+0xf4>
 8000e20:	4644      	mov	r4, r8
 8000e22:	3a20      	subs	r2, #32
 8000e24:	40d4      	lsrs	r4, r2
 8000e26:	4662      	mov	r2, ip
 8000e28:	2a20      	cmp	r2, #32
 8000e2a:	d005      	beq.n	8000e38 <__aeabi_dadd+0x424>
 8000e2c:	4667      	mov	r7, ip
 8000e2e:	2240      	movs	r2, #64	; 0x40
 8000e30:	1bd2      	subs	r2, r2, r7
 8000e32:	4647      	mov	r7, r8
 8000e34:	4097      	lsls	r7, r2
 8000e36:	4339      	orrs	r1, r7
 8000e38:	1e4a      	subs	r2, r1, #1
 8000e3a:	4191      	sbcs	r1, r2
 8000e3c:	4321      	orrs	r1, r4
 8000e3e:	e635      	b.n	8000aac <__aeabi_dadd+0x98>
 8000e40:	4303      	orrs	r3, r0
 8000e42:	1e58      	subs	r0, r3, #1
 8000e44:	4183      	sbcs	r3, r0
 8000e46:	1acc      	subs	r4, r1, r3
 8000e48:	42a1      	cmp	r1, r4
 8000e4a:	41bf      	sbcs	r7, r7
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	427f      	negs	r7, r7
 8000e50:	4655      	mov	r5, sl
 8000e52:	464e      	mov	r6, r9
 8000e54:	1bdf      	subs	r7, r3, r7
 8000e56:	e62e      	b.n	8000ab6 <__aeabi_dadd+0xa2>
 8000e58:	0002      	movs	r2, r0
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dadd+0x44c>
 8000e5e:	e0bd      	b.n	8000fdc <__aeabi_dadd+0x5c8>
 8000e60:	4662      	mov	r2, ip
 8000e62:	4664      	mov	r4, ip
 8000e64:	3a01      	subs	r2, #1
 8000e66:	2c01      	cmp	r4, #1
 8000e68:	d100      	bne.n	8000e6c <__aeabi_dadd+0x458>
 8000e6a:	e0e5      	b.n	8001038 <__aeabi_dadd+0x624>
 8000e6c:	4c85      	ldr	r4, [pc, #532]	; (8001084 <__aeabi_dadd+0x670>)
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d058      	beq.n	8000f24 <__aeabi_dadd+0x510>
 8000e72:	4694      	mov	ip, r2
 8000e74:	e749      	b.n	8000d0a <__aeabi_dadd+0x2f6>
 8000e76:	4664      	mov	r4, ip
 8000e78:	2220      	movs	r2, #32
 8000e7a:	1b12      	subs	r2, r2, r4
 8000e7c:	4644      	mov	r4, r8
 8000e7e:	4094      	lsls	r4, r2
 8000e80:	000f      	movs	r7, r1
 8000e82:	46a1      	mov	r9, r4
 8000e84:	4664      	mov	r4, ip
 8000e86:	4091      	lsls	r1, r2
 8000e88:	40e7      	lsrs	r7, r4
 8000e8a:	464c      	mov	r4, r9
 8000e8c:	1e4a      	subs	r2, r1, #1
 8000e8e:	4191      	sbcs	r1, r2
 8000e90:	433c      	orrs	r4, r7
 8000e92:	4642      	mov	r2, r8
 8000e94:	430c      	orrs	r4, r1
 8000e96:	4661      	mov	r1, ip
 8000e98:	40ca      	lsrs	r2, r1
 8000e9a:	1880      	adds	r0, r0, r2
 8000e9c:	e6f4      	b.n	8000c88 <__aeabi_dadd+0x274>
 8000e9e:	4c79      	ldr	r4, [pc, #484]	; (8001084 <__aeabi_dadd+0x670>)
 8000ea0:	42a2      	cmp	r2, r4
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_dadd+0x492>
 8000ea4:	e6fd      	b.n	8000ca2 <__aeabi_dadd+0x28e>
 8000ea6:	1859      	adds	r1, r3, r1
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	419b      	sbcs	r3, r3
 8000eac:	4440      	add	r0, r8
 8000eae:	425f      	negs	r7, r3
 8000eb0:	19c7      	adds	r7, r0, r7
 8000eb2:	07fc      	lsls	r4, r7, #31
 8000eb4:	0849      	lsrs	r1, r1, #1
 8000eb6:	0016      	movs	r6, r2
 8000eb8:	430c      	orrs	r4, r1
 8000eba:	087f      	lsrs	r7, r7, #1
 8000ebc:	e6cf      	b.n	8000c5e <__aeabi_dadd+0x24a>
 8000ebe:	1acc      	subs	r4, r1, r3
 8000ec0:	42a1      	cmp	r1, r4
 8000ec2:	41bf      	sbcs	r7, r7
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	427f      	negs	r7, r7
 8000ec8:	1a18      	subs	r0, r3, r0
 8000eca:	4655      	mov	r5, sl
 8000ecc:	1bc7      	subs	r7, r0, r7
 8000ece:	e5f7      	b.n	8000ac0 <__aeabi_dadd+0xac>
 8000ed0:	08c9      	lsrs	r1, r1, #3
 8000ed2:	077b      	lsls	r3, r7, #29
 8000ed4:	4655      	mov	r5, sl
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	08f8      	lsrs	r0, r7, #3
 8000eda:	e6c8      	b.n	8000c6e <__aeabi_dadd+0x25a>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d000      	beq.n	8000ee2 <__aeabi_dadd+0x4ce>
 8000ee0:	e081      	b.n	8000fe6 <__aeabi_dadd+0x5d2>
 8000ee2:	4643      	mov	r3, r8
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	d115      	bne.n	8000f14 <__aeabi_dadd+0x500>
 8000ee8:	2080      	movs	r0, #128	; 0x80
 8000eea:	2500      	movs	r5, #0
 8000eec:	0300      	lsls	r0, r0, #12
 8000eee:	e6e3      	b.n	8000cb8 <__aeabi_dadd+0x2a4>
 8000ef0:	1a5c      	subs	r4, r3, r1
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	419b      	sbcs	r3, r3
 8000ef6:	1bc7      	subs	r7, r0, r7
 8000ef8:	425b      	negs	r3, r3
 8000efa:	2601      	movs	r6, #1
 8000efc:	1aff      	subs	r7, r7, r3
 8000efe:	e5da      	b.n	8000ab6 <__aeabi_dadd+0xa2>
 8000f00:	0742      	lsls	r2, r0, #29
 8000f02:	08db      	lsrs	r3, r3, #3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	08c0      	lsrs	r0, r0, #3
 8000f08:	e6d2      	b.n	8000cb0 <__aeabi_dadd+0x29c>
 8000f0a:	0742      	lsls	r2, r0, #29
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	08c0      	lsrs	r0, r0, #3
 8000f12:	e6ac      	b.n	8000c6e <__aeabi_dadd+0x25a>
 8000f14:	4643      	mov	r3, r8
 8000f16:	4642      	mov	r2, r8
 8000f18:	08c9      	lsrs	r1, r1, #3
 8000f1a:	075b      	lsls	r3, r3, #29
 8000f1c:	4655      	mov	r5, sl
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	08d0      	lsrs	r0, r2, #3
 8000f22:	e6c5      	b.n	8000cb0 <__aeabi_dadd+0x29c>
 8000f24:	4643      	mov	r3, r8
 8000f26:	4642      	mov	r2, r8
 8000f28:	075b      	lsls	r3, r3, #29
 8000f2a:	08c9      	lsrs	r1, r1, #3
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	08d0      	lsrs	r0, r2, #3
 8000f30:	e6be      	b.n	8000cb0 <__aeabi_dadd+0x29c>
 8000f32:	4303      	orrs	r3, r0
 8000f34:	001c      	movs	r4, r3
 8000f36:	1e63      	subs	r3, r4, #1
 8000f38:	419c      	sbcs	r4, r3
 8000f3a:	e6fc      	b.n	8000d36 <__aeabi_dadd+0x322>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	3c20      	subs	r4, #32
 8000f40:	40e2      	lsrs	r2, r4
 8000f42:	0014      	movs	r4, r2
 8000f44:	4662      	mov	r2, ip
 8000f46:	2a20      	cmp	r2, #32
 8000f48:	d003      	beq.n	8000f52 <__aeabi_dadd+0x53e>
 8000f4a:	2540      	movs	r5, #64	; 0x40
 8000f4c:	1aad      	subs	r5, r5, r2
 8000f4e:	40a8      	lsls	r0, r5
 8000f50:	4303      	orrs	r3, r0
 8000f52:	1e58      	subs	r0, r3, #1
 8000f54:	4183      	sbcs	r3, r0
 8000f56:	4323      	orrs	r3, r4
 8000f58:	e775      	b.n	8000e46 <__aeabi_dadd+0x432>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d0e2      	beq.n	8000f24 <__aeabi_dadd+0x510>
 8000f5e:	003a      	movs	r2, r7
 8000f60:	430a      	orrs	r2, r1
 8000f62:	d0cd      	beq.n	8000f00 <__aeabi_dadd+0x4ec>
 8000f64:	0742      	lsls	r2, r0, #29
 8000f66:	08db      	lsrs	r3, r3, #3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	08c0      	lsrs	r0, r0, #3
 8000f6e:	0312      	lsls	r2, r2, #12
 8000f70:	4210      	tst	r0, r2
 8000f72:	d006      	beq.n	8000f82 <__aeabi_dadd+0x56e>
 8000f74:	08fc      	lsrs	r4, r7, #3
 8000f76:	4214      	tst	r4, r2
 8000f78:	d103      	bne.n	8000f82 <__aeabi_dadd+0x56e>
 8000f7a:	0020      	movs	r0, r4
 8000f7c:	08cb      	lsrs	r3, r1, #3
 8000f7e:	077a      	lsls	r2, r7, #29
 8000f80:	4313      	orrs	r3, r2
 8000f82:	0f5a      	lsrs	r2, r3, #29
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	0752      	lsls	r2, r2, #29
 8000f88:	08db      	lsrs	r3, r3, #3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	e690      	b.n	8000cb0 <__aeabi_dadd+0x29c>
 8000f8e:	4643      	mov	r3, r8
 8000f90:	430b      	orrs	r3, r1
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x582>
 8000f94:	e709      	b.n	8000daa <__aeabi_dadd+0x396>
 8000f96:	4643      	mov	r3, r8
 8000f98:	4642      	mov	r2, r8
 8000f9a:	08c9      	lsrs	r1, r1, #3
 8000f9c:	075b      	lsls	r3, r3, #29
 8000f9e:	4655      	mov	r5, sl
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	08d0      	lsrs	r0, r2, #3
 8000fa4:	e666      	b.n	8000c74 <__aeabi_dadd+0x260>
 8000fa6:	1acc      	subs	r4, r1, r3
 8000fa8:	42a1      	cmp	r1, r4
 8000faa:	4189      	sbcs	r1, r1
 8000fac:	1a3f      	subs	r7, r7, r0
 8000fae:	4249      	negs	r1, r1
 8000fb0:	4655      	mov	r5, sl
 8000fb2:	2601      	movs	r6, #1
 8000fb4:	1a7f      	subs	r7, r7, r1
 8000fb6:	e57e      	b.n	8000ab6 <__aeabi_dadd+0xa2>
 8000fb8:	4642      	mov	r2, r8
 8000fba:	1a5c      	subs	r4, r3, r1
 8000fbc:	1a87      	subs	r7, r0, r2
 8000fbe:	42a3      	cmp	r3, r4
 8000fc0:	4192      	sbcs	r2, r2
 8000fc2:	4252      	negs	r2, r2
 8000fc4:	1abf      	subs	r7, r7, r2
 8000fc6:	023a      	lsls	r2, r7, #8
 8000fc8:	d53d      	bpl.n	8001046 <__aeabi_dadd+0x632>
 8000fca:	1acc      	subs	r4, r1, r3
 8000fcc:	42a1      	cmp	r1, r4
 8000fce:	4189      	sbcs	r1, r1
 8000fd0:	4643      	mov	r3, r8
 8000fd2:	4249      	negs	r1, r1
 8000fd4:	1a1f      	subs	r7, r3, r0
 8000fd6:	4655      	mov	r5, sl
 8000fd8:	1a7f      	subs	r7, r7, r1
 8000fda:	e595      	b.n	8000b08 <__aeabi_dadd+0xf4>
 8000fdc:	077b      	lsls	r3, r7, #29
 8000fde:	08c9      	lsrs	r1, r1, #3
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	08f8      	lsrs	r0, r7, #3
 8000fe4:	e643      	b.n	8000c6e <__aeabi_dadd+0x25a>
 8000fe6:	4644      	mov	r4, r8
 8000fe8:	08db      	lsrs	r3, r3, #3
 8000fea:	430c      	orrs	r4, r1
 8000fec:	d130      	bne.n	8001050 <__aeabi_dadd+0x63c>
 8000fee:	0742      	lsls	r2, r0, #29
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	08c0      	lsrs	r0, r0, #3
 8000ff4:	e65c      	b.n	8000cb0 <__aeabi_dadd+0x29c>
 8000ff6:	077b      	lsls	r3, r7, #29
 8000ff8:	08c9      	lsrs	r1, r1, #3
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	08f8      	lsrs	r0, r7, #3
 8000ffe:	e639      	b.n	8000c74 <__aeabi_dadd+0x260>
 8001000:	185c      	adds	r4, r3, r1
 8001002:	429c      	cmp	r4, r3
 8001004:	419b      	sbcs	r3, r3
 8001006:	4440      	add	r0, r8
 8001008:	425b      	negs	r3, r3
 800100a:	18c7      	adds	r7, r0, r3
 800100c:	023b      	lsls	r3, r7, #8
 800100e:	d400      	bmi.n	8001012 <__aeabi_dadd+0x5fe>
 8001010:	e625      	b.n	8000c5e <__aeabi_dadd+0x24a>
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <__aeabi_dadd+0x674>)
 8001014:	2601      	movs	r6, #1
 8001016:	401f      	ands	r7, r3
 8001018:	e621      	b.n	8000c5e <__aeabi_dadd+0x24a>
 800101a:	0004      	movs	r4, r0
 800101c:	3a20      	subs	r2, #32
 800101e:	40d4      	lsrs	r4, r2
 8001020:	4662      	mov	r2, ip
 8001022:	2a20      	cmp	r2, #32
 8001024:	d004      	beq.n	8001030 <__aeabi_dadd+0x61c>
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	4666      	mov	r6, ip
 800102a:	1b92      	subs	r2, r2, r6
 800102c:	4090      	lsls	r0, r2
 800102e:	4303      	orrs	r3, r0
 8001030:	1e5a      	subs	r2, r3, #1
 8001032:	4193      	sbcs	r3, r2
 8001034:	431c      	orrs	r4, r3
 8001036:	e67e      	b.n	8000d36 <__aeabi_dadd+0x322>
 8001038:	185c      	adds	r4, r3, r1
 800103a:	428c      	cmp	r4, r1
 800103c:	4189      	sbcs	r1, r1
 800103e:	4440      	add	r0, r8
 8001040:	4249      	negs	r1, r1
 8001042:	1847      	adds	r7, r0, r1
 8001044:	e6dd      	b.n	8000e02 <__aeabi_dadd+0x3ee>
 8001046:	0023      	movs	r3, r4
 8001048:	433b      	orrs	r3, r7
 800104a:	d100      	bne.n	800104e <__aeabi_dadd+0x63a>
 800104c:	e6ad      	b.n	8000daa <__aeabi_dadd+0x396>
 800104e:	e606      	b.n	8000c5e <__aeabi_dadd+0x24a>
 8001050:	0744      	lsls	r4, r0, #29
 8001052:	4323      	orrs	r3, r4
 8001054:	2480      	movs	r4, #128	; 0x80
 8001056:	08c0      	lsrs	r0, r0, #3
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	4220      	tst	r0, r4
 800105c:	d008      	beq.n	8001070 <__aeabi_dadd+0x65c>
 800105e:	4642      	mov	r2, r8
 8001060:	08d6      	lsrs	r6, r2, #3
 8001062:	4226      	tst	r6, r4
 8001064:	d104      	bne.n	8001070 <__aeabi_dadd+0x65c>
 8001066:	4655      	mov	r5, sl
 8001068:	0030      	movs	r0, r6
 800106a:	08cb      	lsrs	r3, r1, #3
 800106c:	0751      	lsls	r1, r2, #29
 800106e:	430b      	orrs	r3, r1
 8001070:	0f5a      	lsrs	r2, r3, #29
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	08db      	lsrs	r3, r3, #3
 8001076:	0752      	lsls	r2, r2, #29
 8001078:	4313      	orrs	r3, r2
 800107a:	e619      	b.n	8000cb0 <__aeabi_dadd+0x29c>
 800107c:	2300      	movs	r3, #0
 800107e:	4a01      	ldr	r2, [pc, #4]	; (8001084 <__aeabi_dadd+0x670>)
 8001080:	001f      	movs	r7, r3
 8001082:	e55e      	b.n	8000b42 <__aeabi_dadd+0x12e>
 8001084:	000007ff 	.word	0x000007ff
 8001088:	ff7fffff 	.word	0xff7fffff

0800108c <__aeabi_ddiv>:
 800108c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108e:	4657      	mov	r7, sl
 8001090:	464e      	mov	r6, r9
 8001092:	4645      	mov	r5, r8
 8001094:	46de      	mov	lr, fp
 8001096:	b5e0      	push	{r5, r6, r7, lr}
 8001098:	4681      	mov	r9, r0
 800109a:	0005      	movs	r5, r0
 800109c:	030c      	lsls	r4, r1, #12
 800109e:	0048      	lsls	r0, r1, #1
 80010a0:	4692      	mov	sl, r2
 80010a2:	001f      	movs	r7, r3
 80010a4:	b085      	sub	sp, #20
 80010a6:	0b24      	lsrs	r4, r4, #12
 80010a8:	0d40      	lsrs	r0, r0, #21
 80010aa:	0fce      	lsrs	r6, r1, #31
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_ddiv+0x26>
 80010b0:	e156      	b.n	8001360 <__aeabi_ddiv+0x2d4>
 80010b2:	4bd4      	ldr	r3, [pc, #848]	; (8001404 <__aeabi_ddiv+0x378>)
 80010b4:	4298      	cmp	r0, r3
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0x2e>
 80010b8:	e172      	b.n	80013a0 <__aeabi_ddiv+0x314>
 80010ba:	0f6b      	lsrs	r3, r5, #29
 80010bc:	00e4      	lsls	r4, r4, #3
 80010be:	431c      	orrs	r4, r3
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	041b      	lsls	r3, r3, #16
 80010c4:	4323      	orrs	r3, r4
 80010c6:	4698      	mov	r8, r3
 80010c8:	4bcf      	ldr	r3, [pc, #828]	; (8001408 <__aeabi_ddiv+0x37c>)
 80010ca:	00ed      	lsls	r5, r5, #3
 80010cc:	469b      	mov	fp, r3
 80010ce:	2300      	movs	r3, #0
 80010d0:	4699      	mov	r9, r3
 80010d2:	4483      	add	fp, r0
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	033c      	lsls	r4, r7, #12
 80010d8:	007b      	lsls	r3, r7, #1
 80010da:	4650      	mov	r0, sl
 80010dc:	0b24      	lsrs	r4, r4, #12
 80010de:	0d5b      	lsrs	r3, r3, #21
 80010e0:	0fff      	lsrs	r7, r7, #31
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_ddiv+0x5c>
 80010e6:	e11f      	b.n	8001328 <__aeabi_ddiv+0x29c>
 80010e8:	4ac6      	ldr	r2, [pc, #792]	; (8001404 <__aeabi_ddiv+0x378>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d100      	bne.n	80010f0 <__aeabi_ddiv+0x64>
 80010ee:	e162      	b.n	80013b6 <__aeabi_ddiv+0x32a>
 80010f0:	49c5      	ldr	r1, [pc, #788]	; (8001408 <__aeabi_ddiv+0x37c>)
 80010f2:	0f42      	lsrs	r2, r0, #29
 80010f4:	468c      	mov	ip, r1
 80010f6:	00e4      	lsls	r4, r4, #3
 80010f8:	4659      	mov	r1, fp
 80010fa:	4314      	orrs	r4, r2
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	4463      	add	r3, ip
 8001100:	0412      	lsls	r2, r2, #16
 8001102:	1acb      	subs	r3, r1, r3
 8001104:	4314      	orrs	r4, r2
 8001106:	469b      	mov	fp, r3
 8001108:	00c2      	lsls	r2, r0, #3
 800110a:	2000      	movs	r0, #0
 800110c:	0033      	movs	r3, r6
 800110e:	407b      	eors	r3, r7
 8001110:	469a      	mov	sl, r3
 8001112:	464b      	mov	r3, r9
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d827      	bhi.n	8001168 <__aeabi_ddiv+0xdc>
 8001118:	49bc      	ldr	r1, [pc, #752]	; (800140c <__aeabi_ddiv+0x380>)
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	58cb      	ldr	r3, [r1, r3]
 800111e:	469f      	mov	pc, r3
 8001120:	46b2      	mov	sl, r6
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d016      	beq.n	8001156 <__aeabi_ddiv+0xca>
 8001128:	2b03      	cmp	r3, #3
 800112a:	d100      	bne.n	800112e <__aeabi_ddiv+0xa2>
 800112c:	e28e      	b.n	800164c <__aeabi_ddiv+0x5c0>
 800112e:	2b01      	cmp	r3, #1
 8001130:	d000      	beq.n	8001134 <__aeabi_ddiv+0xa8>
 8001132:	e0d9      	b.n	80012e8 <__aeabi_ddiv+0x25c>
 8001134:	2300      	movs	r3, #0
 8001136:	2400      	movs	r4, #0
 8001138:	2500      	movs	r5, #0
 800113a:	4652      	mov	r2, sl
 800113c:	051b      	lsls	r3, r3, #20
 800113e:	4323      	orrs	r3, r4
 8001140:	07d2      	lsls	r2, r2, #31
 8001142:	4313      	orrs	r3, r2
 8001144:	0028      	movs	r0, r5
 8001146:	0019      	movs	r1, r3
 8001148:	b005      	add	sp, #20
 800114a:	bcf0      	pop	{r4, r5, r6, r7}
 800114c:	46bb      	mov	fp, r7
 800114e:	46b2      	mov	sl, r6
 8001150:	46a9      	mov	r9, r5
 8001152:	46a0      	mov	r8, r4
 8001154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001156:	2400      	movs	r4, #0
 8001158:	2500      	movs	r5, #0
 800115a:	4baa      	ldr	r3, [pc, #680]	; (8001404 <__aeabi_ddiv+0x378>)
 800115c:	e7ed      	b.n	800113a <__aeabi_ddiv+0xae>
 800115e:	46ba      	mov	sl, r7
 8001160:	46a0      	mov	r8, r4
 8001162:	0015      	movs	r5, r2
 8001164:	9000      	str	r0, [sp, #0]
 8001166:	e7dc      	b.n	8001122 <__aeabi_ddiv+0x96>
 8001168:	4544      	cmp	r4, r8
 800116a:	d200      	bcs.n	800116e <__aeabi_ddiv+0xe2>
 800116c:	e1c7      	b.n	80014fe <__aeabi_ddiv+0x472>
 800116e:	d100      	bne.n	8001172 <__aeabi_ddiv+0xe6>
 8001170:	e1c2      	b.n	80014f8 <__aeabi_ddiv+0x46c>
 8001172:	2301      	movs	r3, #1
 8001174:	425b      	negs	r3, r3
 8001176:	469c      	mov	ip, r3
 8001178:	002e      	movs	r6, r5
 800117a:	4640      	mov	r0, r8
 800117c:	2500      	movs	r5, #0
 800117e:	44e3      	add	fp, ip
 8001180:	0223      	lsls	r3, r4, #8
 8001182:	0e14      	lsrs	r4, r2, #24
 8001184:	431c      	orrs	r4, r3
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	4699      	mov	r9, r3
 800118a:	0423      	lsls	r3, r4, #16
 800118c:	0c1f      	lsrs	r7, r3, #16
 800118e:	0212      	lsls	r2, r2, #8
 8001190:	4649      	mov	r1, r9
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	9701      	str	r7, [sp, #4]
 8001196:	f7ff f859 	bl	800024c <__aeabi_uidivmod>
 800119a:	0002      	movs	r2, r0
 800119c:	437a      	muls	r2, r7
 800119e:	040b      	lsls	r3, r1, #16
 80011a0:	0c31      	lsrs	r1, r6, #16
 80011a2:	4680      	mov	r8, r0
 80011a4:	4319      	orrs	r1, r3
 80011a6:	428a      	cmp	r2, r1
 80011a8:	d907      	bls.n	80011ba <__aeabi_ddiv+0x12e>
 80011aa:	2301      	movs	r3, #1
 80011ac:	425b      	negs	r3, r3
 80011ae:	469c      	mov	ip, r3
 80011b0:	1909      	adds	r1, r1, r4
 80011b2:	44e0      	add	r8, ip
 80011b4:	428c      	cmp	r4, r1
 80011b6:	d800      	bhi.n	80011ba <__aeabi_ddiv+0x12e>
 80011b8:	e207      	b.n	80015ca <__aeabi_ddiv+0x53e>
 80011ba:	1a88      	subs	r0, r1, r2
 80011bc:	4649      	mov	r1, r9
 80011be:	f7ff f845 	bl	800024c <__aeabi_uidivmod>
 80011c2:	0409      	lsls	r1, r1, #16
 80011c4:	468c      	mov	ip, r1
 80011c6:	0431      	lsls	r1, r6, #16
 80011c8:	4666      	mov	r6, ip
 80011ca:	9a01      	ldr	r2, [sp, #4]
 80011cc:	0c09      	lsrs	r1, r1, #16
 80011ce:	4342      	muls	r2, r0
 80011d0:	0003      	movs	r3, r0
 80011d2:	4331      	orrs	r1, r6
 80011d4:	428a      	cmp	r2, r1
 80011d6:	d904      	bls.n	80011e2 <__aeabi_ddiv+0x156>
 80011d8:	1909      	adds	r1, r1, r4
 80011da:	3b01      	subs	r3, #1
 80011dc:	428c      	cmp	r4, r1
 80011de:	d800      	bhi.n	80011e2 <__aeabi_ddiv+0x156>
 80011e0:	e1ed      	b.n	80015be <__aeabi_ddiv+0x532>
 80011e2:	1a88      	subs	r0, r1, r2
 80011e4:	4642      	mov	r2, r8
 80011e6:	0412      	lsls	r2, r2, #16
 80011e8:	431a      	orrs	r2, r3
 80011ea:	4690      	mov	r8, r2
 80011ec:	4641      	mov	r1, r8
 80011ee:	9b00      	ldr	r3, [sp, #0]
 80011f0:	040e      	lsls	r6, r1, #16
 80011f2:	0c1b      	lsrs	r3, r3, #16
 80011f4:	001f      	movs	r7, r3
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	9b00      	ldr	r3, [sp, #0]
 80011fa:	0c36      	lsrs	r6, r6, #16
 80011fc:	041b      	lsls	r3, r3, #16
 80011fe:	0c19      	lsrs	r1, r3, #16
 8001200:	000b      	movs	r3, r1
 8001202:	4373      	muls	r3, r6
 8001204:	0c12      	lsrs	r2, r2, #16
 8001206:	437e      	muls	r6, r7
 8001208:	9103      	str	r1, [sp, #12]
 800120a:	4351      	muls	r1, r2
 800120c:	437a      	muls	r2, r7
 800120e:	0c1f      	lsrs	r7, r3, #16
 8001210:	46bc      	mov	ip, r7
 8001212:	1876      	adds	r6, r6, r1
 8001214:	4466      	add	r6, ip
 8001216:	42b1      	cmp	r1, r6
 8001218:	d903      	bls.n	8001222 <__aeabi_ddiv+0x196>
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	0249      	lsls	r1, r1, #9
 800121e:	468c      	mov	ip, r1
 8001220:	4462      	add	r2, ip
 8001222:	0c31      	lsrs	r1, r6, #16
 8001224:	188a      	adds	r2, r1, r2
 8001226:	0431      	lsls	r1, r6, #16
 8001228:	041e      	lsls	r6, r3, #16
 800122a:	0c36      	lsrs	r6, r6, #16
 800122c:	198e      	adds	r6, r1, r6
 800122e:	4290      	cmp	r0, r2
 8001230:	d302      	bcc.n	8001238 <__aeabi_ddiv+0x1ac>
 8001232:	d112      	bne.n	800125a <__aeabi_ddiv+0x1ce>
 8001234:	42b5      	cmp	r5, r6
 8001236:	d210      	bcs.n	800125a <__aeabi_ddiv+0x1ce>
 8001238:	4643      	mov	r3, r8
 800123a:	1e59      	subs	r1, r3, #1
 800123c:	9b00      	ldr	r3, [sp, #0]
 800123e:	469c      	mov	ip, r3
 8001240:	4465      	add	r5, ip
 8001242:	001f      	movs	r7, r3
 8001244:	429d      	cmp	r5, r3
 8001246:	419b      	sbcs	r3, r3
 8001248:	425b      	negs	r3, r3
 800124a:	191b      	adds	r3, r3, r4
 800124c:	18c0      	adds	r0, r0, r3
 800124e:	4284      	cmp	r4, r0
 8001250:	d200      	bcs.n	8001254 <__aeabi_ddiv+0x1c8>
 8001252:	e1a0      	b.n	8001596 <__aeabi_ddiv+0x50a>
 8001254:	d100      	bne.n	8001258 <__aeabi_ddiv+0x1cc>
 8001256:	e19b      	b.n	8001590 <__aeabi_ddiv+0x504>
 8001258:	4688      	mov	r8, r1
 800125a:	1bae      	subs	r6, r5, r6
 800125c:	42b5      	cmp	r5, r6
 800125e:	41ad      	sbcs	r5, r5
 8001260:	1a80      	subs	r0, r0, r2
 8001262:	426d      	negs	r5, r5
 8001264:	1b40      	subs	r0, r0, r5
 8001266:	4284      	cmp	r4, r0
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x1e0>
 800126a:	e1d5      	b.n	8001618 <__aeabi_ddiv+0x58c>
 800126c:	4649      	mov	r1, r9
 800126e:	f7fe ffed 	bl	800024c <__aeabi_uidivmod>
 8001272:	9a01      	ldr	r2, [sp, #4]
 8001274:	040b      	lsls	r3, r1, #16
 8001276:	4342      	muls	r2, r0
 8001278:	0c31      	lsrs	r1, r6, #16
 800127a:	0005      	movs	r5, r0
 800127c:	4319      	orrs	r1, r3
 800127e:	428a      	cmp	r2, r1
 8001280:	d900      	bls.n	8001284 <__aeabi_ddiv+0x1f8>
 8001282:	e16c      	b.n	800155e <__aeabi_ddiv+0x4d2>
 8001284:	1a88      	subs	r0, r1, r2
 8001286:	4649      	mov	r1, r9
 8001288:	f7fe ffe0 	bl	800024c <__aeabi_uidivmod>
 800128c:	9a01      	ldr	r2, [sp, #4]
 800128e:	0436      	lsls	r6, r6, #16
 8001290:	4342      	muls	r2, r0
 8001292:	0409      	lsls	r1, r1, #16
 8001294:	0c36      	lsrs	r6, r6, #16
 8001296:	0003      	movs	r3, r0
 8001298:	430e      	orrs	r6, r1
 800129a:	42b2      	cmp	r2, r6
 800129c:	d900      	bls.n	80012a0 <__aeabi_ddiv+0x214>
 800129e:	e153      	b.n	8001548 <__aeabi_ddiv+0x4bc>
 80012a0:	9803      	ldr	r0, [sp, #12]
 80012a2:	1ab6      	subs	r6, r6, r2
 80012a4:	0002      	movs	r2, r0
 80012a6:	042d      	lsls	r5, r5, #16
 80012a8:	431d      	orrs	r5, r3
 80012aa:	9f02      	ldr	r7, [sp, #8]
 80012ac:	042b      	lsls	r3, r5, #16
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	435a      	muls	r2, r3
 80012b2:	437b      	muls	r3, r7
 80012b4:	469c      	mov	ip, r3
 80012b6:	0c29      	lsrs	r1, r5, #16
 80012b8:	4348      	muls	r0, r1
 80012ba:	0c13      	lsrs	r3, r2, #16
 80012bc:	4484      	add	ip, r0
 80012be:	4463      	add	r3, ip
 80012c0:	4379      	muls	r1, r7
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d903      	bls.n	80012ce <__aeabi_ddiv+0x242>
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0240      	lsls	r0, r0, #9
 80012ca:	4684      	mov	ip, r0
 80012cc:	4461      	add	r1, ip
 80012ce:	0c18      	lsrs	r0, r3, #16
 80012d0:	0412      	lsls	r2, r2, #16
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	0c12      	lsrs	r2, r2, #16
 80012d6:	1841      	adds	r1, r0, r1
 80012d8:	189b      	adds	r3, r3, r2
 80012da:	428e      	cmp	r6, r1
 80012dc:	d200      	bcs.n	80012e0 <__aeabi_ddiv+0x254>
 80012de:	e0ff      	b.n	80014e0 <__aeabi_ddiv+0x454>
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0x258>
 80012e2:	e0fa      	b.n	80014da <__aeabi_ddiv+0x44e>
 80012e4:	2301      	movs	r3, #1
 80012e6:	431d      	orrs	r5, r3
 80012e8:	4a49      	ldr	r2, [pc, #292]	; (8001410 <__aeabi_ddiv+0x384>)
 80012ea:	445a      	add	r2, fp
 80012ec:	2a00      	cmp	r2, #0
 80012ee:	dc00      	bgt.n	80012f2 <__aeabi_ddiv+0x266>
 80012f0:	e0aa      	b.n	8001448 <__aeabi_ddiv+0x3bc>
 80012f2:	076b      	lsls	r3, r5, #29
 80012f4:	d000      	beq.n	80012f8 <__aeabi_ddiv+0x26c>
 80012f6:	e13d      	b.n	8001574 <__aeabi_ddiv+0x4e8>
 80012f8:	08ed      	lsrs	r5, r5, #3
 80012fa:	4643      	mov	r3, r8
 80012fc:	01db      	lsls	r3, r3, #7
 80012fe:	d506      	bpl.n	800130e <__aeabi_ddiv+0x282>
 8001300:	4642      	mov	r2, r8
 8001302:	4b44      	ldr	r3, [pc, #272]	; (8001414 <__aeabi_ddiv+0x388>)
 8001304:	401a      	ands	r2, r3
 8001306:	4690      	mov	r8, r2
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	00d2      	lsls	r2, r2, #3
 800130c:	445a      	add	r2, fp
 800130e:	4b42      	ldr	r3, [pc, #264]	; (8001418 <__aeabi_ddiv+0x38c>)
 8001310:	429a      	cmp	r2, r3
 8001312:	dd00      	ble.n	8001316 <__aeabi_ddiv+0x28a>
 8001314:	e71f      	b.n	8001156 <__aeabi_ddiv+0xca>
 8001316:	4643      	mov	r3, r8
 8001318:	075b      	lsls	r3, r3, #29
 800131a:	431d      	orrs	r5, r3
 800131c:	4643      	mov	r3, r8
 800131e:	0552      	lsls	r2, r2, #21
 8001320:	025c      	lsls	r4, r3, #9
 8001322:	0b24      	lsrs	r4, r4, #12
 8001324:	0d53      	lsrs	r3, r2, #21
 8001326:	e708      	b.n	800113a <__aeabi_ddiv+0xae>
 8001328:	4652      	mov	r2, sl
 800132a:	4322      	orrs	r2, r4
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x2a4>
 800132e:	e07b      	b.n	8001428 <__aeabi_ddiv+0x39c>
 8001330:	2c00      	cmp	r4, #0
 8001332:	d100      	bne.n	8001336 <__aeabi_ddiv+0x2aa>
 8001334:	e0fa      	b.n	800152c <__aeabi_ddiv+0x4a0>
 8001336:	0020      	movs	r0, r4
 8001338:	f001 fa22 	bl	8002780 <__clzsi2>
 800133c:	0002      	movs	r2, r0
 800133e:	3a0b      	subs	r2, #11
 8001340:	231d      	movs	r3, #29
 8001342:	0001      	movs	r1, r0
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	4652      	mov	r2, sl
 8001348:	3908      	subs	r1, #8
 800134a:	40da      	lsrs	r2, r3
 800134c:	408c      	lsls	r4, r1
 800134e:	4314      	orrs	r4, r2
 8001350:	4652      	mov	r2, sl
 8001352:	408a      	lsls	r2, r1
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <__aeabi_ddiv+0x390>)
 8001356:	4458      	add	r0, fp
 8001358:	469b      	mov	fp, r3
 800135a:	4483      	add	fp, r0
 800135c:	2000      	movs	r0, #0
 800135e:	e6d5      	b.n	800110c <__aeabi_ddiv+0x80>
 8001360:	464b      	mov	r3, r9
 8001362:	4323      	orrs	r3, r4
 8001364:	4698      	mov	r8, r3
 8001366:	d044      	beq.n	80013f2 <__aeabi_ddiv+0x366>
 8001368:	2c00      	cmp	r4, #0
 800136a:	d100      	bne.n	800136e <__aeabi_ddiv+0x2e2>
 800136c:	e0ce      	b.n	800150c <__aeabi_ddiv+0x480>
 800136e:	0020      	movs	r0, r4
 8001370:	f001 fa06 	bl	8002780 <__clzsi2>
 8001374:	0001      	movs	r1, r0
 8001376:	0002      	movs	r2, r0
 8001378:	390b      	subs	r1, #11
 800137a:	231d      	movs	r3, #29
 800137c:	1a5b      	subs	r3, r3, r1
 800137e:	4649      	mov	r1, r9
 8001380:	0010      	movs	r0, r2
 8001382:	40d9      	lsrs	r1, r3
 8001384:	3808      	subs	r0, #8
 8001386:	4084      	lsls	r4, r0
 8001388:	000b      	movs	r3, r1
 800138a:	464d      	mov	r5, r9
 800138c:	4323      	orrs	r3, r4
 800138e:	4698      	mov	r8, r3
 8001390:	4085      	lsls	r5, r0
 8001392:	4823      	ldr	r0, [pc, #140]	; (8001420 <__aeabi_ddiv+0x394>)
 8001394:	1a83      	subs	r3, r0, r2
 8001396:	469b      	mov	fp, r3
 8001398:	2300      	movs	r3, #0
 800139a:	4699      	mov	r9, r3
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	e69a      	b.n	80010d6 <__aeabi_ddiv+0x4a>
 80013a0:	464b      	mov	r3, r9
 80013a2:	4323      	orrs	r3, r4
 80013a4:	4698      	mov	r8, r3
 80013a6:	d11d      	bne.n	80013e4 <__aeabi_ddiv+0x358>
 80013a8:	2308      	movs	r3, #8
 80013aa:	4699      	mov	r9, r3
 80013ac:	3b06      	subs	r3, #6
 80013ae:	2500      	movs	r5, #0
 80013b0:	4683      	mov	fp, r0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	e68f      	b.n	80010d6 <__aeabi_ddiv+0x4a>
 80013b6:	4652      	mov	r2, sl
 80013b8:	4322      	orrs	r2, r4
 80013ba:	d109      	bne.n	80013d0 <__aeabi_ddiv+0x344>
 80013bc:	2302      	movs	r3, #2
 80013be:	4649      	mov	r1, r9
 80013c0:	4319      	orrs	r1, r3
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <__aeabi_ddiv+0x398>)
 80013c4:	4689      	mov	r9, r1
 80013c6:	469c      	mov	ip, r3
 80013c8:	2400      	movs	r4, #0
 80013ca:	2002      	movs	r0, #2
 80013cc:	44e3      	add	fp, ip
 80013ce:	e69d      	b.n	800110c <__aeabi_ddiv+0x80>
 80013d0:	2303      	movs	r3, #3
 80013d2:	464a      	mov	r2, r9
 80013d4:	431a      	orrs	r2, r3
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <__aeabi_ddiv+0x398>)
 80013d8:	4691      	mov	r9, r2
 80013da:	469c      	mov	ip, r3
 80013dc:	4652      	mov	r2, sl
 80013de:	2003      	movs	r0, #3
 80013e0:	44e3      	add	fp, ip
 80013e2:	e693      	b.n	800110c <__aeabi_ddiv+0x80>
 80013e4:	230c      	movs	r3, #12
 80013e6:	4699      	mov	r9, r3
 80013e8:	3b09      	subs	r3, #9
 80013ea:	46a0      	mov	r8, r4
 80013ec:	4683      	mov	fp, r0
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	e671      	b.n	80010d6 <__aeabi_ddiv+0x4a>
 80013f2:	2304      	movs	r3, #4
 80013f4:	4699      	mov	r9, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	469b      	mov	fp, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	2500      	movs	r5, #0
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	e669      	b.n	80010d6 <__aeabi_ddiv+0x4a>
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	000007ff 	.word	0x000007ff
 8001408:	fffffc01 	.word	0xfffffc01
 800140c:	08009f90 	.word	0x08009f90
 8001410:	000003ff 	.word	0x000003ff
 8001414:	feffffff 	.word	0xfeffffff
 8001418:	000007fe 	.word	0x000007fe
 800141c:	000003f3 	.word	0x000003f3
 8001420:	fffffc0d 	.word	0xfffffc0d
 8001424:	fffff801 	.word	0xfffff801
 8001428:	4649      	mov	r1, r9
 800142a:	2301      	movs	r3, #1
 800142c:	4319      	orrs	r1, r3
 800142e:	4689      	mov	r9, r1
 8001430:	2400      	movs	r4, #0
 8001432:	2001      	movs	r0, #1
 8001434:	e66a      	b.n	800110c <__aeabi_ddiv+0x80>
 8001436:	2300      	movs	r3, #0
 8001438:	2480      	movs	r4, #128	; 0x80
 800143a:	469a      	mov	sl, r3
 800143c:	2500      	movs	r5, #0
 800143e:	4b8a      	ldr	r3, [pc, #552]	; (8001668 <__aeabi_ddiv+0x5dc>)
 8001440:	0324      	lsls	r4, r4, #12
 8001442:	e67a      	b.n	800113a <__aeabi_ddiv+0xae>
 8001444:	2501      	movs	r5, #1
 8001446:	426d      	negs	r5, r5
 8001448:	2301      	movs	r3, #1
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	2b38      	cmp	r3, #56	; 0x38
 800144e:	dd00      	ble.n	8001452 <__aeabi_ddiv+0x3c6>
 8001450:	e670      	b.n	8001134 <__aeabi_ddiv+0xa8>
 8001452:	2b1f      	cmp	r3, #31
 8001454:	dc00      	bgt.n	8001458 <__aeabi_ddiv+0x3cc>
 8001456:	e0bf      	b.n	80015d8 <__aeabi_ddiv+0x54c>
 8001458:	211f      	movs	r1, #31
 800145a:	4249      	negs	r1, r1
 800145c:	1a8a      	subs	r2, r1, r2
 800145e:	4641      	mov	r1, r8
 8001460:	40d1      	lsrs	r1, r2
 8001462:	000a      	movs	r2, r1
 8001464:	2b20      	cmp	r3, #32
 8001466:	d004      	beq.n	8001472 <__aeabi_ddiv+0x3e6>
 8001468:	4641      	mov	r1, r8
 800146a:	4b80      	ldr	r3, [pc, #512]	; (800166c <__aeabi_ddiv+0x5e0>)
 800146c:	445b      	add	r3, fp
 800146e:	4099      	lsls	r1, r3
 8001470:	430d      	orrs	r5, r1
 8001472:	1e6b      	subs	r3, r5, #1
 8001474:	419d      	sbcs	r5, r3
 8001476:	2307      	movs	r3, #7
 8001478:	432a      	orrs	r2, r5
 800147a:	001d      	movs	r5, r3
 800147c:	2400      	movs	r4, #0
 800147e:	4015      	ands	r5, r2
 8001480:	4213      	tst	r3, r2
 8001482:	d100      	bne.n	8001486 <__aeabi_ddiv+0x3fa>
 8001484:	e0d4      	b.n	8001630 <__aeabi_ddiv+0x5a4>
 8001486:	210f      	movs	r1, #15
 8001488:	2300      	movs	r3, #0
 800148a:	4011      	ands	r1, r2
 800148c:	2904      	cmp	r1, #4
 800148e:	d100      	bne.n	8001492 <__aeabi_ddiv+0x406>
 8001490:	e0cb      	b.n	800162a <__aeabi_ddiv+0x59e>
 8001492:	1d11      	adds	r1, r2, #4
 8001494:	4291      	cmp	r1, r2
 8001496:	4192      	sbcs	r2, r2
 8001498:	4252      	negs	r2, r2
 800149a:	189b      	adds	r3, r3, r2
 800149c:	000a      	movs	r2, r1
 800149e:	0219      	lsls	r1, r3, #8
 80014a0:	d400      	bmi.n	80014a4 <__aeabi_ddiv+0x418>
 80014a2:	e0c2      	b.n	800162a <__aeabi_ddiv+0x59e>
 80014a4:	2301      	movs	r3, #1
 80014a6:	2400      	movs	r4, #0
 80014a8:	2500      	movs	r5, #0
 80014aa:	e646      	b.n	800113a <__aeabi_ddiv+0xae>
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	4641      	mov	r1, r8
 80014b0:	031b      	lsls	r3, r3, #12
 80014b2:	4219      	tst	r1, r3
 80014b4:	d008      	beq.n	80014c8 <__aeabi_ddiv+0x43c>
 80014b6:	421c      	tst	r4, r3
 80014b8:	d106      	bne.n	80014c8 <__aeabi_ddiv+0x43c>
 80014ba:	431c      	orrs	r4, r3
 80014bc:	0324      	lsls	r4, r4, #12
 80014be:	46ba      	mov	sl, r7
 80014c0:	0015      	movs	r5, r2
 80014c2:	4b69      	ldr	r3, [pc, #420]	; (8001668 <__aeabi_ddiv+0x5dc>)
 80014c4:	0b24      	lsrs	r4, r4, #12
 80014c6:	e638      	b.n	800113a <__aeabi_ddiv+0xae>
 80014c8:	2480      	movs	r4, #128	; 0x80
 80014ca:	4643      	mov	r3, r8
 80014cc:	0324      	lsls	r4, r4, #12
 80014ce:	431c      	orrs	r4, r3
 80014d0:	0324      	lsls	r4, r4, #12
 80014d2:	46b2      	mov	sl, r6
 80014d4:	4b64      	ldr	r3, [pc, #400]	; (8001668 <__aeabi_ddiv+0x5dc>)
 80014d6:	0b24      	lsrs	r4, r4, #12
 80014d8:	e62f      	b.n	800113a <__aeabi_ddiv+0xae>
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_ddiv+0x454>
 80014de:	e703      	b.n	80012e8 <__aeabi_ddiv+0x25c>
 80014e0:	19a6      	adds	r6, r4, r6
 80014e2:	1e68      	subs	r0, r5, #1
 80014e4:	42a6      	cmp	r6, r4
 80014e6:	d200      	bcs.n	80014ea <__aeabi_ddiv+0x45e>
 80014e8:	e08d      	b.n	8001606 <__aeabi_ddiv+0x57a>
 80014ea:	428e      	cmp	r6, r1
 80014ec:	d200      	bcs.n	80014f0 <__aeabi_ddiv+0x464>
 80014ee:	e0a3      	b.n	8001638 <__aeabi_ddiv+0x5ac>
 80014f0:	d100      	bne.n	80014f4 <__aeabi_ddiv+0x468>
 80014f2:	e0b3      	b.n	800165c <__aeabi_ddiv+0x5d0>
 80014f4:	0005      	movs	r5, r0
 80014f6:	e6f5      	b.n	80012e4 <__aeabi_ddiv+0x258>
 80014f8:	42aa      	cmp	r2, r5
 80014fa:	d900      	bls.n	80014fe <__aeabi_ddiv+0x472>
 80014fc:	e639      	b.n	8001172 <__aeabi_ddiv+0xe6>
 80014fe:	4643      	mov	r3, r8
 8001500:	07de      	lsls	r6, r3, #31
 8001502:	0858      	lsrs	r0, r3, #1
 8001504:	086b      	lsrs	r3, r5, #1
 8001506:	431e      	orrs	r6, r3
 8001508:	07ed      	lsls	r5, r5, #31
 800150a:	e639      	b.n	8001180 <__aeabi_ddiv+0xf4>
 800150c:	4648      	mov	r0, r9
 800150e:	f001 f937 	bl	8002780 <__clzsi2>
 8001512:	0001      	movs	r1, r0
 8001514:	0002      	movs	r2, r0
 8001516:	3115      	adds	r1, #21
 8001518:	3220      	adds	r2, #32
 800151a:	291c      	cmp	r1, #28
 800151c:	dc00      	bgt.n	8001520 <__aeabi_ddiv+0x494>
 800151e:	e72c      	b.n	800137a <__aeabi_ddiv+0x2ee>
 8001520:	464b      	mov	r3, r9
 8001522:	3808      	subs	r0, #8
 8001524:	4083      	lsls	r3, r0
 8001526:	2500      	movs	r5, #0
 8001528:	4698      	mov	r8, r3
 800152a:	e732      	b.n	8001392 <__aeabi_ddiv+0x306>
 800152c:	f001 f928 	bl	8002780 <__clzsi2>
 8001530:	0003      	movs	r3, r0
 8001532:	001a      	movs	r2, r3
 8001534:	3215      	adds	r2, #21
 8001536:	3020      	adds	r0, #32
 8001538:	2a1c      	cmp	r2, #28
 800153a:	dc00      	bgt.n	800153e <__aeabi_ddiv+0x4b2>
 800153c:	e700      	b.n	8001340 <__aeabi_ddiv+0x2b4>
 800153e:	4654      	mov	r4, sl
 8001540:	3b08      	subs	r3, #8
 8001542:	2200      	movs	r2, #0
 8001544:	409c      	lsls	r4, r3
 8001546:	e705      	b.n	8001354 <__aeabi_ddiv+0x2c8>
 8001548:	1936      	adds	r6, r6, r4
 800154a:	3b01      	subs	r3, #1
 800154c:	42b4      	cmp	r4, r6
 800154e:	d900      	bls.n	8001552 <__aeabi_ddiv+0x4c6>
 8001550:	e6a6      	b.n	80012a0 <__aeabi_ddiv+0x214>
 8001552:	42b2      	cmp	r2, r6
 8001554:	d800      	bhi.n	8001558 <__aeabi_ddiv+0x4cc>
 8001556:	e6a3      	b.n	80012a0 <__aeabi_ddiv+0x214>
 8001558:	1e83      	subs	r3, r0, #2
 800155a:	1936      	adds	r6, r6, r4
 800155c:	e6a0      	b.n	80012a0 <__aeabi_ddiv+0x214>
 800155e:	1909      	adds	r1, r1, r4
 8001560:	3d01      	subs	r5, #1
 8001562:	428c      	cmp	r4, r1
 8001564:	d900      	bls.n	8001568 <__aeabi_ddiv+0x4dc>
 8001566:	e68d      	b.n	8001284 <__aeabi_ddiv+0x1f8>
 8001568:	428a      	cmp	r2, r1
 800156a:	d800      	bhi.n	800156e <__aeabi_ddiv+0x4e2>
 800156c:	e68a      	b.n	8001284 <__aeabi_ddiv+0x1f8>
 800156e:	1e85      	subs	r5, r0, #2
 8001570:	1909      	adds	r1, r1, r4
 8001572:	e687      	b.n	8001284 <__aeabi_ddiv+0x1f8>
 8001574:	230f      	movs	r3, #15
 8001576:	402b      	ands	r3, r5
 8001578:	2b04      	cmp	r3, #4
 800157a:	d100      	bne.n	800157e <__aeabi_ddiv+0x4f2>
 800157c:	e6bc      	b.n	80012f8 <__aeabi_ddiv+0x26c>
 800157e:	2305      	movs	r3, #5
 8001580:	425b      	negs	r3, r3
 8001582:	42ab      	cmp	r3, r5
 8001584:	419b      	sbcs	r3, r3
 8001586:	3504      	adds	r5, #4
 8001588:	425b      	negs	r3, r3
 800158a:	08ed      	lsrs	r5, r5, #3
 800158c:	4498      	add	r8, r3
 800158e:	e6b4      	b.n	80012fa <__aeabi_ddiv+0x26e>
 8001590:	42af      	cmp	r7, r5
 8001592:	d900      	bls.n	8001596 <__aeabi_ddiv+0x50a>
 8001594:	e660      	b.n	8001258 <__aeabi_ddiv+0x1cc>
 8001596:	4282      	cmp	r2, r0
 8001598:	d804      	bhi.n	80015a4 <__aeabi_ddiv+0x518>
 800159a:	d000      	beq.n	800159e <__aeabi_ddiv+0x512>
 800159c:	e65c      	b.n	8001258 <__aeabi_ddiv+0x1cc>
 800159e:	42ae      	cmp	r6, r5
 80015a0:	d800      	bhi.n	80015a4 <__aeabi_ddiv+0x518>
 80015a2:	e659      	b.n	8001258 <__aeabi_ddiv+0x1cc>
 80015a4:	2302      	movs	r3, #2
 80015a6:	425b      	negs	r3, r3
 80015a8:	469c      	mov	ip, r3
 80015aa:	9b00      	ldr	r3, [sp, #0]
 80015ac:	44e0      	add	r8, ip
 80015ae:	469c      	mov	ip, r3
 80015b0:	4465      	add	r5, ip
 80015b2:	429d      	cmp	r5, r3
 80015b4:	419b      	sbcs	r3, r3
 80015b6:	425b      	negs	r3, r3
 80015b8:	191b      	adds	r3, r3, r4
 80015ba:	18c0      	adds	r0, r0, r3
 80015bc:	e64d      	b.n	800125a <__aeabi_ddiv+0x1ce>
 80015be:	428a      	cmp	r2, r1
 80015c0:	d800      	bhi.n	80015c4 <__aeabi_ddiv+0x538>
 80015c2:	e60e      	b.n	80011e2 <__aeabi_ddiv+0x156>
 80015c4:	1e83      	subs	r3, r0, #2
 80015c6:	1909      	adds	r1, r1, r4
 80015c8:	e60b      	b.n	80011e2 <__aeabi_ddiv+0x156>
 80015ca:	428a      	cmp	r2, r1
 80015cc:	d800      	bhi.n	80015d0 <__aeabi_ddiv+0x544>
 80015ce:	e5f4      	b.n	80011ba <__aeabi_ddiv+0x12e>
 80015d0:	1e83      	subs	r3, r0, #2
 80015d2:	4698      	mov	r8, r3
 80015d4:	1909      	adds	r1, r1, r4
 80015d6:	e5f0      	b.n	80011ba <__aeabi_ddiv+0x12e>
 80015d8:	4925      	ldr	r1, [pc, #148]	; (8001670 <__aeabi_ddiv+0x5e4>)
 80015da:	0028      	movs	r0, r5
 80015dc:	4459      	add	r1, fp
 80015de:	408d      	lsls	r5, r1
 80015e0:	4642      	mov	r2, r8
 80015e2:	408a      	lsls	r2, r1
 80015e4:	1e69      	subs	r1, r5, #1
 80015e6:	418d      	sbcs	r5, r1
 80015e8:	4641      	mov	r1, r8
 80015ea:	40d8      	lsrs	r0, r3
 80015ec:	40d9      	lsrs	r1, r3
 80015ee:	4302      	orrs	r2, r0
 80015f0:	432a      	orrs	r2, r5
 80015f2:	000b      	movs	r3, r1
 80015f4:	0751      	lsls	r1, r2, #29
 80015f6:	d100      	bne.n	80015fa <__aeabi_ddiv+0x56e>
 80015f8:	e751      	b.n	800149e <__aeabi_ddiv+0x412>
 80015fa:	210f      	movs	r1, #15
 80015fc:	4011      	ands	r1, r2
 80015fe:	2904      	cmp	r1, #4
 8001600:	d000      	beq.n	8001604 <__aeabi_ddiv+0x578>
 8001602:	e746      	b.n	8001492 <__aeabi_ddiv+0x406>
 8001604:	e74b      	b.n	800149e <__aeabi_ddiv+0x412>
 8001606:	0005      	movs	r5, r0
 8001608:	428e      	cmp	r6, r1
 800160a:	d000      	beq.n	800160e <__aeabi_ddiv+0x582>
 800160c:	e66a      	b.n	80012e4 <__aeabi_ddiv+0x258>
 800160e:	9a00      	ldr	r2, [sp, #0]
 8001610:	4293      	cmp	r3, r2
 8001612:	d000      	beq.n	8001616 <__aeabi_ddiv+0x58a>
 8001614:	e666      	b.n	80012e4 <__aeabi_ddiv+0x258>
 8001616:	e667      	b.n	80012e8 <__aeabi_ddiv+0x25c>
 8001618:	4a16      	ldr	r2, [pc, #88]	; (8001674 <__aeabi_ddiv+0x5e8>)
 800161a:	445a      	add	r2, fp
 800161c:	2a00      	cmp	r2, #0
 800161e:	dc00      	bgt.n	8001622 <__aeabi_ddiv+0x596>
 8001620:	e710      	b.n	8001444 <__aeabi_ddiv+0x3b8>
 8001622:	2301      	movs	r3, #1
 8001624:	2500      	movs	r5, #0
 8001626:	4498      	add	r8, r3
 8001628:	e667      	b.n	80012fa <__aeabi_ddiv+0x26e>
 800162a:	075d      	lsls	r5, r3, #29
 800162c:	025b      	lsls	r3, r3, #9
 800162e:	0b1c      	lsrs	r4, r3, #12
 8001630:	08d2      	lsrs	r2, r2, #3
 8001632:	2300      	movs	r3, #0
 8001634:	4315      	orrs	r5, r2
 8001636:	e580      	b.n	800113a <__aeabi_ddiv+0xae>
 8001638:	9800      	ldr	r0, [sp, #0]
 800163a:	3d02      	subs	r5, #2
 800163c:	0042      	lsls	r2, r0, #1
 800163e:	4282      	cmp	r2, r0
 8001640:	41bf      	sbcs	r7, r7
 8001642:	427f      	negs	r7, r7
 8001644:	193c      	adds	r4, r7, r4
 8001646:	1936      	adds	r6, r6, r4
 8001648:	9200      	str	r2, [sp, #0]
 800164a:	e7dd      	b.n	8001608 <__aeabi_ddiv+0x57c>
 800164c:	2480      	movs	r4, #128	; 0x80
 800164e:	4643      	mov	r3, r8
 8001650:	0324      	lsls	r4, r4, #12
 8001652:	431c      	orrs	r4, r3
 8001654:	0324      	lsls	r4, r4, #12
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__aeabi_ddiv+0x5dc>)
 8001658:	0b24      	lsrs	r4, r4, #12
 800165a:	e56e      	b.n	800113a <__aeabi_ddiv+0xae>
 800165c:	9a00      	ldr	r2, [sp, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d3ea      	bcc.n	8001638 <__aeabi_ddiv+0x5ac>
 8001662:	0005      	movs	r5, r0
 8001664:	e7d3      	b.n	800160e <__aeabi_ddiv+0x582>
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	000007ff 	.word	0x000007ff
 800166c:	0000043e 	.word	0x0000043e
 8001670:	0000041e 	.word	0x0000041e
 8001674:	000003ff 	.word	0x000003ff

08001678 <__eqdf2>:
 8001678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167a:	464e      	mov	r6, r9
 800167c:	4645      	mov	r5, r8
 800167e:	46de      	mov	lr, fp
 8001680:	4657      	mov	r7, sl
 8001682:	4690      	mov	r8, r2
 8001684:	b5e0      	push	{r5, r6, r7, lr}
 8001686:	0017      	movs	r7, r2
 8001688:	031a      	lsls	r2, r3, #12
 800168a:	0b12      	lsrs	r2, r2, #12
 800168c:	0005      	movs	r5, r0
 800168e:	4684      	mov	ip, r0
 8001690:	4819      	ldr	r0, [pc, #100]	; (80016f8 <__eqdf2+0x80>)
 8001692:	030e      	lsls	r6, r1, #12
 8001694:	004c      	lsls	r4, r1, #1
 8001696:	4691      	mov	r9, r2
 8001698:	005a      	lsls	r2, r3, #1
 800169a:	0fdb      	lsrs	r3, r3, #31
 800169c:	469b      	mov	fp, r3
 800169e:	0b36      	lsrs	r6, r6, #12
 80016a0:	0d64      	lsrs	r4, r4, #21
 80016a2:	0fc9      	lsrs	r1, r1, #31
 80016a4:	0d52      	lsrs	r2, r2, #21
 80016a6:	4284      	cmp	r4, r0
 80016a8:	d019      	beq.n	80016de <__eqdf2+0x66>
 80016aa:	4282      	cmp	r2, r0
 80016ac:	d010      	beq.n	80016d0 <__eqdf2+0x58>
 80016ae:	2001      	movs	r0, #1
 80016b0:	4294      	cmp	r4, r2
 80016b2:	d10e      	bne.n	80016d2 <__eqdf2+0x5a>
 80016b4:	454e      	cmp	r6, r9
 80016b6:	d10c      	bne.n	80016d2 <__eqdf2+0x5a>
 80016b8:	2001      	movs	r0, #1
 80016ba:	45c4      	cmp	ip, r8
 80016bc:	d109      	bne.n	80016d2 <__eqdf2+0x5a>
 80016be:	4559      	cmp	r1, fp
 80016c0:	d017      	beq.n	80016f2 <__eqdf2+0x7a>
 80016c2:	2c00      	cmp	r4, #0
 80016c4:	d105      	bne.n	80016d2 <__eqdf2+0x5a>
 80016c6:	0030      	movs	r0, r6
 80016c8:	4328      	orrs	r0, r5
 80016ca:	1e43      	subs	r3, r0, #1
 80016cc:	4198      	sbcs	r0, r3
 80016ce:	e000      	b.n	80016d2 <__eqdf2+0x5a>
 80016d0:	2001      	movs	r0, #1
 80016d2:	bcf0      	pop	{r4, r5, r6, r7}
 80016d4:	46bb      	mov	fp, r7
 80016d6:	46b2      	mov	sl, r6
 80016d8:	46a9      	mov	r9, r5
 80016da:	46a0      	mov	r8, r4
 80016dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016de:	0033      	movs	r3, r6
 80016e0:	2001      	movs	r0, #1
 80016e2:	432b      	orrs	r3, r5
 80016e4:	d1f5      	bne.n	80016d2 <__eqdf2+0x5a>
 80016e6:	42a2      	cmp	r2, r4
 80016e8:	d1f3      	bne.n	80016d2 <__eqdf2+0x5a>
 80016ea:	464b      	mov	r3, r9
 80016ec:	433b      	orrs	r3, r7
 80016ee:	d1f0      	bne.n	80016d2 <__eqdf2+0x5a>
 80016f0:	e7e2      	b.n	80016b8 <__eqdf2+0x40>
 80016f2:	2000      	movs	r0, #0
 80016f4:	e7ed      	b.n	80016d2 <__eqdf2+0x5a>
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	000007ff 	.word	0x000007ff

080016fc <__gedf2>:
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	4647      	mov	r7, r8
 8001700:	46ce      	mov	lr, r9
 8001702:	0004      	movs	r4, r0
 8001704:	0018      	movs	r0, r3
 8001706:	0016      	movs	r6, r2
 8001708:	031b      	lsls	r3, r3, #12
 800170a:	0b1b      	lsrs	r3, r3, #12
 800170c:	4d2d      	ldr	r5, [pc, #180]	; (80017c4 <__gedf2+0xc8>)
 800170e:	004a      	lsls	r2, r1, #1
 8001710:	4699      	mov	r9, r3
 8001712:	b580      	push	{r7, lr}
 8001714:	0043      	lsls	r3, r0, #1
 8001716:	030f      	lsls	r7, r1, #12
 8001718:	46a4      	mov	ip, r4
 800171a:	46b0      	mov	r8, r6
 800171c:	0b3f      	lsrs	r7, r7, #12
 800171e:	0d52      	lsrs	r2, r2, #21
 8001720:	0fc9      	lsrs	r1, r1, #31
 8001722:	0d5b      	lsrs	r3, r3, #21
 8001724:	0fc0      	lsrs	r0, r0, #31
 8001726:	42aa      	cmp	r2, r5
 8001728:	d021      	beq.n	800176e <__gedf2+0x72>
 800172a:	42ab      	cmp	r3, r5
 800172c:	d013      	beq.n	8001756 <__gedf2+0x5a>
 800172e:	2a00      	cmp	r2, #0
 8001730:	d122      	bne.n	8001778 <__gedf2+0x7c>
 8001732:	433c      	orrs	r4, r7
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <__gedf2+0x42>
 8001738:	464d      	mov	r5, r9
 800173a:	432e      	orrs	r6, r5
 800173c:	d022      	beq.n	8001784 <__gedf2+0x88>
 800173e:	2c00      	cmp	r4, #0
 8001740:	d010      	beq.n	8001764 <__gedf2+0x68>
 8001742:	4281      	cmp	r1, r0
 8001744:	d022      	beq.n	800178c <__gedf2+0x90>
 8001746:	2002      	movs	r0, #2
 8001748:	3901      	subs	r1, #1
 800174a:	4008      	ands	r0, r1
 800174c:	3801      	subs	r0, #1
 800174e:	bcc0      	pop	{r6, r7}
 8001750:	46b9      	mov	r9, r7
 8001752:	46b0      	mov	r8, r6
 8001754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001756:	464d      	mov	r5, r9
 8001758:	432e      	orrs	r6, r5
 800175a:	d129      	bne.n	80017b0 <__gedf2+0xb4>
 800175c:	2a00      	cmp	r2, #0
 800175e:	d1f0      	bne.n	8001742 <__gedf2+0x46>
 8001760:	433c      	orrs	r4, r7
 8001762:	d1ee      	bne.n	8001742 <__gedf2+0x46>
 8001764:	2800      	cmp	r0, #0
 8001766:	d1f2      	bne.n	800174e <__gedf2+0x52>
 8001768:	2001      	movs	r0, #1
 800176a:	4240      	negs	r0, r0
 800176c:	e7ef      	b.n	800174e <__gedf2+0x52>
 800176e:	003d      	movs	r5, r7
 8001770:	4325      	orrs	r5, r4
 8001772:	d11d      	bne.n	80017b0 <__gedf2+0xb4>
 8001774:	4293      	cmp	r3, r2
 8001776:	d0ee      	beq.n	8001756 <__gedf2+0x5a>
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e2      	bne.n	8001742 <__gedf2+0x46>
 800177c:	464c      	mov	r4, r9
 800177e:	4326      	orrs	r6, r4
 8001780:	d1df      	bne.n	8001742 <__gedf2+0x46>
 8001782:	e7e0      	b.n	8001746 <__gedf2+0x4a>
 8001784:	2000      	movs	r0, #0
 8001786:	2c00      	cmp	r4, #0
 8001788:	d0e1      	beq.n	800174e <__gedf2+0x52>
 800178a:	e7dc      	b.n	8001746 <__gedf2+0x4a>
 800178c:	429a      	cmp	r2, r3
 800178e:	dc0a      	bgt.n	80017a6 <__gedf2+0xaa>
 8001790:	dbe8      	blt.n	8001764 <__gedf2+0x68>
 8001792:	454f      	cmp	r7, r9
 8001794:	d8d7      	bhi.n	8001746 <__gedf2+0x4a>
 8001796:	d00e      	beq.n	80017b6 <__gedf2+0xba>
 8001798:	2000      	movs	r0, #0
 800179a:	454f      	cmp	r7, r9
 800179c:	d2d7      	bcs.n	800174e <__gedf2+0x52>
 800179e:	2900      	cmp	r1, #0
 80017a0:	d0e2      	beq.n	8001768 <__gedf2+0x6c>
 80017a2:	0008      	movs	r0, r1
 80017a4:	e7d3      	b.n	800174e <__gedf2+0x52>
 80017a6:	4243      	negs	r3, r0
 80017a8:	4158      	adcs	r0, r3
 80017aa:	0040      	lsls	r0, r0, #1
 80017ac:	3801      	subs	r0, #1
 80017ae:	e7ce      	b.n	800174e <__gedf2+0x52>
 80017b0:	2002      	movs	r0, #2
 80017b2:	4240      	negs	r0, r0
 80017b4:	e7cb      	b.n	800174e <__gedf2+0x52>
 80017b6:	45c4      	cmp	ip, r8
 80017b8:	d8c5      	bhi.n	8001746 <__gedf2+0x4a>
 80017ba:	2000      	movs	r0, #0
 80017bc:	45c4      	cmp	ip, r8
 80017be:	d2c6      	bcs.n	800174e <__gedf2+0x52>
 80017c0:	e7ed      	b.n	800179e <__gedf2+0xa2>
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	000007ff 	.word	0x000007ff

080017c8 <__ledf2>:
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	4647      	mov	r7, r8
 80017cc:	46ce      	mov	lr, r9
 80017ce:	0004      	movs	r4, r0
 80017d0:	0018      	movs	r0, r3
 80017d2:	0016      	movs	r6, r2
 80017d4:	031b      	lsls	r3, r3, #12
 80017d6:	0b1b      	lsrs	r3, r3, #12
 80017d8:	4d2c      	ldr	r5, [pc, #176]	; (800188c <__ledf2+0xc4>)
 80017da:	004a      	lsls	r2, r1, #1
 80017dc:	4699      	mov	r9, r3
 80017de:	b580      	push	{r7, lr}
 80017e0:	0043      	lsls	r3, r0, #1
 80017e2:	030f      	lsls	r7, r1, #12
 80017e4:	46a4      	mov	ip, r4
 80017e6:	46b0      	mov	r8, r6
 80017e8:	0b3f      	lsrs	r7, r7, #12
 80017ea:	0d52      	lsrs	r2, r2, #21
 80017ec:	0fc9      	lsrs	r1, r1, #31
 80017ee:	0d5b      	lsrs	r3, r3, #21
 80017f0:	0fc0      	lsrs	r0, r0, #31
 80017f2:	42aa      	cmp	r2, r5
 80017f4:	d00d      	beq.n	8001812 <__ledf2+0x4a>
 80017f6:	42ab      	cmp	r3, r5
 80017f8:	d010      	beq.n	800181c <__ledf2+0x54>
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d127      	bne.n	800184e <__ledf2+0x86>
 80017fe:	433c      	orrs	r4, r7
 8001800:	2b00      	cmp	r3, #0
 8001802:	d111      	bne.n	8001828 <__ledf2+0x60>
 8001804:	464d      	mov	r5, r9
 8001806:	432e      	orrs	r6, r5
 8001808:	d10e      	bne.n	8001828 <__ledf2+0x60>
 800180a:	2000      	movs	r0, #0
 800180c:	2c00      	cmp	r4, #0
 800180e:	d015      	beq.n	800183c <__ledf2+0x74>
 8001810:	e00e      	b.n	8001830 <__ledf2+0x68>
 8001812:	003d      	movs	r5, r7
 8001814:	4325      	orrs	r5, r4
 8001816:	d110      	bne.n	800183a <__ledf2+0x72>
 8001818:	4293      	cmp	r3, r2
 800181a:	d118      	bne.n	800184e <__ledf2+0x86>
 800181c:	464d      	mov	r5, r9
 800181e:	432e      	orrs	r6, r5
 8001820:	d10b      	bne.n	800183a <__ledf2+0x72>
 8001822:	2a00      	cmp	r2, #0
 8001824:	d102      	bne.n	800182c <__ledf2+0x64>
 8001826:	433c      	orrs	r4, r7
 8001828:	2c00      	cmp	r4, #0
 800182a:	d00b      	beq.n	8001844 <__ledf2+0x7c>
 800182c:	4281      	cmp	r1, r0
 800182e:	d014      	beq.n	800185a <__ledf2+0x92>
 8001830:	2002      	movs	r0, #2
 8001832:	3901      	subs	r1, #1
 8001834:	4008      	ands	r0, r1
 8001836:	3801      	subs	r0, #1
 8001838:	e000      	b.n	800183c <__ledf2+0x74>
 800183a:	2002      	movs	r0, #2
 800183c:	bcc0      	pop	{r6, r7}
 800183e:	46b9      	mov	r9, r7
 8001840:	46b0      	mov	r8, r6
 8001842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001844:	2800      	cmp	r0, #0
 8001846:	d1f9      	bne.n	800183c <__ledf2+0x74>
 8001848:	2001      	movs	r0, #1
 800184a:	4240      	negs	r0, r0
 800184c:	e7f6      	b.n	800183c <__ledf2+0x74>
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ec      	bne.n	800182c <__ledf2+0x64>
 8001852:	464c      	mov	r4, r9
 8001854:	4326      	orrs	r6, r4
 8001856:	d1e9      	bne.n	800182c <__ledf2+0x64>
 8001858:	e7ea      	b.n	8001830 <__ledf2+0x68>
 800185a:	429a      	cmp	r2, r3
 800185c:	dd04      	ble.n	8001868 <__ledf2+0xa0>
 800185e:	4243      	negs	r3, r0
 8001860:	4158      	adcs	r0, r3
 8001862:	0040      	lsls	r0, r0, #1
 8001864:	3801      	subs	r0, #1
 8001866:	e7e9      	b.n	800183c <__ledf2+0x74>
 8001868:	429a      	cmp	r2, r3
 800186a:	dbeb      	blt.n	8001844 <__ledf2+0x7c>
 800186c:	454f      	cmp	r7, r9
 800186e:	d8df      	bhi.n	8001830 <__ledf2+0x68>
 8001870:	d006      	beq.n	8001880 <__ledf2+0xb8>
 8001872:	2000      	movs	r0, #0
 8001874:	454f      	cmp	r7, r9
 8001876:	d2e1      	bcs.n	800183c <__ledf2+0x74>
 8001878:	2900      	cmp	r1, #0
 800187a:	d0e5      	beq.n	8001848 <__ledf2+0x80>
 800187c:	0008      	movs	r0, r1
 800187e:	e7dd      	b.n	800183c <__ledf2+0x74>
 8001880:	45c4      	cmp	ip, r8
 8001882:	d8d5      	bhi.n	8001830 <__ledf2+0x68>
 8001884:	2000      	movs	r0, #0
 8001886:	45c4      	cmp	ip, r8
 8001888:	d2d8      	bcs.n	800183c <__ledf2+0x74>
 800188a:	e7f5      	b.n	8001878 <__ledf2+0xb0>
 800188c:	000007ff 	.word	0x000007ff

08001890 <__aeabi_dmul>:
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	4657      	mov	r7, sl
 8001894:	464e      	mov	r6, r9
 8001896:	4645      	mov	r5, r8
 8001898:	46de      	mov	lr, fp
 800189a:	b5e0      	push	{r5, r6, r7, lr}
 800189c:	4698      	mov	r8, r3
 800189e:	030c      	lsls	r4, r1, #12
 80018a0:	004b      	lsls	r3, r1, #1
 80018a2:	0006      	movs	r6, r0
 80018a4:	4692      	mov	sl, r2
 80018a6:	b087      	sub	sp, #28
 80018a8:	0b24      	lsrs	r4, r4, #12
 80018aa:	0d5b      	lsrs	r3, r3, #21
 80018ac:	0fcf      	lsrs	r7, r1, #31
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dmul+0x24>
 80018b2:	e15c      	b.n	8001b6e <__aeabi_dmul+0x2de>
 80018b4:	4ad9      	ldr	r2, [pc, #868]	; (8001c1c <__aeabi_dmul+0x38c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d100      	bne.n	80018bc <__aeabi_dmul+0x2c>
 80018ba:	e175      	b.n	8001ba8 <__aeabi_dmul+0x318>
 80018bc:	0f42      	lsrs	r2, r0, #29
 80018be:	00e4      	lsls	r4, r4, #3
 80018c0:	4314      	orrs	r4, r2
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0412      	lsls	r2, r2, #16
 80018c6:	4314      	orrs	r4, r2
 80018c8:	4ad5      	ldr	r2, [pc, #852]	; (8001c20 <__aeabi_dmul+0x390>)
 80018ca:	00c5      	lsls	r5, r0, #3
 80018cc:	4694      	mov	ip, r2
 80018ce:	4463      	add	r3, ip
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2300      	movs	r3, #0
 80018d4:	4699      	mov	r9, r3
 80018d6:	469b      	mov	fp, r3
 80018d8:	4643      	mov	r3, r8
 80018da:	4642      	mov	r2, r8
 80018dc:	031e      	lsls	r6, r3, #12
 80018de:	0fd2      	lsrs	r2, r2, #31
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4650      	mov	r0, sl
 80018e4:	4690      	mov	r8, r2
 80018e6:	0b36      	lsrs	r6, r6, #12
 80018e8:	0d5b      	lsrs	r3, r3, #21
 80018ea:	d100      	bne.n	80018ee <__aeabi_dmul+0x5e>
 80018ec:	e120      	b.n	8001b30 <__aeabi_dmul+0x2a0>
 80018ee:	4acb      	ldr	r2, [pc, #812]	; (8001c1c <__aeabi_dmul+0x38c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dmul+0x66>
 80018f4:	e162      	b.n	8001bbc <__aeabi_dmul+0x32c>
 80018f6:	49ca      	ldr	r1, [pc, #808]	; (8001c20 <__aeabi_dmul+0x390>)
 80018f8:	0f42      	lsrs	r2, r0, #29
 80018fa:	468c      	mov	ip, r1
 80018fc:	9900      	ldr	r1, [sp, #0]
 80018fe:	4463      	add	r3, ip
 8001900:	00f6      	lsls	r6, r6, #3
 8001902:	468c      	mov	ip, r1
 8001904:	4316      	orrs	r6, r2
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	449c      	add	ip, r3
 800190a:	0412      	lsls	r2, r2, #16
 800190c:	4663      	mov	r3, ip
 800190e:	4316      	orrs	r6, r2
 8001910:	00c2      	lsls	r2, r0, #3
 8001912:	2000      	movs	r0, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	9900      	ldr	r1, [sp, #0]
 8001918:	4643      	mov	r3, r8
 800191a:	3101      	adds	r1, #1
 800191c:	468c      	mov	ip, r1
 800191e:	4649      	mov	r1, r9
 8001920:	407b      	eors	r3, r7
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	290f      	cmp	r1, #15
 8001926:	d826      	bhi.n	8001976 <__aeabi_dmul+0xe6>
 8001928:	4bbe      	ldr	r3, [pc, #760]	; (8001c24 <__aeabi_dmul+0x394>)
 800192a:	0089      	lsls	r1, r1, #2
 800192c:	5859      	ldr	r1, [r3, r1]
 800192e:	468f      	mov	pc, r1
 8001930:	4643      	mov	r3, r8
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	0034      	movs	r4, r6
 8001936:	0015      	movs	r5, r2
 8001938:	4683      	mov	fp, r0
 800193a:	465b      	mov	r3, fp
 800193c:	2b02      	cmp	r3, #2
 800193e:	d016      	beq.n	800196e <__aeabi_dmul+0xde>
 8001940:	2b03      	cmp	r3, #3
 8001942:	d100      	bne.n	8001946 <__aeabi_dmul+0xb6>
 8001944:	e203      	b.n	8001d4e <__aeabi_dmul+0x4be>
 8001946:	2b01      	cmp	r3, #1
 8001948:	d000      	beq.n	800194c <__aeabi_dmul+0xbc>
 800194a:	e0cd      	b.n	8001ae8 <__aeabi_dmul+0x258>
 800194c:	2200      	movs	r2, #0
 800194e:	2400      	movs	r4, #0
 8001950:	2500      	movs	r5, #0
 8001952:	9b01      	ldr	r3, [sp, #4]
 8001954:	0512      	lsls	r2, r2, #20
 8001956:	4322      	orrs	r2, r4
 8001958:	07db      	lsls	r3, r3, #31
 800195a:	431a      	orrs	r2, r3
 800195c:	0028      	movs	r0, r5
 800195e:	0011      	movs	r1, r2
 8001960:	b007      	add	sp, #28
 8001962:	bcf0      	pop	{r4, r5, r6, r7}
 8001964:	46bb      	mov	fp, r7
 8001966:	46b2      	mov	sl, r6
 8001968:	46a9      	mov	r9, r5
 800196a:	46a0      	mov	r8, r4
 800196c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800196e:	2400      	movs	r4, #0
 8001970:	2500      	movs	r5, #0
 8001972:	4aaa      	ldr	r2, [pc, #680]	; (8001c1c <__aeabi_dmul+0x38c>)
 8001974:	e7ed      	b.n	8001952 <__aeabi_dmul+0xc2>
 8001976:	0c28      	lsrs	r0, r5, #16
 8001978:	042d      	lsls	r5, r5, #16
 800197a:	0c2d      	lsrs	r5, r5, #16
 800197c:	002b      	movs	r3, r5
 800197e:	0c11      	lsrs	r1, r2, #16
 8001980:	0412      	lsls	r2, r2, #16
 8001982:	0c12      	lsrs	r2, r2, #16
 8001984:	4353      	muls	r3, r2
 8001986:	4698      	mov	r8, r3
 8001988:	0013      	movs	r3, r2
 800198a:	002f      	movs	r7, r5
 800198c:	4343      	muls	r3, r0
 800198e:	4699      	mov	r9, r3
 8001990:	434f      	muls	r7, r1
 8001992:	444f      	add	r7, r9
 8001994:	46bb      	mov	fp, r7
 8001996:	4647      	mov	r7, r8
 8001998:	000b      	movs	r3, r1
 800199a:	0c3f      	lsrs	r7, r7, #16
 800199c:	46ba      	mov	sl, r7
 800199e:	4343      	muls	r3, r0
 80019a0:	44da      	add	sl, fp
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	45d1      	cmp	r9, sl
 80019a6:	d904      	bls.n	80019b2 <__aeabi_dmul+0x122>
 80019a8:	2780      	movs	r7, #128	; 0x80
 80019aa:	027f      	lsls	r7, r7, #9
 80019ac:	46b9      	mov	r9, r7
 80019ae:	444b      	add	r3, r9
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	4653      	mov	r3, sl
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	469b      	mov	fp, r3
 80019b8:	4653      	mov	r3, sl
 80019ba:	041f      	lsls	r7, r3, #16
 80019bc:	4643      	mov	r3, r8
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	4698      	mov	r8, r3
 80019c4:	003b      	movs	r3, r7
 80019c6:	4443      	add	r3, r8
 80019c8:	9304      	str	r3, [sp, #16]
 80019ca:	0c33      	lsrs	r3, r6, #16
 80019cc:	0436      	lsls	r6, r6, #16
 80019ce:	0c36      	lsrs	r6, r6, #16
 80019d0:	4698      	mov	r8, r3
 80019d2:	0033      	movs	r3, r6
 80019d4:	4343      	muls	r3, r0
 80019d6:	4699      	mov	r9, r3
 80019d8:	4643      	mov	r3, r8
 80019da:	4343      	muls	r3, r0
 80019dc:	002f      	movs	r7, r5
 80019de:	469a      	mov	sl, r3
 80019e0:	4643      	mov	r3, r8
 80019e2:	4377      	muls	r7, r6
 80019e4:	435d      	muls	r5, r3
 80019e6:	0c38      	lsrs	r0, r7, #16
 80019e8:	444d      	add	r5, r9
 80019ea:	1945      	adds	r5, r0, r5
 80019ec:	45a9      	cmp	r9, r5
 80019ee:	d903      	bls.n	80019f8 <__aeabi_dmul+0x168>
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	025b      	lsls	r3, r3, #9
 80019f4:	4699      	mov	r9, r3
 80019f6:	44ca      	add	sl, r9
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	0c28      	lsrs	r0, r5, #16
 80019fc:	0c3f      	lsrs	r7, r7, #16
 80019fe:	042d      	lsls	r5, r5, #16
 8001a00:	19ed      	adds	r5, r5, r7
 8001a02:	0c27      	lsrs	r7, r4, #16
 8001a04:	0424      	lsls	r4, r4, #16
 8001a06:	0c24      	lsrs	r4, r4, #16
 8001a08:	0003      	movs	r3, r0
 8001a0a:	0020      	movs	r0, r4
 8001a0c:	4350      	muls	r0, r2
 8001a0e:	437a      	muls	r2, r7
 8001a10:	4691      	mov	r9, r2
 8001a12:	003a      	movs	r2, r7
 8001a14:	4453      	add	r3, sl
 8001a16:	9305      	str	r3, [sp, #20]
 8001a18:	0c03      	lsrs	r3, r0, #16
 8001a1a:	469a      	mov	sl, r3
 8001a1c:	434a      	muls	r2, r1
 8001a1e:	4361      	muls	r1, r4
 8001a20:	4449      	add	r1, r9
 8001a22:	4451      	add	r1, sl
 8001a24:	44ab      	add	fp, r5
 8001a26:	4589      	cmp	r9, r1
 8001a28:	d903      	bls.n	8001a32 <__aeabi_dmul+0x1a2>
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	025b      	lsls	r3, r3, #9
 8001a2e:	4699      	mov	r9, r3
 8001a30:	444a      	add	r2, r9
 8001a32:	0400      	lsls	r0, r0, #16
 8001a34:	0c0b      	lsrs	r3, r1, #16
 8001a36:	0c00      	lsrs	r0, r0, #16
 8001a38:	0409      	lsls	r1, r1, #16
 8001a3a:	1809      	adds	r1, r1, r0
 8001a3c:	0020      	movs	r0, r4
 8001a3e:	4699      	mov	r9, r3
 8001a40:	4643      	mov	r3, r8
 8001a42:	4370      	muls	r0, r6
 8001a44:	435c      	muls	r4, r3
 8001a46:	437e      	muls	r6, r7
 8001a48:	435f      	muls	r7, r3
 8001a4a:	0c03      	lsrs	r3, r0, #16
 8001a4c:	4698      	mov	r8, r3
 8001a4e:	19a4      	adds	r4, r4, r6
 8001a50:	4444      	add	r4, r8
 8001a52:	444a      	add	r2, r9
 8001a54:	9703      	str	r7, [sp, #12]
 8001a56:	42a6      	cmp	r6, r4
 8001a58:	d904      	bls.n	8001a64 <__aeabi_dmul+0x1d4>
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	025b      	lsls	r3, r3, #9
 8001a5e:	4698      	mov	r8, r3
 8001a60:	4447      	add	r7, r8
 8001a62:	9703      	str	r7, [sp, #12]
 8001a64:	0423      	lsls	r3, r4, #16
 8001a66:	9e02      	ldr	r6, [sp, #8]
 8001a68:	469a      	mov	sl, r3
 8001a6a:	9b05      	ldr	r3, [sp, #20]
 8001a6c:	445e      	add	r6, fp
 8001a6e:	4698      	mov	r8, r3
 8001a70:	42ae      	cmp	r6, r5
 8001a72:	41ad      	sbcs	r5, r5
 8001a74:	1876      	adds	r6, r6, r1
 8001a76:	428e      	cmp	r6, r1
 8001a78:	4189      	sbcs	r1, r1
 8001a7a:	0400      	lsls	r0, r0, #16
 8001a7c:	0c00      	lsrs	r0, r0, #16
 8001a7e:	4450      	add	r0, sl
 8001a80:	4440      	add	r0, r8
 8001a82:	426d      	negs	r5, r5
 8001a84:	1947      	adds	r7, r0, r5
 8001a86:	46b8      	mov	r8, r7
 8001a88:	4693      	mov	fp, r2
 8001a8a:	4249      	negs	r1, r1
 8001a8c:	4689      	mov	r9, r1
 8001a8e:	44c3      	add	fp, r8
 8001a90:	44d9      	add	r9, fp
 8001a92:	4298      	cmp	r0, r3
 8001a94:	4180      	sbcs	r0, r0
 8001a96:	45a8      	cmp	r8, r5
 8001a98:	41ad      	sbcs	r5, r5
 8001a9a:	4593      	cmp	fp, r2
 8001a9c:	4192      	sbcs	r2, r2
 8001a9e:	4589      	cmp	r9, r1
 8001aa0:	4189      	sbcs	r1, r1
 8001aa2:	426d      	negs	r5, r5
 8001aa4:	4240      	negs	r0, r0
 8001aa6:	4328      	orrs	r0, r5
 8001aa8:	0c24      	lsrs	r4, r4, #16
 8001aaa:	4252      	negs	r2, r2
 8001aac:	4249      	negs	r1, r1
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	9b03      	ldr	r3, [sp, #12]
 8001ab2:	1900      	adds	r0, r0, r4
 8001ab4:	1880      	adds	r0, r0, r2
 8001ab6:	18c7      	adds	r7, r0, r3
 8001ab8:	464b      	mov	r3, r9
 8001aba:	0ddc      	lsrs	r4, r3, #23
 8001abc:	9b04      	ldr	r3, [sp, #16]
 8001abe:	0275      	lsls	r5, r6, #9
 8001ac0:	431d      	orrs	r5, r3
 8001ac2:	1e6a      	subs	r2, r5, #1
 8001ac4:	4195      	sbcs	r5, r2
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	0df6      	lsrs	r6, r6, #23
 8001aca:	027f      	lsls	r7, r7, #9
 8001acc:	4335      	orrs	r5, r6
 8001ace:	025a      	lsls	r2, r3, #9
 8001ad0:	433c      	orrs	r4, r7
 8001ad2:	4315      	orrs	r5, r2
 8001ad4:	01fb      	lsls	r3, r7, #7
 8001ad6:	d400      	bmi.n	8001ada <__aeabi_dmul+0x24a>
 8001ad8:	e11c      	b.n	8001d14 <__aeabi_dmul+0x484>
 8001ada:	2101      	movs	r1, #1
 8001adc:	086a      	lsrs	r2, r5, #1
 8001ade:	400d      	ands	r5, r1
 8001ae0:	4315      	orrs	r5, r2
 8001ae2:	07e2      	lsls	r2, r4, #31
 8001ae4:	4315      	orrs	r5, r2
 8001ae6:	0864      	lsrs	r4, r4, #1
 8001ae8:	494f      	ldr	r1, [pc, #316]	; (8001c28 <__aeabi_dmul+0x398>)
 8001aea:	4461      	add	r1, ip
 8001aec:	2900      	cmp	r1, #0
 8001aee:	dc00      	bgt.n	8001af2 <__aeabi_dmul+0x262>
 8001af0:	e0b0      	b.n	8001c54 <__aeabi_dmul+0x3c4>
 8001af2:	076b      	lsls	r3, r5, #29
 8001af4:	d009      	beq.n	8001b0a <__aeabi_dmul+0x27a>
 8001af6:	220f      	movs	r2, #15
 8001af8:	402a      	ands	r2, r5
 8001afa:	2a04      	cmp	r2, #4
 8001afc:	d005      	beq.n	8001b0a <__aeabi_dmul+0x27a>
 8001afe:	1d2a      	adds	r2, r5, #4
 8001b00:	42aa      	cmp	r2, r5
 8001b02:	41ad      	sbcs	r5, r5
 8001b04:	426d      	negs	r5, r5
 8001b06:	1964      	adds	r4, r4, r5
 8001b08:	0015      	movs	r5, r2
 8001b0a:	01e3      	lsls	r3, r4, #7
 8001b0c:	d504      	bpl.n	8001b18 <__aeabi_dmul+0x288>
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	4a46      	ldr	r2, [pc, #280]	; (8001c2c <__aeabi_dmul+0x39c>)
 8001b12:	00c9      	lsls	r1, r1, #3
 8001b14:	4014      	ands	r4, r2
 8001b16:	4461      	add	r1, ip
 8001b18:	4a45      	ldr	r2, [pc, #276]	; (8001c30 <__aeabi_dmul+0x3a0>)
 8001b1a:	4291      	cmp	r1, r2
 8001b1c:	dd00      	ble.n	8001b20 <__aeabi_dmul+0x290>
 8001b1e:	e726      	b.n	800196e <__aeabi_dmul+0xde>
 8001b20:	0762      	lsls	r2, r4, #29
 8001b22:	08ed      	lsrs	r5, r5, #3
 8001b24:	0264      	lsls	r4, r4, #9
 8001b26:	0549      	lsls	r1, r1, #21
 8001b28:	4315      	orrs	r5, r2
 8001b2a:	0b24      	lsrs	r4, r4, #12
 8001b2c:	0d4a      	lsrs	r2, r1, #21
 8001b2e:	e710      	b.n	8001952 <__aeabi_dmul+0xc2>
 8001b30:	4652      	mov	r2, sl
 8001b32:	4332      	orrs	r2, r6
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dmul+0x2a8>
 8001b36:	e07f      	b.n	8001c38 <__aeabi_dmul+0x3a8>
 8001b38:	2e00      	cmp	r6, #0
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dmul+0x2ae>
 8001b3c:	e0dc      	b.n	8001cf8 <__aeabi_dmul+0x468>
 8001b3e:	0030      	movs	r0, r6
 8001b40:	f000 fe1e 	bl	8002780 <__clzsi2>
 8001b44:	0002      	movs	r2, r0
 8001b46:	3a0b      	subs	r2, #11
 8001b48:	231d      	movs	r3, #29
 8001b4a:	0001      	movs	r1, r0
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	4652      	mov	r2, sl
 8001b50:	3908      	subs	r1, #8
 8001b52:	40da      	lsrs	r2, r3
 8001b54:	408e      	lsls	r6, r1
 8001b56:	4316      	orrs	r6, r2
 8001b58:	4652      	mov	r2, sl
 8001b5a:	408a      	lsls	r2, r1
 8001b5c:	9b00      	ldr	r3, [sp, #0]
 8001b5e:	4935      	ldr	r1, [pc, #212]	; (8001c34 <__aeabi_dmul+0x3a4>)
 8001b60:	1a18      	subs	r0, r3, r0
 8001b62:	0003      	movs	r3, r0
 8001b64:	468c      	mov	ip, r1
 8001b66:	4463      	add	r3, ip
 8001b68:	2000      	movs	r0, #0
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	e6d3      	b.n	8001916 <__aeabi_dmul+0x86>
 8001b6e:	0025      	movs	r5, r4
 8001b70:	4305      	orrs	r5, r0
 8001b72:	d04a      	beq.n	8001c0a <__aeabi_dmul+0x37a>
 8001b74:	2c00      	cmp	r4, #0
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dmul+0x2ea>
 8001b78:	e0b0      	b.n	8001cdc <__aeabi_dmul+0x44c>
 8001b7a:	0020      	movs	r0, r4
 8001b7c:	f000 fe00 	bl	8002780 <__clzsi2>
 8001b80:	0001      	movs	r1, r0
 8001b82:	0002      	movs	r2, r0
 8001b84:	390b      	subs	r1, #11
 8001b86:	231d      	movs	r3, #29
 8001b88:	0010      	movs	r0, r2
 8001b8a:	1a5b      	subs	r3, r3, r1
 8001b8c:	0031      	movs	r1, r6
 8001b8e:	0035      	movs	r5, r6
 8001b90:	3808      	subs	r0, #8
 8001b92:	4084      	lsls	r4, r0
 8001b94:	40d9      	lsrs	r1, r3
 8001b96:	4085      	lsls	r5, r0
 8001b98:	430c      	orrs	r4, r1
 8001b9a:	4826      	ldr	r0, [pc, #152]	; (8001c34 <__aeabi_dmul+0x3a4>)
 8001b9c:	1a83      	subs	r3, r0, r2
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	469b      	mov	fp, r3
 8001ba6:	e697      	b.n	80018d8 <__aeabi_dmul+0x48>
 8001ba8:	0005      	movs	r5, r0
 8001baa:	4325      	orrs	r5, r4
 8001bac:	d126      	bne.n	8001bfc <__aeabi_dmul+0x36c>
 8001bae:	2208      	movs	r2, #8
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	2400      	movs	r4, #0
 8001bb6:	4691      	mov	r9, r2
 8001bb8:	469b      	mov	fp, r3
 8001bba:	e68d      	b.n	80018d8 <__aeabi_dmul+0x48>
 8001bbc:	4652      	mov	r2, sl
 8001bbe:	9b00      	ldr	r3, [sp, #0]
 8001bc0:	4332      	orrs	r2, r6
 8001bc2:	d110      	bne.n	8001be6 <__aeabi_dmul+0x356>
 8001bc4:	4915      	ldr	r1, [pc, #84]	; (8001c1c <__aeabi_dmul+0x38c>)
 8001bc6:	2600      	movs	r6, #0
 8001bc8:	468c      	mov	ip, r1
 8001bca:	4463      	add	r3, ip
 8001bcc:	4649      	mov	r1, r9
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	4319      	orrs	r1, r3
 8001bd4:	4689      	mov	r9, r1
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	e69d      	b.n	8001916 <__aeabi_dmul+0x86>
 8001bda:	465b      	mov	r3, fp
 8001bdc:	9701      	str	r7, [sp, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d000      	beq.n	8001be4 <__aeabi_dmul+0x354>
 8001be2:	e6ad      	b.n	8001940 <__aeabi_dmul+0xb0>
 8001be4:	e6c3      	b.n	800196e <__aeabi_dmul+0xde>
 8001be6:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <__aeabi_dmul+0x38c>)
 8001be8:	2003      	movs	r0, #3
 8001bea:	4694      	mov	ip, r2
 8001bec:	4463      	add	r3, ip
 8001bee:	464a      	mov	r2, r9
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	4691      	mov	r9, r2
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	e68c      	b.n	8001916 <__aeabi_dmul+0x86>
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2303      	movs	r3, #3
 8001c02:	0005      	movs	r5, r0
 8001c04:	4691      	mov	r9, r2
 8001c06:	469b      	mov	fp, r3
 8001c08:	e666      	b.n	80018d8 <__aeabi_dmul+0x48>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	2400      	movs	r4, #0
 8001c16:	469b      	mov	fp, r3
 8001c18:	e65e      	b.n	80018d8 <__aeabi_dmul+0x48>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	000007ff 	.word	0x000007ff
 8001c20:	fffffc01 	.word	0xfffffc01
 8001c24:	08009fd0 	.word	0x08009fd0
 8001c28:	000003ff 	.word	0x000003ff
 8001c2c:	feffffff 	.word	0xfeffffff
 8001c30:	000007fe 	.word	0x000007fe
 8001c34:	fffffc0d 	.word	0xfffffc0d
 8001c38:	4649      	mov	r1, r9
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4319      	orrs	r1, r3
 8001c3e:	4689      	mov	r9, r1
 8001c40:	2600      	movs	r6, #0
 8001c42:	2001      	movs	r0, #1
 8001c44:	e667      	b.n	8001916 <__aeabi_dmul+0x86>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2480      	movs	r4, #128	; 0x80
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	4a43      	ldr	r2, [pc, #268]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	0324      	lsls	r4, r4, #12
 8001c52:	e67e      	b.n	8001952 <__aeabi_dmul+0xc2>
 8001c54:	2001      	movs	r0, #1
 8001c56:	1a40      	subs	r0, r0, r1
 8001c58:	2838      	cmp	r0, #56	; 0x38
 8001c5a:	dd00      	ble.n	8001c5e <__aeabi_dmul+0x3ce>
 8001c5c:	e676      	b.n	800194c <__aeabi_dmul+0xbc>
 8001c5e:	281f      	cmp	r0, #31
 8001c60:	dd5b      	ble.n	8001d1a <__aeabi_dmul+0x48a>
 8001c62:	221f      	movs	r2, #31
 8001c64:	0023      	movs	r3, r4
 8001c66:	4252      	negs	r2, r2
 8001c68:	1a51      	subs	r1, r2, r1
 8001c6a:	40cb      	lsrs	r3, r1
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	2820      	cmp	r0, #32
 8001c70:	d003      	beq.n	8001c7a <__aeabi_dmul+0x3ea>
 8001c72:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <__aeabi_dmul+0x4d0>)
 8001c74:	4462      	add	r2, ip
 8001c76:	4094      	lsls	r4, r2
 8001c78:	4325      	orrs	r5, r4
 8001c7a:	1e6a      	subs	r2, r5, #1
 8001c7c:	4195      	sbcs	r5, r2
 8001c7e:	002a      	movs	r2, r5
 8001c80:	430a      	orrs	r2, r1
 8001c82:	2107      	movs	r1, #7
 8001c84:	000d      	movs	r5, r1
 8001c86:	2400      	movs	r4, #0
 8001c88:	4015      	ands	r5, r2
 8001c8a:	4211      	tst	r1, r2
 8001c8c:	d05b      	beq.n	8001d46 <__aeabi_dmul+0x4b6>
 8001c8e:	210f      	movs	r1, #15
 8001c90:	2400      	movs	r4, #0
 8001c92:	4011      	ands	r1, r2
 8001c94:	2904      	cmp	r1, #4
 8001c96:	d053      	beq.n	8001d40 <__aeabi_dmul+0x4b0>
 8001c98:	1d11      	adds	r1, r2, #4
 8001c9a:	4291      	cmp	r1, r2
 8001c9c:	4192      	sbcs	r2, r2
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	18a4      	adds	r4, r4, r2
 8001ca2:	000a      	movs	r2, r1
 8001ca4:	0223      	lsls	r3, r4, #8
 8001ca6:	d54b      	bpl.n	8001d40 <__aeabi_dmul+0x4b0>
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2400      	movs	r4, #0
 8001cac:	2500      	movs	r5, #0
 8001cae:	e650      	b.n	8001952 <__aeabi_dmul+0xc2>
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	031b      	lsls	r3, r3, #12
 8001cb4:	421c      	tst	r4, r3
 8001cb6:	d009      	beq.n	8001ccc <__aeabi_dmul+0x43c>
 8001cb8:	421e      	tst	r6, r3
 8001cba:	d107      	bne.n	8001ccc <__aeabi_dmul+0x43c>
 8001cbc:	4333      	orrs	r3, r6
 8001cbe:	031c      	lsls	r4, r3, #12
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	0015      	movs	r5, r2
 8001cc4:	0b24      	lsrs	r4, r4, #12
 8001cc6:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	e642      	b.n	8001952 <__aeabi_dmul+0xc2>
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	0312      	lsls	r2, r2, #12
 8001cd0:	4314      	orrs	r4, r2
 8001cd2:	0324      	lsls	r4, r4, #12
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001cd6:	0b24      	lsrs	r4, r4, #12
 8001cd8:	9701      	str	r7, [sp, #4]
 8001cda:	e63a      	b.n	8001952 <__aeabi_dmul+0xc2>
 8001cdc:	f000 fd50 	bl	8002780 <__clzsi2>
 8001ce0:	0001      	movs	r1, r0
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	3115      	adds	r1, #21
 8001ce6:	3220      	adds	r2, #32
 8001ce8:	291c      	cmp	r1, #28
 8001cea:	dc00      	bgt.n	8001cee <__aeabi_dmul+0x45e>
 8001cec:	e74b      	b.n	8001b86 <__aeabi_dmul+0x2f6>
 8001cee:	0034      	movs	r4, r6
 8001cf0:	3808      	subs	r0, #8
 8001cf2:	2500      	movs	r5, #0
 8001cf4:	4084      	lsls	r4, r0
 8001cf6:	e750      	b.n	8001b9a <__aeabi_dmul+0x30a>
 8001cf8:	f000 fd42 	bl	8002780 <__clzsi2>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	001a      	movs	r2, r3
 8001d00:	3215      	adds	r2, #21
 8001d02:	3020      	adds	r0, #32
 8001d04:	2a1c      	cmp	r2, #28
 8001d06:	dc00      	bgt.n	8001d0a <__aeabi_dmul+0x47a>
 8001d08:	e71e      	b.n	8001b48 <__aeabi_dmul+0x2b8>
 8001d0a:	4656      	mov	r6, sl
 8001d0c:	3b08      	subs	r3, #8
 8001d0e:	2200      	movs	r2, #0
 8001d10:	409e      	lsls	r6, r3
 8001d12:	e723      	b.n	8001b5c <__aeabi_dmul+0x2cc>
 8001d14:	9b00      	ldr	r3, [sp, #0]
 8001d16:	469c      	mov	ip, r3
 8001d18:	e6e6      	b.n	8001ae8 <__aeabi_dmul+0x258>
 8001d1a:	4912      	ldr	r1, [pc, #72]	; (8001d64 <__aeabi_dmul+0x4d4>)
 8001d1c:	0022      	movs	r2, r4
 8001d1e:	4461      	add	r1, ip
 8001d20:	002e      	movs	r6, r5
 8001d22:	408d      	lsls	r5, r1
 8001d24:	408a      	lsls	r2, r1
 8001d26:	40c6      	lsrs	r6, r0
 8001d28:	1e69      	subs	r1, r5, #1
 8001d2a:	418d      	sbcs	r5, r1
 8001d2c:	4332      	orrs	r2, r6
 8001d2e:	432a      	orrs	r2, r5
 8001d30:	40c4      	lsrs	r4, r0
 8001d32:	0753      	lsls	r3, r2, #29
 8001d34:	d0b6      	beq.n	8001ca4 <__aeabi_dmul+0x414>
 8001d36:	210f      	movs	r1, #15
 8001d38:	4011      	ands	r1, r2
 8001d3a:	2904      	cmp	r1, #4
 8001d3c:	d1ac      	bne.n	8001c98 <__aeabi_dmul+0x408>
 8001d3e:	e7b1      	b.n	8001ca4 <__aeabi_dmul+0x414>
 8001d40:	0765      	lsls	r5, r4, #29
 8001d42:	0264      	lsls	r4, r4, #9
 8001d44:	0b24      	lsrs	r4, r4, #12
 8001d46:	08d2      	lsrs	r2, r2, #3
 8001d48:	4315      	orrs	r5, r2
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	e601      	b.n	8001952 <__aeabi_dmul+0xc2>
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	0312      	lsls	r2, r2, #12
 8001d52:	4314      	orrs	r4, r2
 8001d54:	0324      	lsls	r4, r4, #12
 8001d56:	4a01      	ldr	r2, [pc, #4]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001d58:	0b24      	lsrs	r4, r4, #12
 8001d5a:	e5fa      	b.n	8001952 <__aeabi_dmul+0xc2>
 8001d5c:	000007ff 	.word	0x000007ff
 8001d60:	0000043e 	.word	0x0000043e
 8001d64:	0000041e 	.word	0x0000041e

08001d68 <__aeabi_dsub>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	4657      	mov	r7, sl
 8001d6c:	464e      	mov	r6, r9
 8001d6e:	4645      	mov	r5, r8
 8001d70:	46de      	mov	lr, fp
 8001d72:	b5e0      	push	{r5, r6, r7, lr}
 8001d74:	001e      	movs	r6, r3
 8001d76:	0017      	movs	r7, r2
 8001d78:	004a      	lsls	r2, r1, #1
 8001d7a:	030b      	lsls	r3, r1, #12
 8001d7c:	0d52      	lsrs	r2, r2, #21
 8001d7e:	0a5b      	lsrs	r3, r3, #9
 8001d80:	4690      	mov	r8, r2
 8001d82:	0f42      	lsrs	r2, r0, #29
 8001d84:	431a      	orrs	r2, r3
 8001d86:	0fcd      	lsrs	r5, r1, #31
 8001d88:	4ccd      	ldr	r4, [pc, #820]	; (80020c0 <__aeabi_dsub+0x358>)
 8001d8a:	0331      	lsls	r1, r6, #12
 8001d8c:	00c3      	lsls	r3, r0, #3
 8001d8e:	4694      	mov	ip, r2
 8001d90:	0070      	lsls	r0, r6, #1
 8001d92:	0f7a      	lsrs	r2, r7, #29
 8001d94:	0a49      	lsrs	r1, r1, #9
 8001d96:	00ff      	lsls	r7, r7, #3
 8001d98:	469a      	mov	sl, r3
 8001d9a:	46b9      	mov	r9, r7
 8001d9c:	0d40      	lsrs	r0, r0, #21
 8001d9e:	0ff6      	lsrs	r6, r6, #31
 8001da0:	4311      	orrs	r1, r2
 8001da2:	42a0      	cmp	r0, r4
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x40>
 8001da6:	e0b1      	b.n	8001f0c <__aeabi_dsub+0x1a4>
 8001da8:	2201      	movs	r2, #1
 8001daa:	4056      	eors	r6, r2
 8001dac:	46b3      	mov	fp, r6
 8001dae:	42b5      	cmp	r5, r6
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4c>
 8001db2:	e088      	b.n	8001ec6 <__aeabi_dsub+0x15e>
 8001db4:	4642      	mov	r2, r8
 8001db6:	1a12      	subs	r2, r2, r0
 8001db8:	2a00      	cmp	r2, #0
 8001dba:	dc00      	bgt.n	8001dbe <__aeabi_dsub+0x56>
 8001dbc:	e0ae      	b.n	8001f1c <__aeabi_dsub+0x1b4>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x5c>
 8001dc2:	e0c1      	b.n	8001f48 <__aeabi_dsub+0x1e0>
 8001dc4:	48be      	ldr	r0, [pc, #760]	; (80020c0 <__aeabi_dsub+0x358>)
 8001dc6:	4580      	cmp	r8, r0
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x64>
 8001dca:	e151      	b.n	8002070 <__aeabi_dsub+0x308>
 8001dcc:	2080      	movs	r0, #128	; 0x80
 8001dce:	0400      	lsls	r0, r0, #16
 8001dd0:	4301      	orrs	r1, r0
 8001dd2:	2a38      	cmp	r2, #56	; 0x38
 8001dd4:	dd00      	ble.n	8001dd8 <__aeabi_dsub+0x70>
 8001dd6:	e17b      	b.n	80020d0 <__aeabi_dsub+0x368>
 8001dd8:	2a1f      	cmp	r2, #31
 8001dda:	dd00      	ble.n	8001dde <__aeabi_dsub+0x76>
 8001ddc:	e1ee      	b.n	80021bc <__aeabi_dsub+0x454>
 8001dde:	2020      	movs	r0, #32
 8001de0:	003e      	movs	r6, r7
 8001de2:	1a80      	subs	r0, r0, r2
 8001de4:	000c      	movs	r4, r1
 8001de6:	40d6      	lsrs	r6, r2
 8001de8:	40d1      	lsrs	r1, r2
 8001dea:	4087      	lsls	r7, r0
 8001dec:	4662      	mov	r2, ip
 8001dee:	4084      	lsls	r4, r0
 8001df0:	1a52      	subs	r2, r2, r1
 8001df2:	1e78      	subs	r0, r7, #1
 8001df4:	4187      	sbcs	r7, r0
 8001df6:	4694      	mov	ip, r2
 8001df8:	4334      	orrs	r4, r6
 8001dfa:	4327      	orrs	r7, r4
 8001dfc:	1bdc      	subs	r4, r3, r7
 8001dfe:	42a3      	cmp	r3, r4
 8001e00:	419b      	sbcs	r3, r3
 8001e02:	4662      	mov	r2, ip
 8001e04:	425b      	negs	r3, r3
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4699      	mov	r9, r3
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	d400      	bmi.n	8001e12 <__aeabi_dsub+0xaa>
 8001e10:	e118      	b.n	8002044 <__aeabi_dsub+0x2dc>
 8001e12:	464b      	mov	r3, r9
 8001e14:	0258      	lsls	r0, r3, #9
 8001e16:	0a43      	lsrs	r3, r0, #9
 8001e18:	4699      	mov	r9, r3
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0xba>
 8001e20:	e137      	b.n	8002092 <__aeabi_dsub+0x32a>
 8001e22:	4648      	mov	r0, r9
 8001e24:	f000 fcac 	bl	8002780 <__clzsi2>
 8001e28:	0001      	movs	r1, r0
 8001e2a:	3908      	subs	r1, #8
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	0022      	movs	r2, r4
 8001e30:	4648      	mov	r0, r9
 8001e32:	1a5b      	subs	r3, r3, r1
 8001e34:	40da      	lsrs	r2, r3
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408c      	lsls	r4, r1
 8001e3a:	4643      	mov	r3, r8
 8001e3c:	4310      	orrs	r0, r2
 8001e3e:	4588      	cmp	r8, r1
 8001e40:	dd00      	ble.n	8001e44 <__aeabi_dsub+0xdc>
 8001e42:	e136      	b.n	80020b2 <__aeabi_dsub+0x34a>
 8001e44:	1ac9      	subs	r1, r1, r3
 8001e46:	1c4b      	adds	r3, r1, #1
 8001e48:	2b1f      	cmp	r3, #31
 8001e4a:	dd00      	ble.n	8001e4e <__aeabi_dsub+0xe6>
 8001e4c:	e0ea      	b.n	8002024 <__aeabi_dsub+0x2bc>
 8001e4e:	2220      	movs	r2, #32
 8001e50:	0026      	movs	r6, r4
 8001e52:	1ad2      	subs	r2, r2, r3
 8001e54:	0001      	movs	r1, r0
 8001e56:	4094      	lsls	r4, r2
 8001e58:	40de      	lsrs	r6, r3
 8001e5a:	40d8      	lsrs	r0, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	4091      	lsls	r1, r2
 8001e60:	1e62      	subs	r2, r4, #1
 8001e62:	4194      	sbcs	r4, r2
 8001e64:	4681      	mov	r9, r0
 8001e66:	4698      	mov	r8, r3
 8001e68:	4331      	orrs	r1, r6
 8001e6a:	430c      	orrs	r4, r1
 8001e6c:	0763      	lsls	r3, r4, #29
 8001e6e:	d009      	beq.n	8001e84 <__aeabi_dsub+0x11c>
 8001e70:	230f      	movs	r3, #15
 8001e72:	4023      	ands	r3, r4
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d005      	beq.n	8001e84 <__aeabi_dsub+0x11c>
 8001e78:	1d23      	adds	r3, r4, #4
 8001e7a:	42a3      	cmp	r3, r4
 8001e7c:	41a4      	sbcs	r4, r4
 8001e7e:	4264      	negs	r4, r4
 8001e80:	44a1      	add	r9, r4
 8001e82:	001c      	movs	r4, r3
 8001e84:	464b      	mov	r3, r9
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	d400      	bmi.n	8001e8c <__aeabi_dsub+0x124>
 8001e8a:	e0de      	b.n	800204a <__aeabi_dsub+0x2e2>
 8001e8c:	4641      	mov	r1, r8
 8001e8e:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <__aeabi_dsub+0x358>)
 8001e90:	3101      	adds	r1, #1
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x130>
 8001e96:	e0e7      	b.n	8002068 <__aeabi_dsub+0x300>
 8001e98:	464b      	mov	r3, r9
 8001e9a:	488a      	ldr	r0, [pc, #552]	; (80020c4 <__aeabi_dsub+0x35c>)
 8001e9c:	08e4      	lsrs	r4, r4, #3
 8001e9e:	4003      	ands	r3, r0
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	0549      	lsls	r1, r1, #21
 8001ea4:	075b      	lsls	r3, r3, #29
 8001ea6:	0240      	lsls	r0, r0, #9
 8001ea8:	4323      	orrs	r3, r4
 8001eaa:	0d4a      	lsrs	r2, r1, #21
 8001eac:	0b04      	lsrs	r4, r0, #12
 8001eae:	0512      	lsls	r2, r2, #20
 8001eb0:	07ed      	lsls	r5, r5, #31
 8001eb2:	4322      	orrs	r2, r4
 8001eb4:	432a      	orrs	r2, r5
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	0011      	movs	r1, r2
 8001eba:	bcf0      	pop	{r4, r5, r6, r7}
 8001ebc:	46bb      	mov	fp, r7
 8001ebe:	46b2      	mov	sl, r6
 8001ec0:	46a9      	mov	r9, r5
 8001ec2:	46a0      	mov	r8, r4
 8001ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ec6:	4642      	mov	r2, r8
 8001ec8:	1a12      	subs	r2, r2, r0
 8001eca:	2a00      	cmp	r2, #0
 8001ecc:	dd52      	ble.n	8001f74 <__aeabi_dsub+0x20c>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dsub+0x16c>
 8001ed2:	e09c      	b.n	800200e <__aeabi_dsub+0x2a6>
 8001ed4:	45a0      	cmp	r8, r4
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x172>
 8001ed8:	e0ca      	b.n	8002070 <__aeabi_dsub+0x308>
 8001eda:	2080      	movs	r0, #128	; 0x80
 8001edc:	0400      	lsls	r0, r0, #16
 8001ede:	4301      	orrs	r1, r0
 8001ee0:	2a38      	cmp	r2, #56	; 0x38
 8001ee2:	dd00      	ble.n	8001ee6 <__aeabi_dsub+0x17e>
 8001ee4:	e149      	b.n	800217a <__aeabi_dsub+0x412>
 8001ee6:	2a1f      	cmp	r2, #31
 8001ee8:	dc00      	bgt.n	8001eec <__aeabi_dsub+0x184>
 8001eea:	e197      	b.n	800221c <__aeabi_dsub+0x4b4>
 8001eec:	0010      	movs	r0, r2
 8001eee:	000e      	movs	r6, r1
 8001ef0:	3820      	subs	r0, #32
 8001ef2:	40c6      	lsrs	r6, r0
 8001ef4:	2a20      	cmp	r2, #32
 8001ef6:	d004      	beq.n	8001f02 <__aeabi_dsub+0x19a>
 8001ef8:	2040      	movs	r0, #64	; 0x40
 8001efa:	1a82      	subs	r2, r0, r2
 8001efc:	4091      	lsls	r1, r2
 8001efe:	430f      	orrs	r7, r1
 8001f00:	46b9      	mov	r9, r7
 8001f02:	464c      	mov	r4, r9
 8001f04:	1e62      	subs	r2, r4, #1
 8001f06:	4194      	sbcs	r4, r2
 8001f08:	4334      	orrs	r4, r6
 8001f0a:	e13a      	b.n	8002182 <__aeabi_dsub+0x41a>
 8001f0c:	000a      	movs	r2, r1
 8001f0e:	433a      	orrs	r2, r7
 8001f10:	d028      	beq.n	8001f64 <__aeabi_dsub+0x1fc>
 8001f12:	46b3      	mov	fp, r6
 8001f14:	42b5      	cmp	r5, r6
 8001f16:	d02b      	beq.n	8001f70 <__aeabi_dsub+0x208>
 8001f18:	4a6b      	ldr	r2, [pc, #428]	; (80020c8 <__aeabi_dsub+0x360>)
 8001f1a:	4442      	add	r2, r8
 8001f1c:	2a00      	cmp	r2, #0
 8001f1e:	d05d      	beq.n	8001fdc <__aeabi_dsub+0x274>
 8001f20:	4642      	mov	r2, r8
 8001f22:	4644      	mov	r4, r8
 8001f24:	1a82      	subs	r2, r0, r2
 8001f26:	2c00      	cmp	r4, #0
 8001f28:	d000      	beq.n	8001f2c <__aeabi_dsub+0x1c4>
 8001f2a:	e0f5      	b.n	8002118 <__aeabi_dsub+0x3b0>
 8001f2c:	4665      	mov	r5, ip
 8001f2e:	431d      	orrs	r5, r3
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x1cc>
 8001f32:	e19c      	b.n	800226e <__aeabi_dsub+0x506>
 8001f34:	1e55      	subs	r5, r2, #1
 8001f36:	2a01      	cmp	r2, #1
 8001f38:	d100      	bne.n	8001f3c <__aeabi_dsub+0x1d4>
 8001f3a:	e1fb      	b.n	8002334 <__aeabi_dsub+0x5cc>
 8001f3c:	4c60      	ldr	r4, [pc, #384]	; (80020c0 <__aeabi_dsub+0x358>)
 8001f3e:	42a2      	cmp	r2, r4
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x1dc>
 8001f42:	e1bd      	b.n	80022c0 <__aeabi_dsub+0x558>
 8001f44:	002a      	movs	r2, r5
 8001f46:	e0f0      	b.n	800212a <__aeabi_dsub+0x3c2>
 8001f48:	0008      	movs	r0, r1
 8001f4a:	4338      	orrs	r0, r7
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x1e8>
 8001f4e:	e0c3      	b.n	80020d8 <__aeabi_dsub+0x370>
 8001f50:	1e50      	subs	r0, r2, #1
 8001f52:	2a01      	cmp	r2, #1
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x1f0>
 8001f56:	e1a8      	b.n	80022aa <__aeabi_dsub+0x542>
 8001f58:	4c59      	ldr	r4, [pc, #356]	; (80020c0 <__aeabi_dsub+0x358>)
 8001f5a:	42a2      	cmp	r2, r4
 8001f5c:	d100      	bne.n	8001f60 <__aeabi_dsub+0x1f8>
 8001f5e:	e087      	b.n	8002070 <__aeabi_dsub+0x308>
 8001f60:	0002      	movs	r2, r0
 8001f62:	e736      	b.n	8001dd2 <__aeabi_dsub+0x6a>
 8001f64:	2201      	movs	r2, #1
 8001f66:	4056      	eors	r6, r2
 8001f68:	46b3      	mov	fp, r6
 8001f6a:	42b5      	cmp	r5, r6
 8001f6c:	d000      	beq.n	8001f70 <__aeabi_dsub+0x208>
 8001f6e:	e721      	b.n	8001db4 <__aeabi_dsub+0x4c>
 8001f70:	4a55      	ldr	r2, [pc, #340]	; (80020c8 <__aeabi_dsub+0x360>)
 8001f72:	4442      	add	r2, r8
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x212>
 8001f78:	e0b5      	b.n	80020e6 <__aeabi_dsub+0x37e>
 8001f7a:	4642      	mov	r2, r8
 8001f7c:	4644      	mov	r4, r8
 8001f7e:	1a82      	subs	r2, r0, r2
 8001f80:	2c00      	cmp	r4, #0
 8001f82:	d100      	bne.n	8001f86 <__aeabi_dsub+0x21e>
 8001f84:	e138      	b.n	80021f8 <__aeabi_dsub+0x490>
 8001f86:	4e4e      	ldr	r6, [pc, #312]	; (80020c0 <__aeabi_dsub+0x358>)
 8001f88:	42b0      	cmp	r0, r6
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x226>
 8001f8c:	e1de      	b.n	800234c <__aeabi_dsub+0x5e4>
 8001f8e:	2680      	movs	r6, #128	; 0x80
 8001f90:	4664      	mov	r4, ip
 8001f92:	0436      	lsls	r6, r6, #16
 8001f94:	4334      	orrs	r4, r6
 8001f96:	46a4      	mov	ip, r4
 8001f98:	2a38      	cmp	r2, #56	; 0x38
 8001f9a:	dd00      	ble.n	8001f9e <__aeabi_dsub+0x236>
 8001f9c:	e196      	b.n	80022cc <__aeabi_dsub+0x564>
 8001f9e:	2a1f      	cmp	r2, #31
 8001fa0:	dd00      	ble.n	8001fa4 <__aeabi_dsub+0x23c>
 8001fa2:	e224      	b.n	80023ee <__aeabi_dsub+0x686>
 8001fa4:	2620      	movs	r6, #32
 8001fa6:	1ab4      	subs	r4, r6, r2
 8001fa8:	46a2      	mov	sl, r4
 8001faa:	4664      	mov	r4, ip
 8001fac:	4656      	mov	r6, sl
 8001fae:	40b4      	lsls	r4, r6
 8001fb0:	46a1      	mov	r9, r4
 8001fb2:	001c      	movs	r4, r3
 8001fb4:	464e      	mov	r6, r9
 8001fb6:	40d4      	lsrs	r4, r2
 8001fb8:	4326      	orrs	r6, r4
 8001fba:	0034      	movs	r4, r6
 8001fbc:	4656      	mov	r6, sl
 8001fbe:	40b3      	lsls	r3, r6
 8001fc0:	1e5e      	subs	r6, r3, #1
 8001fc2:	41b3      	sbcs	r3, r6
 8001fc4:	431c      	orrs	r4, r3
 8001fc6:	4663      	mov	r3, ip
 8001fc8:	40d3      	lsrs	r3, r2
 8001fca:	18c9      	adds	r1, r1, r3
 8001fcc:	19e4      	adds	r4, r4, r7
 8001fce:	42bc      	cmp	r4, r7
 8001fd0:	41bf      	sbcs	r7, r7
 8001fd2:	427f      	negs	r7, r7
 8001fd4:	46b9      	mov	r9, r7
 8001fd6:	4680      	mov	r8, r0
 8001fd8:	4489      	add	r9, r1
 8001fda:	e0d8      	b.n	800218e <__aeabi_dsub+0x426>
 8001fdc:	4640      	mov	r0, r8
 8001fde:	4c3b      	ldr	r4, [pc, #236]	; (80020cc <__aeabi_dsub+0x364>)
 8001fe0:	3001      	adds	r0, #1
 8001fe2:	4220      	tst	r0, r4
 8001fe4:	d000      	beq.n	8001fe8 <__aeabi_dsub+0x280>
 8001fe6:	e0b4      	b.n	8002152 <__aeabi_dsub+0x3ea>
 8001fe8:	4640      	mov	r0, r8
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d000      	beq.n	8001ff0 <__aeabi_dsub+0x288>
 8001fee:	e144      	b.n	800227a <__aeabi_dsub+0x512>
 8001ff0:	4660      	mov	r0, ip
 8001ff2:	4318      	orrs	r0, r3
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_dsub+0x290>
 8001ff6:	e190      	b.n	800231a <__aeabi_dsub+0x5b2>
 8001ff8:	0008      	movs	r0, r1
 8001ffa:	4338      	orrs	r0, r7
 8001ffc:	d000      	beq.n	8002000 <__aeabi_dsub+0x298>
 8001ffe:	e1aa      	b.n	8002356 <__aeabi_dsub+0x5ee>
 8002000:	4661      	mov	r1, ip
 8002002:	08db      	lsrs	r3, r3, #3
 8002004:	0749      	lsls	r1, r1, #29
 8002006:	430b      	orrs	r3, r1
 8002008:	4661      	mov	r1, ip
 800200a:	08cc      	lsrs	r4, r1, #3
 800200c:	e027      	b.n	800205e <__aeabi_dsub+0x2f6>
 800200e:	0008      	movs	r0, r1
 8002010:	4338      	orrs	r0, r7
 8002012:	d061      	beq.n	80020d8 <__aeabi_dsub+0x370>
 8002014:	1e50      	subs	r0, r2, #1
 8002016:	2a01      	cmp	r2, #1
 8002018:	d100      	bne.n	800201c <__aeabi_dsub+0x2b4>
 800201a:	e139      	b.n	8002290 <__aeabi_dsub+0x528>
 800201c:	42a2      	cmp	r2, r4
 800201e:	d027      	beq.n	8002070 <__aeabi_dsub+0x308>
 8002020:	0002      	movs	r2, r0
 8002022:	e75d      	b.n	8001ee0 <__aeabi_dsub+0x178>
 8002024:	0002      	movs	r2, r0
 8002026:	391f      	subs	r1, #31
 8002028:	40ca      	lsrs	r2, r1
 800202a:	0011      	movs	r1, r2
 800202c:	2b20      	cmp	r3, #32
 800202e:	d003      	beq.n	8002038 <__aeabi_dsub+0x2d0>
 8002030:	2240      	movs	r2, #64	; 0x40
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	4098      	lsls	r0, r3
 8002036:	4304      	orrs	r4, r0
 8002038:	1e63      	subs	r3, r4, #1
 800203a:	419c      	sbcs	r4, r3
 800203c:	2300      	movs	r3, #0
 800203e:	4699      	mov	r9, r3
 8002040:	4698      	mov	r8, r3
 8002042:	430c      	orrs	r4, r1
 8002044:	0763      	lsls	r3, r4, #29
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x2e2>
 8002048:	e712      	b.n	8001e70 <__aeabi_dsub+0x108>
 800204a:	464b      	mov	r3, r9
 800204c:	464a      	mov	r2, r9
 800204e:	08e4      	lsrs	r4, r4, #3
 8002050:	075b      	lsls	r3, r3, #29
 8002052:	4323      	orrs	r3, r4
 8002054:	08d4      	lsrs	r4, r2, #3
 8002056:	4642      	mov	r2, r8
 8002058:	4919      	ldr	r1, [pc, #100]	; (80020c0 <__aeabi_dsub+0x358>)
 800205a:	428a      	cmp	r2, r1
 800205c:	d00e      	beq.n	800207c <__aeabi_dsub+0x314>
 800205e:	0324      	lsls	r4, r4, #12
 8002060:	0552      	lsls	r2, r2, #21
 8002062:	0b24      	lsrs	r4, r4, #12
 8002064:	0d52      	lsrs	r2, r2, #21
 8002066:	e722      	b.n	8001eae <__aeabi_dsub+0x146>
 8002068:	000a      	movs	r2, r1
 800206a:	2400      	movs	r4, #0
 800206c:	2300      	movs	r3, #0
 800206e:	e71e      	b.n	8001eae <__aeabi_dsub+0x146>
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	4662      	mov	r2, ip
 8002074:	0752      	lsls	r2, r2, #29
 8002076:	4313      	orrs	r3, r2
 8002078:	4662      	mov	r2, ip
 800207a:	08d4      	lsrs	r4, r2, #3
 800207c:	001a      	movs	r2, r3
 800207e:	4322      	orrs	r2, r4
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x31c>
 8002082:	e1fc      	b.n	800247e <__aeabi_dsub+0x716>
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	0312      	lsls	r2, r2, #12
 8002088:	4314      	orrs	r4, r2
 800208a:	0324      	lsls	r4, r4, #12
 800208c:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <__aeabi_dsub+0x358>)
 800208e:	0b24      	lsrs	r4, r4, #12
 8002090:	e70d      	b.n	8001eae <__aeabi_dsub+0x146>
 8002092:	0020      	movs	r0, r4
 8002094:	f000 fb74 	bl	8002780 <__clzsi2>
 8002098:	0001      	movs	r1, r0
 800209a:	3118      	adds	r1, #24
 800209c:	291f      	cmp	r1, #31
 800209e:	dc00      	bgt.n	80020a2 <__aeabi_dsub+0x33a>
 80020a0:	e6c4      	b.n	8001e2c <__aeabi_dsub+0xc4>
 80020a2:	3808      	subs	r0, #8
 80020a4:	4084      	lsls	r4, r0
 80020a6:	4643      	mov	r3, r8
 80020a8:	0020      	movs	r0, r4
 80020aa:	2400      	movs	r4, #0
 80020ac:	4588      	cmp	r8, r1
 80020ae:	dc00      	bgt.n	80020b2 <__aeabi_dsub+0x34a>
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_dsub+0xdc>
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <__aeabi_dsub+0x35c>)
 80020b4:	1a5b      	subs	r3, r3, r1
 80020b6:	4010      	ands	r0, r2
 80020b8:	4698      	mov	r8, r3
 80020ba:	4681      	mov	r9, r0
 80020bc:	e6d6      	b.n	8001e6c <__aeabi_dsub+0x104>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	000007ff 	.word	0x000007ff
 80020c4:	ff7fffff 	.word	0xff7fffff
 80020c8:	fffff801 	.word	0xfffff801
 80020cc:	000007fe 	.word	0x000007fe
 80020d0:	430f      	orrs	r7, r1
 80020d2:	1e7a      	subs	r2, r7, #1
 80020d4:	4197      	sbcs	r7, r2
 80020d6:	e691      	b.n	8001dfc <__aeabi_dsub+0x94>
 80020d8:	4661      	mov	r1, ip
 80020da:	08db      	lsrs	r3, r3, #3
 80020dc:	0749      	lsls	r1, r1, #29
 80020de:	430b      	orrs	r3, r1
 80020e0:	4661      	mov	r1, ip
 80020e2:	08cc      	lsrs	r4, r1, #3
 80020e4:	e7b8      	b.n	8002058 <__aeabi_dsub+0x2f0>
 80020e6:	4640      	mov	r0, r8
 80020e8:	4cd3      	ldr	r4, [pc, #844]	; (8002438 <__aeabi_dsub+0x6d0>)
 80020ea:	3001      	adds	r0, #1
 80020ec:	4220      	tst	r0, r4
 80020ee:	d000      	beq.n	80020f2 <__aeabi_dsub+0x38a>
 80020f0:	e0a2      	b.n	8002238 <__aeabi_dsub+0x4d0>
 80020f2:	4640      	mov	r0, r8
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d000      	beq.n	80020fa <__aeabi_dsub+0x392>
 80020f8:	e101      	b.n	80022fe <__aeabi_dsub+0x596>
 80020fa:	4660      	mov	r0, ip
 80020fc:	4318      	orrs	r0, r3
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x39a>
 8002100:	e15e      	b.n	80023c0 <__aeabi_dsub+0x658>
 8002102:	0008      	movs	r0, r1
 8002104:	4338      	orrs	r0, r7
 8002106:	d000      	beq.n	800210a <__aeabi_dsub+0x3a2>
 8002108:	e15f      	b.n	80023ca <__aeabi_dsub+0x662>
 800210a:	4661      	mov	r1, ip
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	0749      	lsls	r1, r1, #29
 8002110:	430b      	orrs	r3, r1
 8002112:	4661      	mov	r1, ip
 8002114:	08cc      	lsrs	r4, r1, #3
 8002116:	e7a2      	b.n	800205e <__aeabi_dsub+0x2f6>
 8002118:	4dc8      	ldr	r5, [pc, #800]	; (800243c <__aeabi_dsub+0x6d4>)
 800211a:	42a8      	cmp	r0, r5
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x3b8>
 800211e:	e0cf      	b.n	80022c0 <__aeabi_dsub+0x558>
 8002120:	2580      	movs	r5, #128	; 0x80
 8002122:	4664      	mov	r4, ip
 8002124:	042d      	lsls	r5, r5, #16
 8002126:	432c      	orrs	r4, r5
 8002128:	46a4      	mov	ip, r4
 800212a:	2a38      	cmp	r2, #56	; 0x38
 800212c:	dc56      	bgt.n	80021dc <__aeabi_dsub+0x474>
 800212e:	2a1f      	cmp	r2, #31
 8002130:	dd00      	ble.n	8002134 <__aeabi_dsub+0x3cc>
 8002132:	e0d1      	b.n	80022d8 <__aeabi_dsub+0x570>
 8002134:	2520      	movs	r5, #32
 8002136:	001e      	movs	r6, r3
 8002138:	1aad      	subs	r5, r5, r2
 800213a:	4664      	mov	r4, ip
 800213c:	40ab      	lsls	r3, r5
 800213e:	40ac      	lsls	r4, r5
 8002140:	40d6      	lsrs	r6, r2
 8002142:	1e5d      	subs	r5, r3, #1
 8002144:	41ab      	sbcs	r3, r5
 8002146:	4334      	orrs	r4, r6
 8002148:	4323      	orrs	r3, r4
 800214a:	4664      	mov	r4, ip
 800214c:	40d4      	lsrs	r4, r2
 800214e:	1b09      	subs	r1, r1, r4
 8002150:	e049      	b.n	80021e6 <__aeabi_dsub+0x47e>
 8002152:	4660      	mov	r0, ip
 8002154:	1bdc      	subs	r4, r3, r7
 8002156:	1a46      	subs	r6, r0, r1
 8002158:	42a3      	cmp	r3, r4
 800215a:	4180      	sbcs	r0, r0
 800215c:	4240      	negs	r0, r0
 800215e:	4681      	mov	r9, r0
 8002160:	0030      	movs	r0, r6
 8002162:	464e      	mov	r6, r9
 8002164:	1b80      	subs	r0, r0, r6
 8002166:	4681      	mov	r9, r0
 8002168:	0200      	lsls	r0, r0, #8
 800216a:	d476      	bmi.n	800225a <__aeabi_dsub+0x4f2>
 800216c:	464b      	mov	r3, r9
 800216e:	4323      	orrs	r3, r4
 8002170:	d000      	beq.n	8002174 <__aeabi_dsub+0x40c>
 8002172:	e652      	b.n	8001e1a <__aeabi_dsub+0xb2>
 8002174:	2400      	movs	r4, #0
 8002176:	2500      	movs	r5, #0
 8002178:	e771      	b.n	800205e <__aeabi_dsub+0x2f6>
 800217a:	4339      	orrs	r1, r7
 800217c:	000c      	movs	r4, r1
 800217e:	1e62      	subs	r2, r4, #1
 8002180:	4194      	sbcs	r4, r2
 8002182:	18e4      	adds	r4, r4, r3
 8002184:	429c      	cmp	r4, r3
 8002186:	419b      	sbcs	r3, r3
 8002188:	425b      	negs	r3, r3
 800218a:	4463      	add	r3, ip
 800218c:	4699      	mov	r9, r3
 800218e:	464b      	mov	r3, r9
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	d400      	bmi.n	8002196 <__aeabi_dsub+0x42e>
 8002194:	e756      	b.n	8002044 <__aeabi_dsub+0x2dc>
 8002196:	2301      	movs	r3, #1
 8002198:	469c      	mov	ip, r3
 800219a:	4ba8      	ldr	r3, [pc, #672]	; (800243c <__aeabi_dsub+0x6d4>)
 800219c:	44e0      	add	r8, ip
 800219e:	4598      	cmp	r8, r3
 80021a0:	d038      	beq.n	8002214 <__aeabi_dsub+0x4ac>
 80021a2:	464b      	mov	r3, r9
 80021a4:	48a6      	ldr	r0, [pc, #664]	; (8002440 <__aeabi_dsub+0x6d8>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	4003      	ands	r3, r0
 80021aa:	0018      	movs	r0, r3
 80021ac:	0863      	lsrs	r3, r4, #1
 80021ae:	4014      	ands	r4, r2
 80021b0:	431c      	orrs	r4, r3
 80021b2:	07c3      	lsls	r3, r0, #31
 80021b4:	431c      	orrs	r4, r3
 80021b6:	0843      	lsrs	r3, r0, #1
 80021b8:	4699      	mov	r9, r3
 80021ba:	e657      	b.n	8001e6c <__aeabi_dsub+0x104>
 80021bc:	0010      	movs	r0, r2
 80021be:	000e      	movs	r6, r1
 80021c0:	3820      	subs	r0, #32
 80021c2:	40c6      	lsrs	r6, r0
 80021c4:	2a20      	cmp	r2, #32
 80021c6:	d004      	beq.n	80021d2 <__aeabi_dsub+0x46a>
 80021c8:	2040      	movs	r0, #64	; 0x40
 80021ca:	1a82      	subs	r2, r0, r2
 80021cc:	4091      	lsls	r1, r2
 80021ce:	430f      	orrs	r7, r1
 80021d0:	46b9      	mov	r9, r7
 80021d2:	464f      	mov	r7, r9
 80021d4:	1e7a      	subs	r2, r7, #1
 80021d6:	4197      	sbcs	r7, r2
 80021d8:	4337      	orrs	r7, r6
 80021da:	e60f      	b.n	8001dfc <__aeabi_dsub+0x94>
 80021dc:	4662      	mov	r2, ip
 80021de:	431a      	orrs	r2, r3
 80021e0:	0013      	movs	r3, r2
 80021e2:	1e5a      	subs	r2, r3, #1
 80021e4:	4193      	sbcs	r3, r2
 80021e6:	1afc      	subs	r4, r7, r3
 80021e8:	42a7      	cmp	r7, r4
 80021ea:	41bf      	sbcs	r7, r7
 80021ec:	427f      	negs	r7, r7
 80021ee:	1bcb      	subs	r3, r1, r7
 80021f0:	4699      	mov	r9, r3
 80021f2:	465d      	mov	r5, fp
 80021f4:	4680      	mov	r8, r0
 80021f6:	e608      	b.n	8001e0a <__aeabi_dsub+0xa2>
 80021f8:	4666      	mov	r6, ip
 80021fa:	431e      	orrs	r6, r3
 80021fc:	d100      	bne.n	8002200 <__aeabi_dsub+0x498>
 80021fe:	e0be      	b.n	800237e <__aeabi_dsub+0x616>
 8002200:	1e56      	subs	r6, r2, #1
 8002202:	2a01      	cmp	r2, #1
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x4a0>
 8002206:	e109      	b.n	800241c <__aeabi_dsub+0x6b4>
 8002208:	4c8c      	ldr	r4, [pc, #560]	; (800243c <__aeabi_dsub+0x6d4>)
 800220a:	42a2      	cmp	r2, r4
 800220c:	d100      	bne.n	8002210 <__aeabi_dsub+0x4a8>
 800220e:	e119      	b.n	8002444 <__aeabi_dsub+0x6dc>
 8002210:	0032      	movs	r2, r6
 8002212:	e6c1      	b.n	8001f98 <__aeabi_dsub+0x230>
 8002214:	4642      	mov	r2, r8
 8002216:	2400      	movs	r4, #0
 8002218:	2300      	movs	r3, #0
 800221a:	e648      	b.n	8001eae <__aeabi_dsub+0x146>
 800221c:	2020      	movs	r0, #32
 800221e:	000c      	movs	r4, r1
 8002220:	1a80      	subs	r0, r0, r2
 8002222:	003e      	movs	r6, r7
 8002224:	4087      	lsls	r7, r0
 8002226:	4084      	lsls	r4, r0
 8002228:	40d6      	lsrs	r6, r2
 800222a:	1e78      	subs	r0, r7, #1
 800222c:	4187      	sbcs	r7, r0
 800222e:	40d1      	lsrs	r1, r2
 8002230:	4334      	orrs	r4, r6
 8002232:	433c      	orrs	r4, r7
 8002234:	448c      	add	ip, r1
 8002236:	e7a4      	b.n	8002182 <__aeabi_dsub+0x41a>
 8002238:	4a80      	ldr	r2, [pc, #512]	; (800243c <__aeabi_dsub+0x6d4>)
 800223a:	4290      	cmp	r0, r2
 800223c:	d100      	bne.n	8002240 <__aeabi_dsub+0x4d8>
 800223e:	e0e9      	b.n	8002414 <__aeabi_dsub+0x6ac>
 8002240:	19df      	adds	r7, r3, r7
 8002242:	429f      	cmp	r7, r3
 8002244:	419b      	sbcs	r3, r3
 8002246:	4461      	add	r1, ip
 8002248:	425b      	negs	r3, r3
 800224a:	18c9      	adds	r1, r1, r3
 800224c:	07cc      	lsls	r4, r1, #31
 800224e:	087f      	lsrs	r7, r7, #1
 8002250:	084b      	lsrs	r3, r1, #1
 8002252:	4699      	mov	r9, r3
 8002254:	4680      	mov	r8, r0
 8002256:	433c      	orrs	r4, r7
 8002258:	e6f4      	b.n	8002044 <__aeabi_dsub+0x2dc>
 800225a:	1afc      	subs	r4, r7, r3
 800225c:	42a7      	cmp	r7, r4
 800225e:	41bf      	sbcs	r7, r7
 8002260:	4663      	mov	r3, ip
 8002262:	427f      	negs	r7, r7
 8002264:	1ac9      	subs	r1, r1, r3
 8002266:	1bcb      	subs	r3, r1, r7
 8002268:	4699      	mov	r9, r3
 800226a:	465d      	mov	r5, fp
 800226c:	e5d5      	b.n	8001e1a <__aeabi_dsub+0xb2>
 800226e:	08ff      	lsrs	r7, r7, #3
 8002270:	074b      	lsls	r3, r1, #29
 8002272:	465d      	mov	r5, fp
 8002274:	433b      	orrs	r3, r7
 8002276:	08cc      	lsrs	r4, r1, #3
 8002278:	e6ee      	b.n	8002058 <__aeabi_dsub+0x2f0>
 800227a:	4662      	mov	r2, ip
 800227c:	431a      	orrs	r2, r3
 800227e:	d000      	beq.n	8002282 <__aeabi_dsub+0x51a>
 8002280:	e082      	b.n	8002388 <__aeabi_dsub+0x620>
 8002282:	000b      	movs	r3, r1
 8002284:	433b      	orrs	r3, r7
 8002286:	d11b      	bne.n	80022c0 <__aeabi_dsub+0x558>
 8002288:	2480      	movs	r4, #128	; 0x80
 800228a:	2500      	movs	r5, #0
 800228c:	0324      	lsls	r4, r4, #12
 800228e:	e6f9      	b.n	8002084 <__aeabi_dsub+0x31c>
 8002290:	19dc      	adds	r4, r3, r7
 8002292:	429c      	cmp	r4, r3
 8002294:	419b      	sbcs	r3, r3
 8002296:	4461      	add	r1, ip
 8002298:	4689      	mov	r9, r1
 800229a:	425b      	negs	r3, r3
 800229c:	4499      	add	r9, r3
 800229e:	464b      	mov	r3, r9
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	d444      	bmi.n	800232e <__aeabi_dsub+0x5c6>
 80022a4:	2301      	movs	r3, #1
 80022a6:	4698      	mov	r8, r3
 80022a8:	e6cc      	b.n	8002044 <__aeabi_dsub+0x2dc>
 80022aa:	1bdc      	subs	r4, r3, r7
 80022ac:	4662      	mov	r2, ip
 80022ae:	42a3      	cmp	r3, r4
 80022b0:	419b      	sbcs	r3, r3
 80022b2:	1a51      	subs	r1, r2, r1
 80022b4:	425b      	negs	r3, r3
 80022b6:	1acb      	subs	r3, r1, r3
 80022b8:	4699      	mov	r9, r3
 80022ba:	2301      	movs	r3, #1
 80022bc:	4698      	mov	r8, r3
 80022be:	e5a4      	b.n	8001e0a <__aeabi_dsub+0xa2>
 80022c0:	08ff      	lsrs	r7, r7, #3
 80022c2:	074b      	lsls	r3, r1, #29
 80022c4:	465d      	mov	r5, fp
 80022c6:	433b      	orrs	r3, r7
 80022c8:	08cc      	lsrs	r4, r1, #3
 80022ca:	e6d7      	b.n	800207c <__aeabi_dsub+0x314>
 80022cc:	4662      	mov	r2, ip
 80022ce:	431a      	orrs	r2, r3
 80022d0:	0014      	movs	r4, r2
 80022d2:	1e63      	subs	r3, r4, #1
 80022d4:	419c      	sbcs	r4, r3
 80022d6:	e679      	b.n	8001fcc <__aeabi_dsub+0x264>
 80022d8:	0015      	movs	r5, r2
 80022da:	4664      	mov	r4, ip
 80022dc:	3d20      	subs	r5, #32
 80022de:	40ec      	lsrs	r4, r5
 80022e0:	46a0      	mov	r8, r4
 80022e2:	2a20      	cmp	r2, #32
 80022e4:	d005      	beq.n	80022f2 <__aeabi_dsub+0x58a>
 80022e6:	2540      	movs	r5, #64	; 0x40
 80022e8:	4664      	mov	r4, ip
 80022ea:	1aaa      	subs	r2, r5, r2
 80022ec:	4094      	lsls	r4, r2
 80022ee:	4323      	orrs	r3, r4
 80022f0:	469a      	mov	sl, r3
 80022f2:	4654      	mov	r4, sl
 80022f4:	1e63      	subs	r3, r4, #1
 80022f6:	419c      	sbcs	r4, r3
 80022f8:	4643      	mov	r3, r8
 80022fa:	4323      	orrs	r3, r4
 80022fc:	e773      	b.n	80021e6 <__aeabi_dsub+0x47e>
 80022fe:	4662      	mov	r2, ip
 8002300:	431a      	orrs	r2, r3
 8002302:	d023      	beq.n	800234c <__aeabi_dsub+0x5e4>
 8002304:	000a      	movs	r2, r1
 8002306:	433a      	orrs	r2, r7
 8002308:	d000      	beq.n	800230c <__aeabi_dsub+0x5a4>
 800230a:	e0a0      	b.n	800244e <__aeabi_dsub+0x6e6>
 800230c:	4662      	mov	r2, ip
 800230e:	08db      	lsrs	r3, r3, #3
 8002310:	0752      	lsls	r2, r2, #29
 8002312:	4313      	orrs	r3, r2
 8002314:	4662      	mov	r2, ip
 8002316:	08d4      	lsrs	r4, r2, #3
 8002318:	e6b0      	b.n	800207c <__aeabi_dsub+0x314>
 800231a:	000b      	movs	r3, r1
 800231c:	433b      	orrs	r3, r7
 800231e:	d100      	bne.n	8002322 <__aeabi_dsub+0x5ba>
 8002320:	e728      	b.n	8002174 <__aeabi_dsub+0x40c>
 8002322:	08ff      	lsrs	r7, r7, #3
 8002324:	074b      	lsls	r3, r1, #29
 8002326:	465d      	mov	r5, fp
 8002328:	433b      	orrs	r3, r7
 800232a:	08cc      	lsrs	r4, r1, #3
 800232c:	e697      	b.n	800205e <__aeabi_dsub+0x2f6>
 800232e:	2302      	movs	r3, #2
 8002330:	4698      	mov	r8, r3
 8002332:	e736      	b.n	80021a2 <__aeabi_dsub+0x43a>
 8002334:	1afc      	subs	r4, r7, r3
 8002336:	42a7      	cmp	r7, r4
 8002338:	41bf      	sbcs	r7, r7
 800233a:	4663      	mov	r3, ip
 800233c:	427f      	negs	r7, r7
 800233e:	1ac9      	subs	r1, r1, r3
 8002340:	1bcb      	subs	r3, r1, r7
 8002342:	4699      	mov	r9, r3
 8002344:	2301      	movs	r3, #1
 8002346:	465d      	mov	r5, fp
 8002348:	4698      	mov	r8, r3
 800234a:	e55e      	b.n	8001e0a <__aeabi_dsub+0xa2>
 800234c:	074b      	lsls	r3, r1, #29
 800234e:	08ff      	lsrs	r7, r7, #3
 8002350:	433b      	orrs	r3, r7
 8002352:	08cc      	lsrs	r4, r1, #3
 8002354:	e692      	b.n	800207c <__aeabi_dsub+0x314>
 8002356:	1bdc      	subs	r4, r3, r7
 8002358:	4660      	mov	r0, ip
 800235a:	42a3      	cmp	r3, r4
 800235c:	41b6      	sbcs	r6, r6
 800235e:	1a40      	subs	r0, r0, r1
 8002360:	4276      	negs	r6, r6
 8002362:	1b80      	subs	r0, r0, r6
 8002364:	4681      	mov	r9, r0
 8002366:	0200      	lsls	r0, r0, #8
 8002368:	d560      	bpl.n	800242c <__aeabi_dsub+0x6c4>
 800236a:	1afc      	subs	r4, r7, r3
 800236c:	42a7      	cmp	r7, r4
 800236e:	41bf      	sbcs	r7, r7
 8002370:	4663      	mov	r3, ip
 8002372:	427f      	negs	r7, r7
 8002374:	1ac9      	subs	r1, r1, r3
 8002376:	1bcb      	subs	r3, r1, r7
 8002378:	4699      	mov	r9, r3
 800237a:	465d      	mov	r5, fp
 800237c:	e576      	b.n	8001e6c <__aeabi_dsub+0x104>
 800237e:	08ff      	lsrs	r7, r7, #3
 8002380:	074b      	lsls	r3, r1, #29
 8002382:	433b      	orrs	r3, r7
 8002384:	08cc      	lsrs	r4, r1, #3
 8002386:	e667      	b.n	8002058 <__aeabi_dsub+0x2f0>
 8002388:	000a      	movs	r2, r1
 800238a:	08db      	lsrs	r3, r3, #3
 800238c:	433a      	orrs	r2, r7
 800238e:	d100      	bne.n	8002392 <__aeabi_dsub+0x62a>
 8002390:	e66f      	b.n	8002072 <__aeabi_dsub+0x30a>
 8002392:	4662      	mov	r2, ip
 8002394:	0752      	lsls	r2, r2, #29
 8002396:	4313      	orrs	r3, r2
 8002398:	4662      	mov	r2, ip
 800239a:	08d4      	lsrs	r4, r2, #3
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	0312      	lsls	r2, r2, #12
 80023a0:	4214      	tst	r4, r2
 80023a2:	d007      	beq.n	80023b4 <__aeabi_dsub+0x64c>
 80023a4:	08c8      	lsrs	r0, r1, #3
 80023a6:	4210      	tst	r0, r2
 80023a8:	d104      	bne.n	80023b4 <__aeabi_dsub+0x64c>
 80023aa:	465d      	mov	r5, fp
 80023ac:	0004      	movs	r4, r0
 80023ae:	08fb      	lsrs	r3, r7, #3
 80023b0:	0749      	lsls	r1, r1, #29
 80023b2:	430b      	orrs	r3, r1
 80023b4:	0f5a      	lsrs	r2, r3, #29
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	08db      	lsrs	r3, r3, #3
 80023ba:	0752      	lsls	r2, r2, #29
 80023bc:	4313      	orrs	r3, r2
 80023be:	e65d      	b.n	800207c <__aeabi_dsub+0x314>
 80023c0:	074b      	lsls	r3, r1, #29
 80023c2:	08ff      	lsrs	r7, r7, #3
 80023c4:	433b      	orrs	r3, r7
 80023c6:	08cc      	lsrs	r4, r1, #3
 80023c8:	e649      	b.n	800205e <__aeabi_dsub+0x2f6>
 80023ca:	19dc      	adds	r4, r3, r7
 80023cc:	429c      	cmp	r4, r3
 80023ce:	419b      	sbcs	r3, r3
 80023d0:	4461      	add	r1, ip
 80023d2:	4689      	mov	r9, r1
 80023d4:	425b      	negs	r3, r3
 80023d6:	4499      	add	r9, r3
 80023d8:	464b      	mov	r3, r9
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	d400      	bmi.n	80023e0 <__aeabi_dsub+0x678>
 80023de:	e631      	b.n	8002044 <__aeabi_dsub+0x2dc>
 80023e0:	464a      	mov	r2, r9
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <__aeabi_dsub+0x6d8>)
 80023e4:	401a      	ands	r2, r3
 80023e6:	2301      	movs	r3, #1
 80023e8:	4691      	mov	r9, r2
 80023ea:	4698      	mov	r8, r3
 80023ec:	e62a      	b.n	8002044 <__aeabi_dsub+0x2dc>
 80023ee:	0016      	movs	r6, r2
 80023f0:	4664      	mov	r4, ip
 80023f2:	3e20      	subs	r6, #32
 80023f4:	40f4      	lsrs	r4, r6
 80023f6:	46a0      	mov	r8, r4
 80023f8:	2a20      	cmp	r2, #32
 80023fa:	d005      	beq.n	8002408 <__aeabi_dsub+0x6a0>
 80023fc:	2640      	movs	r6, #64	; 0x40
 80023fe:	4664      	mov	r4, ip
 8002400:	1ab2      	subs	r2, r6, r2
 8002402:	4094      	lsls	r4, r2
 8002404:	4323      	orrs	r3, r4
 8002406:	469a      	mov	sl, r3
 8002408:	4654      	mov	r4, sl
 800240a:	1e63      	subs	r3, r4, #1
 800240c:	419c      	sbcs	r4, r3
 800240e:	4643      	mov	r3, r8
 8002410:	431c      	orrs	r4, r3
 8002412:	e5db      	b.n	8001fcc <__aeabi_dsub+0x264>
 8002414:	0002      	movs	r2, r0
 8002416:	2400      	movs	r4, #0
 8002418:	2300      	movs	r3, #0
 800241a:	e548      	b.n	8001eae <__aeabi_dsub+0x146>
 800241c:	19dc      	adds	r4, r3, r7
 800241e:	42bc      	cmp	r4, r7
 8002420:	41bf      	sbcs	r7, r7
 8002422:	4461      	add	r1, ip
 8002424:	4689      	mov	r9, r1
 8002426:	427f      	negs	r7, r7
 8002428:	44b9      	add	r9, r7
 800242a:	e738      	b.n	800229e <__aeabi_dsub+0x536>
 800242c:	464b      	mov	r3, r9
 800242e:	4323      	orrs	r3, r4
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x6cc>
 8002432:	e69f      	b.n	8002174 <__aeabi_dsub+0x40c>
 8002434:	e606      	b.n	8002044 <__aeabi_dsub+0x2dc>
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	000007fe 	.word	0x000007fe
 800243c:	000007ff 	.word	0x000007ff
 8002440:	ff7fffff 	.word	0xff7fffff
 8002444:	08ff      	lsrs	r7, r7, #3
 8002446:	074b      	lsls	r3, r1, #29
 8002448:	433b      	orrs	r3, r7
 800244a:	08cc      	lsrs	r4, r1, #3
 800244c:	e616      	b.n	800207c <__aeabi_dsub+0x314>
 800244e:	4662      	mov	r2, ip
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	0752      	lsls	r2, r2, #29
 8002454:	4313      	orrs	r3, r2
 8002456:	4662      	mov	r2, ip
 8002458:	08d4      	lsrs	r4, r2, #3
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	0312      	lsls	r2, r2, #12
 800245e:	4214      	tst	r4, r2
 8002460:	d007      	beq.n	8002472 <__aeabi_dsub+0x70a>
 8002462:	08c8      	lsrs	r0, r1, #3
 8002464:	4210      	tst	r0, r2
 8002466:	d104      	bne.n	8002472 <__aeabi_dsub+0x70a>
 8002468:	465d      	mov	r5, fp
 800246a:	0004      	movs	r4, r0
 800246c:	08fb      	lsrs	r3, r7, #3
 800246e:	0749      	lsls	r1, r1, #29
 8002470:	430b      	orrs	r3, r1
 8002472:	0f5a      	lsrs	r2, r3, #29
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	0752      	lsls	r2, r2, #29
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	4313      	orrs	r3, r2
 800247c:	e5fe      	b.n	800207c <__aeabi_dsub+0x314>
 800247e:	2300      	movs	r3, #0
 8002480:	4a01      	ldr	r2, [pc, #4]	; (8002488 <__aeabi_dsub+0x720>)
 8002482:	001c      	movs	r4, r3
 8002484:	e513      	b.n	8001eae <__aeabi_dsub+0x146>
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	000007ff 	.word	0x000007ff

0800248c <__aeabi_dcmpun>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	0005      	movs	r5, r0
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <__aeabi_dcmpun+0x38>)
 8002492:	031c      	lsls	r4, r3, #12
 8002494:	0016      	movs	r6, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	030a      	lsls	r2, r1, #12
 800249a:	0049      	lsls	r1, r1, #1
 800249c:	0b12      	lsrs	r2, r2, #12
 800249e:	0d49      	lsrs	r1, r1, #21
 80024a0:	0b24      	lsrs	r4, r4, #12
 80024a2:	0d5b      	lsrs	r3, r3, #21
 80024a4:	4281      	cmp	r1, r0
 80024a6:	d008      	beq.n	80024ba <__aeabi_dcmpun+0x2e>
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <__aeabi_dcmpun+0x38>)
 80024aa:	2000      	movs	r0, #0
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d103      	bne.n	80024b8 <__aeabi_dcmpun+0x2c>
 80024b0:	0020      	movs	r0, r4
 80024b2:	4330      	orrs	r0, r6
 80024b4:	1e43      	subs	r3, r0, #1
 80024b6:	4198      	sbcs	r0, r3
 80024b8:	bd70      	pop	{r4, r5, r6, pc}
 80024ba:	2001      	movs	r0, #1
 80024bc:	432a      	orrs	r2, r5
 80024be:	d1fb      	bne.n	80024b8 <__aeabi_dcmpun+0x2c>
 80024c0:	e7f2      	b.n	80024a8 <__aeabi_dcmpun+0x1c>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	000007ff 	.word	0x000007ff

080024c8 <__aeabi_d2iz>:
 80024c8:	000a      	movs	r2, r1
 80024ca:	b530      	push	{r4, r5, lr}
 80024cc:	4c13      	ldr	r4, [pc, #76]	; (800251c <__aeabi_d2iz+0x54>)
 80024ce:	0053      	lsls	r3, r2, #1
 80024d0:	0309      	lsls	r1, r1, #12
 80024d2:	0005      	movs	r5, r0
 80024d4:	0b09      	lsrs	r1, r1, #12
 80024d6:	2000      	movs	r0, #0
 80024d8:	0d5b      	lsrs	r3, r3, #21
 80024da:	0fd2      	lsrs	r2, r2, #31
 80024dc:	42a3      	cmp	r3, r4
 80024de:	dd04      	ble.n	80024ea <__aeabi_d2iz+0x22>
 80024e0:	480f      	ldr	r0, [pc, #60]	; (8002520 <__aeabi_d2iz+0x58>)
 80024e2:	4283      	cmp	r3, r0
 80024e4:	dd02      	ble.n	80024ec <__aeabi_d2iz+0x24>
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <__aeabi_d2iz+0x5c>)
 80024e8:	18d0      	adds	r0, r2, r3
 80024ea:	bd30      	pop	{r4, r5, pc}
 80024ec:	2080      	movs	r0, #128	; 0x80
 80024ee:	0340      	lsls	r0, r0, #13
 80024f0:	4301      	orrs	r1, r0
 80024f2:	480d      	ldr	r0, [pc, #52]	; (8002528 <__aeabi_d2iz+0x60>)
 80024f4:	1ac0      	subs	r0, r0, r3
 80024f6:	281f      	cmp	r0, #31
 80024f8:	dd08      	ble.n	800250c <__aeabi_d2iz+0x44>
 80024fa:	480c      	ldr	r0, [pc, #48]	; (800252c <__aeabi_d2iz+0x64>)
 80024fc:	1ac3      	subs	r3, r0, r3
 80024fe:	40d9      	lsrs	r1, r3
 8002500:	000b      	movs	r3, r1
 8002502:	4258      	negs	r0, r3
 8002504:	2a00      	cmp	r2, #0
 8002506:	d1f0      	bne.n	80024ea <__aeabi_d2iz+0x22>
 8002508:	0018      	movs	r0, r3
 800250a:	e7ee      	b.n	80024ea <__aeabi_d2iz+0x22>
 800250c:	4c08      	ldr	r4, [pc, #32]	; (8002530 <__aeabi_d2iz+0x68>)
 800250e:	40c5      	lsrs	r5, r0
 8002510:	46a4      	mov	ip, r4
 8002512:	4463      	add	r3, ip
 8002514:	4099      	lsls	r1, r3
 8002516:	000b      	movs	r3, r1
 8002518:	432b      	orrs	r3, r5
 800251a:	e7f2      	b.n	8002502 <__aeabi_d2iz+0x3a>
 800251c:	000003fe 	.word	0x000003fe
 8002520:	0000041d 	.word	0x0000041d
 8002524:	7fffffff 	.word	0x7fffffff
 8002528:	00000433 	.word	0x00000433
 800252c:	00000413 	.word	0x00000413
 8002530:	fffffbed 	.word	0xfffffbed

08002534 <__aeabi_i2d>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2800      	cmp	r0, #0
 8002538:	d016      	beq.n	8002568 <__aeabi_i2d+0x34>
 800253a:	17c3      	asrs	r3, r0, #31
 800253c:	18c5      	adds	r5, r0, r3
 800253e:	405d      	eors	r5, r3
 8002540:	0fc4      	lsrs	r4, r0, #31
 8002542:	0028      	movs	r0, r5
 8002544:	f000 f91c 	bl	8002780 <__clzsi2>
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <__aeabi_i2d+0x5c>)
 800254a:	1a12      	subs	r2, r2, r0
 800254c:	280a      	cmp	r0, #10
 800254e:	dc16      	bgt.n	800257e <__aeabi_i2d+0x4a>
 8002550:	0003      	movs	r3, r0
 8002552:	002e      	movs	r6, r5
 8002554:	3315      	adds	r3, #21
 8002556:	409e      	lsls	r6, r3
 8002558:	230b      	movs	r3, #11
 800255a:	1a18      	subs	r0, r3, r0
 800255c:	40c5      	lsrs	r5, r0
 800255e:	0552      	lsls	r2, r2, #21
 8002560:	032d      	lsls	r5, r5, #12
 8002562:	0b2d      	lsrs	r5, r5, #12
 8002564:	0d53      	lsrs	r3, r2, #21
 8002566:	e003      	b.n	8002570 <__aeabi_i2d+0x3c>
 8002568:	2400      	movs	r4, #0
 800256a:	2300      	movs	r3, #0
 800256c:	2500      	movs	r5, #0
 800256e:	2600      	movs	r6, #0
 8002570:	051b      	lsls	r3, r3, #20
 8002572:	432b      	orrs	r3, r5
 8002574:	07e4      	lsls	r4, r4, #31
 8002576:	4323      	orrs	r3, r4
 8002578:	0030      	movs	r0, r6
 800257a:	0019      	movs	r1, r3
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	380b      	subs	r0, #11
 8002580:	4085      	lsls	r5, r0
 8002582:	0552      	lsls	r2, r2, #21
 8002584:	032d      	lsls	r5, r5, #12
 8002586:	2600      	movs	r6, #0
 8002588:	0b2d      	lsrs	r5, r5, #12
 800258a:	0d53      	lsrs	r3, r2, #21
 800258c:	e7f0      	b.n	8002570 <__aeabi_i2d+0x3c>
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	0000041e 	.word	0x0000041e

08002594 <__aeabi_ui2d>:
 8002594:	b510      	push	{r4, lr}
 8002596:	1e04      	subs	r4, r0, #0
 8002598:	d010      	beq.n	80025bc <__aeabi_ui2d+0x28>
 800259a:	f000 f8f1 	bl	8002780 <__clzsi2>
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <__aeabi_ui2d+0x48>)
 80025a0:	1a1b      	subs	r3, r3, r0
 80025a2:	280a      	cmp	r0, #10
 80025a4:	dc11      	bgt.n	80025ca <__aeabi_ui2d+0x36>
 80025a6:	220b      	movs	r2, #11
 80025a8:	0021      	movs	r1, r4
 80025aa:	1a12      	subs	r2, r2, r0
 80025ac:	40d1      	lsrs	r1, r2
 80025ae:	3015      	adds	r0, #21
 80025b0:	030a      	lsls	r2, r1, #12
 80025b2:	055b      	lsls	r3, r3, #21
 80025b4:	4084      	lsls	r4, r0
 80025b6:	0b12      	lsrs	r2, r2, #12
 80025b8:	0d5b      	lsrs	r3, r3, #21
 80025ba:	e001      	b.n	80025c0 <__aeabi_ui2d+0x2c>
 80025bc:	2300      	movs	r3, #0
 80025be:	2200      	movs	r2, #0
 80025c0:	051b      	lsls	r3, r3, #20
 80025c2:	4313      	orrs	r3, r2
 80025c4:	0020      	movs	r0, r4
 80025c6:	0019      	movs	r1, r3
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	0022      	movs	r2, r4
 80025cc:	380b      	subs	r0, #11
 80025ce:	4082      	lsls	r2, r0
 80025d0:	055b      	lsls	r3, r3, #21
 80025d2:	0312      	lsls	r2, r2, #12
 80025d4:	2400      	movs	r4, #0
 80025d6:	0b12      	lsrs	r2, r2, #12
 80025d8:	0d5b      	lsrs	r3, r3, #21
 80025da:	e7f1      	b.n	80025c0 <__aeabi_ui2d+0x2c>
 80025dc:	0000041e 	.word	0x0000041e

080025e0 <__aeabi_f2d>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	0043      	lsls	r3, r0, #1
 80025e4:	0246      	lsls	r6, r0, #9
 80025e6:	0fc4      	lsrs	r4, r0, #31
 80025e8:	20fe      	movs	r0, #254	; 0xfe
 80025ea:	0e1b      	lsrs	r3, r3, #24
 80025ec:	1c59      	adds	r1, r3, #1
 80025ee:	0a75      	lsrs	r5, r6, #9
 80025f0:	4208      	tst	r0, r1
 80025f2:	d00c      	beq.n	800260e <__aeabi_f2d+0x2e>
 80025f4:	22e0      	movs	r2, #224	; 0xe0
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	4694      	mov	ip, r2
 80025fa:	076d      	lsls	r5, r5, #29
 80025fc:	0b36      	lsrs	r6, r6, #12
 80025fe:	4463      	add	r3, ip
 8002600:	051b      	lsls	r3, r3, #20
 8002602:	4333      	orrs	r3, r6
 8002604:	07e4      	lsls	r4, r4, #31
 8002606:	4323      	orrs	r3, r4
 8002608:	0028      	movs	r0, r5
 800260a:	0019      	movs	r1, r3
 800260c:	bd70      	pop	{r4, r5, r6, pc}
 800260e:	2b00      	cmp	r3, #0
 8002610:	d114      	bne.n	800263c <__aeabi_f2d+0x5c>
 8002612:	2d00      	cmp	r5, #0
 8002614:	d01b      	beq.n	800264e <__aeabi_f2d+0x6e>
 8002616:	0028      	movs	r0, r5
 8002618:	f000 f8b2 	bl	8002780 <__clzsi2>
 800261c:	280a      	cmp	r0, #10
 800261e:	dc1c      	bgt.n	800265a <__aeabi_f2d+0x7a>
 8002620:	230b      	movs	r3, #11
 8002622:	002e      	movs	r6, r5
 8002624:	1a1b      	subs	r3, r3, r0
 8002626:	40de      	lsrs	r6, r3
 8002628:	0003      	movs	r3, r0
 800262a:	3315      	adds	r3, #21
 800262c:	409d      	lsls	r5, r3
 800262e:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <__aeabi_f2d+0x88>)
 8002630:	0336      	lsls	r6, r6, #12
 8002632:	1a12      	subs	r2, r2, r0
 8002634:	0552      	lsls	r2, r2, #21
 8002636:	0b36      	lsrs	r6, r6, #12
 8002638:	0d53      	lsrs	r3, r2, #21
 800263a:	e7e1      	b.n	8002600 <__aeabi_f2d+0x20>
 800263c:	2d00      	cmp	r5, #0
 800263e:	d009      	beq.n	8002654 <__aeabi_f2d+0x74>
 8002640:	2280      	movs	r2, #128	; 0x80
 8002642:	0b36      	lsrs	r6, r6, #12
 8002644:	0312      	lsls	r2, r2, #12
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <__aeabi_f2d+0x8c>)
 8002648:	076d      	lsls	r5, r5, #29
 800264a:	4316      	orrs	r6, r2
 800264c:	e7d8      	b.n	8002600 <__aeabi_f2d+0x20>
 800264e:	2300      	movs	r3, #0
 8002650:	2600      	movs	r6, #0
 8002652:	e7d5      	b.n	8002600 <__aeabi_f2d+0x20>
 8002654:	2600      	movs	r6, #0
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <__aeabi_f2d+0x8c>)
 8002658:	e7d2      	b.n	8002600 <__aeabi_f2d+0x20>
 800265a:	0003      	movs	r3, r0
 800265c:	3b0b      	subs	r3, #11
 800265e:	409d      	lsls	r5, r3
 8002660:	002e      	movs	r6, r5
 8002662:	2500      	movs	r5, #0
 8002664:	e7e3      	b.n	800262e <__aeabi_f2d+0x4e>
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	00000389 	.word	0x00000389
 800266c:	000007ff 	.word	0x000007ff

08002670 <__aeabi_d2f>:
 8002670:	0002      	movs	r2, r0
 8002672:	004b      	lsls	r3, r1, #1
 8002674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002676:	0d5b      	lsrs	r3, r3, #21
 8002678:	030c      	lsls	r4, r1, #12
 800267a:	4e3d      	ldr	r6, [pc, #244]	; (8002770 <__aeabi_d2f+0x100>)
 800267c:	0a64      	lsrs	r4, r4, #9
 800267e:	0f40      	lsrs	r0, r0, #29
 8002680:	1c5f      	adds	r7, r3, #1
 8002682:	0fc9      	lsrs	r1, r1, #31
 8002684:	4304      	orrs	r4, r0
 8002686:	00d5      	lsls	r5, r2, #3
 8002688:	4237      	tst	r7, r6
 800268a:	d00a      	beq.n	80026a2 <__aeabi_d2f+0x32>
 800268c:	4839      	ldr	r0, [pc, #228]	; (8002774 <__aeabi_d2f+0x104>)
 800268e:	181e      	adds	r6, r3, r0
 8002690:	2efe      	cmp	r6, #254	; 0xfe
 8002692:	dd16      	ble.n	80026c2 <__aeabi_d2f+0x52>
 8002694:	20ff      	movs	r0, #255	; 0xff
 8002696:	2400      	movs	r4, #0
 8002698:	05c0      	lsls	r0, r0, #23
 800269a:	4320      	orrs	r0, r4
 800269c:	07c9      	lsls	r1, r1, #31
 800269e:	4308      	orrs	r0, r1
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <__aeabi_d2f+0x44>
 80026a6:	432c      	orrs	r4, r5
 80026a8:	d026      	beq.n	80026f8 <__aeabi_d2f+0x88>
 80026aa:	2205      	movs	r2, #5
 80026ac:	0192      	lsls	r2, r2, #6
 80026ae:	0a54      	lsrs	r4, r2, #9
 80026b0:	b2d8      	uxtb	r0, r3
 80026b2:	e7f1      	b.n	8002698 <__aeabi_d2f+0x28>
 80026b4:	4325      	orrs	r5, r4
 80026b6:	d0ed      	beq.n	8002694 <__aeabi_d2f+0x24>
 80026b8:	2080      	movs	r0, #128	; 0x80
 80026ba:	03c0      	lsls	r0, r0, #15
 80026bc:	4304      	orrs	r4, r0
 80026be:	20ff      	movs	r0, #255	; 0xff
 80026c0:	e7ea      	b.n	8002698 <__aeabi_d2f+0x28>
 80026c2:	2e00      	cmp	r6, #0
 80026c4:	dd1b      	ble.n	80026fe <__aeabi_d2f+0x8e>
 80026c6:	0192      	lsls	r2, r2, #6
 80026c8:	1e53      	subs	r3, r2, #1
 80026ca:	419a      	sbcs	r2, r3
 80026cc:	00e4      	lsls	r4, r4, #3
 80026ce:	0f6d      	lsrs	r5, r5, #29
 80026d0:	4322      	orrs	r2, r4
 80026d2:	432a      	orrs	r2, r5
 80026d4:	0753      	lsls	r3, r2, #29
 80026d6:	d048      	beq.n	800276a <__aeabi_d2f+0xfa>
 80026d8:	230f      	movs	r3, #15
 80026da:	4013      	ands	r3, r2
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d000      	beq.n	80026e2 <__aeabi_d2f+0x72>
 80026e0:	3204      	adds	r2, #4
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	04db      	lsls	r3, r3, #19
 80026e6:	4013      	ands	r3, r2
 80026e8:	d03f      	beq.n	800276a <__aeabi_d2f+0xfa>
 80026ea:	1c70      	adds	r0, r6, #1
 80026ec:	2efe      	cmp	r6, #254	; 0xfe
 80026ee:	d0d1      	beq.n	8002694 <__aeabi_d2f+0x24>
 80026f0:	0192      	lsls	r2, r2, #6
 80026f2:	0a54      	lsrs	r4, r2, #9
 80026f4:	b2c0      	uxtb	r0, r0
 80026f6:	e7cf      	b.n	8002698 <__aeabi_d2f+0x28>
 80026f8:	2000      	movs	r0, #0
 80026fa:	2400      	movs	r4, #0
 80026fc:	e7cc      	b.n	8002698 <__aeabi_d2f+0x28>
 80026fe:	0032      	movs	r2, r6
 8002700:	3217      	adds	r2, #23
 8002702:	db22      	blt.n	800274a <__aeabi_d2f+0xda>
 8002704:	2080      	movs	r0, #128	; 0x80
 8002706:	0400      	lsls	r0, r0, #16
 8002708:	4320      	orrs	r0, r4
 800270a:	241e      	movs	r4, #30
 800270c:	1ba4      	subs	r4, r4, r6
 800270e:	2c1f      	cmp	r4, #31
 8002710:	dd1d      	ble.n	800274e <__aeabi_d2f+0xde>
 8002712:	2202      	movs	r2, #2
 8002714:	4252      	negs	r2, r2
 8002716:	1b96      	subs	r6, r2, r6
 8002718:	0002      	movs	r2, r0
 800271a:	40f2      	lsrs	r2, r6
 800271c:	0016      	movs	r6, r2
 800271e:	2c20      	cmp	r4, #32
 8002720:	d004      	beq.n	800272c <__aeabi_d2f+0xbc>
 8002722:	4a15      	ldr	r2, [pc, #84]	; (8002778 <__aeabi_d2f+0x108>)
 8002724:	4694      	mov	ip, r2
 8002726:	4463      	add	r3, ip
 8002728:	4098      	lsls	r0, r3
 800272a:	4305      	orrs	r5, r0
 800272c:	002a      	movs	r2, r5
 800272e:	1e53      	subs	r3, r2, #1
 8002730:	419a      	sbcs	r2, r3
 8002732:	4332      	orrs	r2, r6
 8002734:	2600      	movs	r6, #0
 8002736:	0753      	lsls	r3, r2, #29
 8002738:	d1ce      	bne.n	80026d8 <__aeabi_d2f+0x68>
 800273a:	2480      	movs	r4, #128	; 0x80
 800273c:	0013      	movs	r3, r2
 800273e:	04e4      	lsls	r4, r4, #19
 8002740:	2001      	movs	r0, #1
 8002742:	4023      	ands	r3, r4
 8002744:	4222      	tst	r2, r4
 8002746:	d1d3      	bne.n	80026f0 <__aeabi_d2f+0x80>
 8002748:	e7b0      	b.n	80026ac <__aeabi_d2f+0x3c>
 800274a:	2300      	movs	r3, #0
 800274c:	e7ad      	b.n	80026aa <__aeabi_d2f+0x3a>
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <__aeabi_d2f+0x10c>)
 8002750:	4694      	mov	ip, r2
 8002752:	002a      	movs	r2, r5
 8002754:	40e2      	lsrs	r2, r4
 8002756:	0014      	movs	r4, r2
 8002758:	002a      	movs	r2, r5
 800275a:	4463      	add	r3, ip
 800275c:	409a      	lsls	r2, r3
 800275e:	4098      	lsls	r0, r3
 8002760:	1e55      	subs	r5, r2, #1
 8002762:	41aa      	sbcs	r2, r5
 8002764:	4302      	orrs	r2, r0
 8002766:	4322      	orrs	r2, r4
 8002768:	e7e4      	b.n	8002734 <__aeabi_d2f+0xc4>
 800276a:	0033      	movs	r3, r6
 800276c:	e79e      	b.n	80026ac <__aeabi_d2f+0x3c>
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	000007fe 	.word	0x000007fe
 8002774:	fffffc80 	.word	0xfffffc80
 8002778:	fffffca2 	.word	0xfffffca2
 800277c:	fffffc82 	.word	0xfffffc82

08002780 <__clzsi2>:
 8002780:	211c      	movs	r1, #28
 8002782:	2301      	movs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	4298      	cmp	r0, r3
 8002788:	d301      	bcc.n	800278e <__clzsi2+0xe>
 800278a:	0c00      	lsrs	r0, r0, #16
 800278c:	3910      	subs	r1, #16
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	4298      	cmp	r0, r3
 8002792:	d301      	bcc.n	8002798 <__clzsi2+0x18>
 8002794:	0a00      	lsrs	r0, r0, #8
 8002796:	3908      	subs	r1, #8
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	4298      	cmp	r0, r3
 800279c:	d301      	bcc.n	80027a2 <__clzsi2+0x22>
 800279e:	0900      	lsrs	r0, r0, #4
 80027a0:	3904      	subs	r1, #4
 80027a2:	a202      	add	r2, pc, #8	; (adr r2, 80027ac <__clzsi2+0x2c>)
 80027a4:	5c10      	ldrb	r0, [r2, r0]
 80027a6:	1840      	adds	r0, r0, r1
 80027a8:	4770      	bx	lr
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	02020304 	.word	0x02020304
 80027b0:	01010101 	.word	0x01010101
	...

080027bc <debugPrintln>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//General purpose Function to send a char array over the UART and to automatically send a new line character after it
void debugPrintln(UART_HandleTypeDef *uart_handle,char _out[])
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <debugPrintln+0x4c>)
 80027cc:	0019      	movs	r1, r3
 80027ce:	0010      	movs	r0, r2
 80027d0:	f001 ffac 	bl	800472c <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(uart_handle, (uint8_t *) _out,strlen(_out), 60);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fd fc96 	bl	8000108 <strlen>
 80027dc:	0003      	movs	r3, r0
 80027de:	b29a      	uxth	r2, r3
 80027e0:	6839      	ldr	r1, [r7, #0]
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	233c      	movs	r3, #60	; 0x3c
 80027e6:	f003 fd45 	bl	8006274 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80027ea:	210c      	movs	r1, #12
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	4a07      	ldr	r2, [pc, #28]	; (800280c <debugPrintln+0x50>)
 80027f0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(uart_handle, (uint8_t *)newline, 2, 10);
 80027f2:	1879      	adds	r1, r7, r1
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	230a      	movs	r3, #10
 80027f8:	2202      	movs	r2, #2
 80027fa:	f003 fd3b 	bl	8006274 <HAL_UART_Transmit>

}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	48000800 	.word	0x48000800
 800280c:	00000a0d 	.word	0x00000a0d

08002810 <microDelay>:
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

void microDelay (uint16_t delay)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	0002      	movs	r2, r0
 8002818:	1dbb      	adds	r3, r7, #6
 800281a:	801a      	strh	r2, [r3, #0]
__HAL_TIM_SET_COUNTER(&htim1, 0);
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <microDelay+0x30>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <microDelay+0x30>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282c:	1dbb      	adds	r3, r7, #6
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d3f8      	bcc.n	8002826 <microDelay+0x16>
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b002      	add	sp, #8
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	20000284 	.word	0x20000284

08002844 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
uint8_t Response = 0;
 800284a:	2417      	movs	r4, #23
 800284c:	193b      	adds	r3, r7, r4
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8002852:	003b      	movs	r3, r7
 8002854:	0018      	movs	r0, r3
 8002856:	2314      	movs	r3, #20
 8002858:	001a      	movs	r2, r3
 800285a:	2100      	movs	r1, #0
 800285c:	f004 f8de 	bl	8006a1c <memset>
GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8002860:	003b      	movs	r3, r7
 8002862:	2210      	movs	r2, #16
 8002864:	601a      	str	r2, [r3, #0]
GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8002866:	003b      	movs	r3, r7
 8002868:	2201      	movs	r2, #1
 800286a:	605a      	str	r2, [r3, #4]
GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	003b      	movs	r3, r7
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8002872:	003b      	movs	r3, r7
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8002878:	003a      	movs	r2, r7
 800287a:	2390      	movs	r3, #144	; 0x90
 800287c:	05db      	lsls	r3, r3, #23
 800287e:	0011      	movs	r1, r2
 8002880:	0018      	movs	r0, r3
 8002882:	f001 fda9 	bl	80043d8 <HAL_GPIO_Init>
HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8002886:	2390      	movs	r3, #144	; 0x90
 8002888:	05db      	lsls	r3, r3, #23
 800288a:	2200      	movs	r2, #0
 800288c:	2110      	movs	r1, #16
 800288e:	0018      	movs	r0, r3
 8002890:	f001 ff2f 	bl	80046f2 <HAL_GPIO_WritePin>
HAL_Delay(20);   // wait for 20ms
 8002894:	2014      	movs	r0, #20
 8002896:	f000 ffff 	bl	8003898 <HAL_Delay>
HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800289a:	2390      	movs	r3, #144	; 0x90
 800289c:	05db      	lsls	r3, r3, #23
 800289e:	2201      	movs	r2, #1
 80028a0:	2110      	movs	r1, #16
 80028a2:	0018      	movs	r0, r3
 80028a4:	f001 ff25 	bl	80046f2 <HAL_GPIO_WritePin>
microDelay (30);   // wait for 30us
 80028a8:	201e      	movs	r0, #30
 80028aa:	f7ff ffb1 	bl	8002810 <microDelay>
GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80028ae:	003b      	movs	r3, r7
 80028b0:	2200      	movs	r2, #0
 80028b2:	605a      	str	r2, [r3, #4]
GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80028b4:	003b      	movs	r3, r7
 80028b6:	2201      	movs	r2, #1
 80028b8:	609a      	str	r2, [r3, #8]
HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80028ba:	003a      	movs	r2, r7
 80028bc:	2390      	movs	r3, #144	; 0x90
 80028be:	05db      	lsls	r3, r3, #23
 80028c0:	0011      	movs	r1, r2
 80028c2:	0018      	movs	r0, r3
 80028c4:	f001 fd88 	bl	80043d8 <HAL_GPIO_Init>
microDelay (40);
 80028c8:	2028      	movs	r0, #40	; 0x28
 80028ca:	f7ff ffa1 	bl	8002810 <microDelay>
if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80028ce:	2390      	movs	r3, #144	; 0x90
 80028d0:	05db      	lsls	r3, r3, #23
 80028d2:	2110      	movs	r1, #16
 80028d4:	0018      	movs	r0, r3
 80028d6:	f001 feef 	bl	80046b8 <HAL_GPIO_ReadPin>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d10d      	bne.n	80028fa <DHT11_Start+0xb6>
{
  microDelay (80);
 80028de:	2050      	movs	r0, #80	; 0x50
 80028e0:	f7ff ff96 	bl	8002810 <microDelay>
  if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80028e4:	2390      	movs	r3, #144	; 0x90
 80028e6:	05db      	lsls	r3, r3, #23
 80028e8:	2110      	movs	r1, #16
 80028ea:	0018      	movs	r0, r3
 80028ec:	f001 fee4 	bl	80046b8 <HAL_GPIO_ReadPin>
 80028f0:	1e03      	subs	r3, r0, #0
 80028f2:	d002      	beq.n	80028fa <DHT11_Start+0xb6>
 80028f4:	193b      	adds	r3, r7, r4
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
}
pMillis = HAL_GetTick();
 80028fa:	f000 ffc3 	bl	8003884 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <DHT11_Start+0x104>)
 8002902:	601a      	str	r2, [r3, #0]
cMillis = HAL_GetTick();
 8002904:	f000 ffbe 	bl	8003884 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <DHT11_Start+0x108>)
 800290c:	601a      	str	r2, [r3, #0]
while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800290e:	e004      	b.n	800291a <DHT11_Start+0xd6>
{
  cMillis = HAL_GetTick();
 8002910:	f000 ffb8 	bl	8003884 <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <DHT11_Start+0x108>)
 8002918:	601a      	str	r2, [r3, #0]
while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800291a:	2390      	movs	r3, #144	; 0x90
 800291c:	05db      	lsls	r3, r3, #23
 800291e:	2110      	movs	r1, #16
 8002920:	0018      	movs	r0, r3
 8002922:	f001 fec9 	bl	80046b8 <HAL_GPIO_ReadPin>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d006      	beq.n	8002938 <DHT11_Start+0xf4>
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <DHT11_Start+0x104>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	1c9a      	adds	r2, r3, #2
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <DHT11_Start+0x108>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d8eb      	bhi.n	8002910 <DHT11_Start+0xcc>
}
return Response;
 8002938:	2317      	movs	r3, #23
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	781b      	ldrb	r3, [r3, #0]
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b007      	add	sp, #28
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	20000358 	.word	0x20000358
 800294c:	2000035c 	.word	0x2000035c

08002950 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
uint8_t a,b;
for (a=0;a<8;a++)
 8002956:	1dfb      	adds	r3, r7, #7
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e06e      	b.n	8002a3c <DHT11_Read+0xec>
{
  pMillis = HAL_GetTick();
 800295e:	f000 ff91 	bl	8003884 <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <DHT11_Read+0x100>)
 8002966:	601a      	str	r2, [r3, #0]
  cMillis = HAL_GetTick();
 8002968:	f000 ff8c 	bl	8003884 <HAL_GetTick>
 800296c:	0002      	movs	r2, r0
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <DHT11_Read+0x104>)
 8002970:	601a      	str	r2, [r3, #0]
  while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8002972:	e004      	b.n	800297e <DHT11_Read+0x2e>
  {  // wait for the pin to go high
    cMillis = HAL_GetTick();
 8002974:	f000 ff86 	bl	8003884 <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <DHT11_Read+0x104>)
 800297c:	601a      	str	r2, [r3, #0]
  while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800297e:	2390      	movs	r3, #144	; 0x90
 8002980:	05db      	lsls	r3, r3, #23
 8002982:	2110      	movs	r1, #16
 8002984:	0018      	movs	r0, r3
 8002986:	f001 fe97 	bl	80046b8 <HAL_GPIO_ReadPin>
 800298a:	1e03      	subs	r3, r0, #0
 800298c:	d106      	bne.n	800299c <DHT11_Read+0x4c>
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <DHT11_Read+0x100>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	1c9a      	adds	r2, r3, #2
 8002994:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <DHT11_Read+0x104>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d8eb      	bhi.n	8002974 <DHT11_Read+0x24>
  }
  microDelay (40);   // wait for 40 us
 800299c:	2028      	movs	r0, #40	; 0x28
 800299e:	f7ff ff37 	bl	8002810 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80029a2:	2390      	movs	r3, #144	; 0x90
 80029a4:	05db      	lsls	r3, r3, #23
 80029a6:	2110      	movs	r1, #16
 80029a8:	0018      	movs	r0, r3
 80029aa:	f001 fe85 	bl	80046b8 <HAL_GPIO_ReadPin>
 80029ae:	1e03      	subs	r3, r0, #0
 80029b0:	d111      	bne.n	80029d6 <DHT11_Read+0x86>
    b&= ~(1<<(7-a));
 80029b2:	1dfb      	adds	r3, r7, #7
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2207      	movs	r2, #7
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2201      	movs	r2, #1
 80029bc:	409a      	lsls	r2, r3
 80029be:	0013      	movs	r3, r2
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	1dba      	adds	r2, r7, #6
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	b252      	sxtb	r2, r2
 80029cc:	4013      	ands	r3, r2
 80029ce:	b25a      	sxtb	r2, r3
 80029d0:	1dbb      	adds	r3, r7, #6
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	e00e      	b.n	80029f4 <DHT11_Read+0xa4>
  else
    b|= (1<<(7-a));
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2207      	movs	r2, #7
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2201      	movs	r2, #1
 80029e0:	409a      	lsls	r2, r3
 80029e2:	0013      	movs	r3, r2
 80029e4:	b25a      	sxtb	r2, r3
 80029e6:	1dbb      	adds	r3, r7, #6
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b25b      	sxtb	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b25a      	sxtb	r2, r3
 80029f0:	1dbb      	adds	r3, r7, #6
 80029f2:	701a      	strb	r2, [r3, #0]
  pMillis = HAL_GetTick();
 80029f4:	f000 ff46 	bl	8003884 <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <DHT11_Read+0x100>)
 80029fc:	601a      	str	r2, [r3, #0]
  cMillis = HAL_GetTick();
 80029fe:	f000 ff41 	bl	8003884 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <DHT11_Read+0x104>)
 8002a06:	601a      	str	r2, [r3, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8002a08:	e004      	b.n	8002a14 <DHT11_Read+0xc4>
  {  // wait for the pin to go low
    cMillis = HAL_GetTick();
 8002a0a:	f000 ff3b 	bl	8003884 <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <DHT11_Read+0x104>)
 8002a12:	601a      	str	r2, [r3, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8002a14:	2390      	movs	r3, #144	; 0x90
 8002a16:	05db      	lsls	r3, r3, #23
 8002a18:	2110      	movs	r1, #16
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f001 fe4c 	bl	80046b8 <HAL_GPIO_ReadPin>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d006      	beq.n	8002a32 <DHT11_Read+0xe2>
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <DHT11_Read+0x100>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	1c9a      	adds	r2, r3, #2
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <DHT11_Read+0x104>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d8eb      	bhi.n	8002a0a <DHT11_Read+0xba>
for (a=0;a<8;a++)
 8002a32:	1dfb      	adds	r3, r7, #7
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	3201      	adds	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	1dfb      	adds	r3, r7, #7
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b07      	cmp	r3, #7
 8002a42:	d98c      	bls.n	800295e <DHT11_Read+0xe>
  }
}
return b;
 8002a44:	1dbb      	adds	r3, r7, #6
 8002a46:	781b      	ldrb	r3, [r3, #0]
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000358 	.word	0x20000358
 8002a54:	2000035c 	.word	0x2000035c

08002a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5a:	b0a1      	sub	sp, #132	; 0x84
 8002a5c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a5e:	f000 feb7 	bl	80037d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a62:	f000 fa7f 	bl	8002f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a66:	f000 fbf3 	bl	8003250 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a6a:	f000 fbbd 	bl	80031e8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002a6e:	f000 fb23 	bl	80030b8 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002a72:	f000 fb61 	bl	8003138 <MX_TIM1_Init>
  MX_ADC_Init();
 8002a76:	f000 fac5 	bl	8003004 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8002a7a:	4bf3      	ldr	r3, [pc, #972]	; (8002e48 <main+0x3f0>)
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f003 f90f 	bl	8005ca0 <HAL_TIM_Base_Start>
  float RT, VR, ln12, TX, T0, VRT;
  T0 = 298.15;
 8002a82:	4bf2      	ldr	r3, [pc, #968]	; (8002e4c <main+0x3f4>)
 8002a84:	66bb      	str	r3, [r7, #104]	; 0x68




  char str[60] = { 0 }; //Useful buffer for printing to UART
 8002a86:	2308      	movs	r3, #8
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	2238      	movs	r2, #56	; 0x38
 8002a92:	2100      	movs	r1, #0
 8002a94:	0018      	movs	r0, r3
 8002a96:	f003 ffc1 	bl	8006a1c <memset>
  uint8_t I2CReturn = 0; //Status var to indicate if HAL_I2C operation has succeeded (1) or failed (0);
 8002a9a:	2367      	movs	r3, #103	; 0x67
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
  uint8_t i, j, Loop = 0; //Loop counters
 8002aa2:	2366      	movs	r3, #102	; 0x66
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
  //Setup variables for reading and writing
  uint16_t EEPROM_DEVICE_ADDR = 0x50 << 1; //Address of EEPROM device on I2C bus
 8002aaa:	2364      	movs	r3, #100	; 0x64
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	22a0      	movs	r2, #160	; 0xa0
 8002ab0:	801a      	strh	r2, [r3, #0]
  uint16_t madd = 0x00; //Memory address variable containing a starting memory address for a location of memory in the EEPROM
 8002ab2:	236e      	movs	r3, #110	; 0x6e
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	801a      	strh	r2, [r3, #0]
  uint8_t Data = 0x10;//Data variable containing sStarting value to write to memory, could be any 8bit value
 8002aba:	1dfb      	adds	r3, r7, #7
 8002abc:	2210      	movs	r2, #16
 8002abe:	701a      	strb	r2, [r3, #0]
  uint8_t Data2 = 0x10;
 8002ac0:	1dbb      	adds	r3, r7, #6
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	701a      	strb	r2, [r3, #0]
  uint8_t *sData2 = &Data2;
 8002ac6:	1dbb      	adds	r3, r7, #6
 8002ac8:	663b      	str	r3, [r7, #96]	; 0x60
  uint8_t *sData = &Data; //Pointer to sending Data variable
 8002aca:	1dfb      	adds	r3, r7, #7
 8002acc:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint8_t Result = 0x00; //Variable to stored value read back from memory in
 8002ace:	1d7b      	adds	r3, r7, #5
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
  uint8_t *rData = &Result; //Pointer to result data variable
 8002ad4:	1d7b      	adds	r3, r7, #5
 8002ad6:	65bb      	str	r3, [r7, #88]	; 0x58
  //Say hello over UART
  debugPrintln(&huart2, "Hello, this is STMF0 Discovery board: ");
 8002ad8:	4add      	ldr	r2, [pc, #884]	; (8002e50 <main+0x3f8>)
 8002ada:	4bde      	ldr	r3, [pc, #888]	; (8002e54 <main+0x3fc>)
 8002adc:	0011      	movs	r1, r2
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7ff fe6c 	bl	80027bc <debugPrintln>
  while (1)
  {



	     	 	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET)
 8002ae4:	2390      	movs	r3, #144	; 0x90
 8002ae6:	05db      	lsls	r3, r3, #23
 8002ae8:	2101      	movs	r1, #1
 8002aea:	0018      	movs	r0, r3
 8002aec:	f001 fde4 	bl	80046b8 <HAL_GPIO_ReadPin>
 8002af0:	0003      	movs	r3, r0
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d100      	bne.n	8002af8 <main+0xa0>
 8002af6:	e226      	b.n	8002f46 <main+0x4ee>
	     	 	}
	     	 	else
	     	 	{


	     	 	  if(DHT11_Start())
 8002af8:	f7ff fea4 	bl	8002844 <DHT11_Start>
 8002afc:	1e03      	subs	r3, r0, #0
 8002afe:	d03e      	beq.n	8002b7e <main+0x126>
	     	 	 	 	     {
	     	 	 	 	       RHI = DHT11_Read(); // Relative humidity integral
 8002b00:	f7ff ff26 	bl	8002950 <DHT11_Read>
 8002b04:	0003      	movs	r3, r0
 8002b06:	001a      	movs	r2, r3
 8002b08:	4bd3      	ldr	r3, [pc, #844]	; (8002e58 <main+0x400>)
 8002b0a:	701a      	strb	r2, [r3, #0]
	     	 	 	 	       RHD = DHT11_Read(); // Relative humidity decimal
 8002b0c:	f7ff ff20 	bl	8002950 <DHT11_Read>
 8002b10:	0003      	movs	r3, r0
 8002b12:	001a      	movs	r2, r3
 8002b14:	4bd1      	ldr	r3, [pc, #836]	; (8002e5c <main+0x404>)
 8002b16:	701a      	strb	r2, [r3, #0]


	     	 	 	 	       TCI = DHT11_Read(); // Celsius integral
 8002b18:	f7ff ff1a 	bl	8002950 <DHT11_Read>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	001a      	movs	r2, r3
 8002b20:	4bcf      	ldr	r3, [pc, #828]	; (8002e60 <main+0x408>)
 8002b22:	701a      	strb	r2, [r3, #0]
	     	 	 	 	       TCD = DHT11_Read(); // Celsius decimal
 8002b24:	f7ff ff14 	bl	8002950 <DHT11_Read>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	4bcd      	ldr	r3, [pc, #820]	; (8002e64 <main+0x40c>)
 8002b2e:	701a      	strb	r2, [r3, #0]
	     	 	 	 	   Data2 = RHI;
 8002b30:	4bc9      	ldr	r3, [pc, #804]	; (8002e58 <main+0x400>)
 8002b32:	781a      	ldrb	r2, [r3, #0]
 8002b34:	1dbb      	adds	r3, r7, #6
 8002b36:	701a      	strb	r2, [r3, #0]
	     	 	 	 	   Data = TCI;
 8002b38:	4bc9      	ldr	r3, [pc, #804]	; (8002e60 <main+0x408>)
 8002b3a:	781a      	ldrb	r2, [r3, #0]
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	701a      	strb	r2, [r3, #0]
	     	 	 	 	      sprintf(str, "Relative humidity decimal : %d.%d ", RHI, RHD);
 8002b40:	4bc5      	ldr	r3, [pc, #788]	; (8002e58 <main+0x400>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	001a      	movs	r2, r3
 8002b46:	4bc5      	ldr	r3, [pc, #788]	; (8002e5c <main+0x404>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	49c7      	ldr	r1, [pc, #796]	; (8002e68 <main+0x410>)
 8002b4c:	2408      	movs	r4, #8
 8002b4e:	1938      	adds	r0, r7, r4
 8002b50:	f004 fbda 	bl	8007308 <siprintf>
	     	 	 						  debugPrintln(&huart2, str);
 8002b54:	193a      	adds	r2, r7, r4
 8002b56:	4bbf      	ldr	r3, [pc, #764]	; (8002e54 <main+0x3fc>)
 8002b58:	0011      	movs	r1, r2
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7ff fe2e 	bl	80027bc <debugPrintln>
	     	 	 			 sprintf(str, "Temperature celsius decimal : %d.%d ", TCI, TCD);
 8002b60:	4bbf      	ldr	r3, [pc, #764]	; (8002e60 <main+0x408>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	001a      	movs	r2, r3
 8002b66:	4bbf      	ldr	r3, [pc, #764]	; (8002e64 <main+0x40c>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	49c0      	ldr	r1, [pc, #768]	; (8002e6c <main+0x414>)
 8002b6c:	1938      	adds	r0, r7, r4
 8002b6e:	f004 fbcb 	bl	8007308 <siprintf>
	     	 	 						  debugPrintln(&huart2, str);
 8002b72:	193a      	adds	r2, r7, r4
 8002b74:	4bb7      	ldr	r3, [pc, #732]	; (8002e54 <main+0x3fc>)
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff fe1f 	bl	80027bc <debugPrintln>
	     	 	 	 	     }
	     	 	  HAL_Delay(2000);
 8002b7e:	23fa      	movs	r3, #250	; 0xfa
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 fe88 	bl	8003898 <HAL_Delay>

	     	 	  HAL_ADC_Start(&hadc);
 8002b88:	4bb9      	ldr	r3, [pc, #740]	; (8002e70 <main+0x418>)
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 ffe8 	bl	8003b60 <HAL_ADC_Start>
	     	 	  HAL_ADC_PollForConversion(&hadc,1000);
 8002b90:	23fa      	movs	r3, #250	; 0xfa
 8002b92:	009a      	lsls	r2, r3, #2
 8002b94:	4bb6      	ldr	r3, [pc, #728]	; (8002e70 <main+0x418>)
 8002b96:	0011      	movs	r1, r2
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f001 f875 	bl	8003c88 <HAL_ADC_PollForConversion>
	     	 	  readValue = HAL_ADC_GetValue(&hadc);
 8002b9e:	4bb4      	ldr	r3, [pc, #720]	; (8002e70 <main+0x418>)
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f001 f909 	bl	8003db8 <HAL_ADC_GetValue>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	4bb2      	ldr	r3, [pc, #712]	; (8002e74 <main+0x41c>)
 8002bac:	801a      	strh	r2, [r3, #0]
	     	 	  //VRT = readValue;              //Acquisition analog value of VRT
	     	 	   VRT = (3.3 / 4050) * readValue;      //Conversion to voltage
 8002bae:	4bb1      	ldr	r3, [pc, #708]	; (8002e74 <main+0x41c>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f7ff fcbe 	bl	8002534 <__aeabi_i2d>
 8002bb8:	4aaf      	ldr	r2, [pc, #700]	; (8002e78 <main+0x420>)
 8002bba:	4bb0      	ldr	r3, [pc, #704]	; (8002e7c <main+0x424>)
 8002bbc:	f7fe fe68 	bl	8001890 <__aeabi_dmul>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	000b      	movs	r3, r1
 8002bc4:	0010      	movs	r0, r2
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	f7ff fd52 	bl	8002670 <__aeabi_d2f>
 8002bcc:	1c03      	adds	r3, r0, #0
 8002bce:	657b      	str	r3, [r7, #84]	; 0x54
	     	 	   VR = VCC - VRT;
 8002bd0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002bd2:	f7ff fd05 	bl	80025e0 <__aeabi_f2d>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	000b      	movs	r3, r1
 8002bda:	48a9      	ldr	r0, [pc, #676]	; (8002e80 <main+0x428>)
 8002bdc:	49a9      	ldr	r1, [pc, #676]	; (8002e84 <main+0x42c>)
 8002bde:	f7ff f8c3 	bl	8001d68 <__aeabi_dsub>
 8002be2:	0002      	movs	r2, r0
 8002be4:	000b      	movs	r3, r1
 8002be6:	0010      	movs	r0, r2
 8002be8:	0019      	movs	r1, r3
 8002bea:	f7ff fd41 	bl	8002670 <__aeabi_d2f>
 8002bee:	1c03      	adds	r3, r0, #0
 8002bf0:	653b      	str	r3, [r7, #80]	; 0x50
	     	 	   RT = VRT / (VR / R);               //Resistance of RT
 8002bf2:	49a5      	ldr	r1, [pc, #660]	; (8002e88 <main+0x430>)
 8002bf4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002bf6:	f7fd fdf5 	bl	80007e4 <__aeabi_fdiv>
 8002bfa:	1c03      	adds	r3, r0, #0
 8002bfc:	1c19      	adds	r1, r3, #0
 8002bfe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002c00:	f7fd fdf0 	bl	80007e4 <__aeabi_fdiv>
 8002c04:	1c03      	adds	r3, r0, #0
 8002c06:	64fb      	str	r3, [r7, #76]	; 0x4c

	     	 	   ln12 = log(RT / RT0);
 8002c08:	499f      	ldr	r1, [pc, #636]	; (8002e88 <main+0x430>)
 8002c0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002c0c:	f7fd fdea 	bl	80007e4 <__aeabi_fdiv>
 8002c10:	1c03      	adds	r3, r0, #0
 8002c12:	1c18      	adds	r0, r3, #0
 8002c14:	f7ff fce4 	bl	80025e0 <__aeabi_f2d>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	000b      	movs	r3, r1
 8002c1c:	0010      	movs	r0, r2
 8002c1e:	0019      	movs	r1, r3
 8002c20:	f006 fe9e 	bl	8009960 <log>
 8002c24:	0002      	movs	r2, r0
 8002c26:	000b      	movs	r3, r1
 8002c28:	0010      	movs	r0, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	f7ff fd20 	bl	8002670 <__aeabi_d2f>
 8002c30:	1c03      	adds	r3, r0, #0
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48
	     	 	   TX = (1 / ((ln12 / B) + (1 / T0))); //Temperature from thermistor
 8002c34:	4995      	ldr	r1, [pc, #596]	; (8002e8c <main+0x434>)
 8002c36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c38:	f7fd fdd4 	bl	80007e4 <__aeabi_fdiv>
 8002c3c:	1c03      	adds	r3, r0, #0
 8002c3e:	1c1c      	adds	r4, r3, #0
 8002c40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c42:	20fe      	movs	r0, #254	; 0xfe
 8002c44:	0580      	lsls	r0, r0, #22
 8002c46:	f7fd fdcd 	bl	80007e4 <__aeabi_fdiv>
 8002c4a:	1c03      	adds	r3, r0, #0
 8002c4c:	1c19      	adds	r1, r3, #0
 8002c4e:	1c20      	adds	r0, r4, #0
 8002c50:	f7fd fc2a 	bl	80004a8 <__aeabi_fadd>
 8002c54:	1c03      	adds	r3, r0, #0
 8002c56:	1c19      	adds	r1, r3, #0
 8002c58:	20fe      	movs	r0, #254	; 0xfe
 8002c5a:	0580      	lsls	r0, r0, #22
 8002c5c:	f7fd fdc2 	bl	80007e4 <__aeabi_fdiv>
 8002c60:	1c03      	adds	r3, r0, #0
 8002c62:	647b      	str	r3, [r7, #68]	; 0x44

	     	 	  TX = TX - 287.13;                 //Conversion to Celsius
 8002c64:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002c66:	f7ff fcbb 	bl	80025e0 <__aeabi_f2d>
 8002c6a:	4a89      	ldr	r2, [pc, #548]	; (8002e90 <main+0x438>)
 8002c6c:	4b89      	ldr	r3, [pc, #548]	; (8002e94 <main+0x43c>)
 8002c6e:	f7ff f87b 	bl	8001d68 <__aeabi_dsub>
 8002c72:	0002      	movs	r2, r0
 8002c74:	000b      	movs	r3, r1
 8002c76:	0010      	movs	r0, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	f7ff fcf9 	bl	8002670 <__aeabi_d2f>
 8002c7e:	1c03      	adds	r3, r0, #0
 8002c80:	647b      	str	r3, [r7, #68]	; 0x44


	     	 	     sprintf(str, "Temperature celsius decimal from analog : %f \n", TX);
 8002c82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002c84:	f7ff fcac 	bl	80025e0 <__aeabi_f2d>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	000b      	movs	r3, r1
 8002c8c:	4982      	ldr	r1, [pc, #520]	; (8002e98 <main+0x440>)
 8002c8e:	2408      	movs	r4, #8
 8002c90:	1938      	adds	r0, r7, r4
 8002c92:	f004 fb39 	bl	8007308 <siprintf>
	     	 	    	 						  debugPrintln(&huart2, str);
 8002c96:	193a      	adds	r2, r7, r4
 8002c98:	4b6e      	ldr	r3, [pc, #440]	; (8002e54 <main+0x3fc>)
 8002c9a:	0011      	movs	r1, r2
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff fd8d 	bl	80027bc <debugPrintln>
	     	 	     HAL_ADC_Stop(&hadc);
 8002ca2:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <main+0x418>)
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 ffaf 	bl	8003c08 <HAL_ADC_Stop>
	     	 	     HAL_Delay(1000);
 8002caa:	23fa      	movs	r3, #250	; 0xfa
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 fdf2 	bl	8003898 <HAL_Delay>

	     	 	     //WRITING
	     	 	     	 	  memset(str, 0, sizeof(str));
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	223c      	movs	r2, #60	; 0x3c
 8002cb8:	2100      	movs	r1, #0
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f003 feae 	bl	8006a1c <memset>
	     	 	     	 	  sprintf(str, "Writing the temperature %d to EEPROM address 0x%X", Data, madd);
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	256e      	movs	r5, #110	; 0x6e
 8002cc8:	197b      	adds	r3, r7, r5
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	4973      	ldr	r1, [pc, #460]	; (8002e9c <main+0x444>)
 8002cce:	1938      	adds	r0, r7, r4
 8002cd0:	f004 fb1a 	bl	8007308 <siprintf>
	     	 	     	 	  debugPrintln(&huart2, str);
 8002cd4:	193a      	adds	r2, r7, r4
 8002cd6:	4b5f      	ldr	r3, [pc, #380]	; (8002e54 <main+0x3fc>)
 8002cd8:	0011      	movs	r1, r2
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7ff fd6e 	bl	80027bc <debugPrintln>
	     	 	     	 	  I2CReturn = HAL_I2C_Mem_Write(&hi2c2, EEPROM_DEVICE_ADDR, madd, 2, sData, 1, HAL_MAX_DELAY);
 8002ce0:	2667      	movs	r6, #103	; 0x67
 8002ce2:	19bc      	adds	r4, r7, r6
 8002ce4:	197b      	adds	r3, r7, r5
 8002ce6:	881a      	ldrh	r2, [r3, #0]
 8002ce8:	2364      	movs	r3, #100	; 0x64
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	8819      	ldrh	r1, [r3, #0]
 8002cee:	486c      	ldr	r0, [pc, #432]	; (8002ea0 <main+0x448>)
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	425b      	negs	r3, r3
 8002cf4:	9302      	str	r3, [sp, #8]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2302      	movs	r3, #2
 8002d00:	f001 fdc6 	bl	8004890 <HAL_I2C_Mem_Write>
 8002d04:	0003      	movs	r3, r0
 8002d06:	7023      	strb	r3, [r4, #0]
	     	 	     	 	  if (I2CReturn != HAL_OK) {
 8002d08:	19bb      	adds	r3, r7, r6
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <main+0x2c4>
	     	 	     	 	  debugPrintln(&huart2, "Write to address FAILED");
 8002d10:	4a64      	ldr	r2, [pc, #400]	; (8002ea4 <main+0x44c>)
 8002d12:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <main+0x3fc>)
 8002d14:	0011      	movs	r1, r2
 8002d16:	0018      	movs	r0, r3
 8002d18:	f7ff fd50 	bl	80027bc <debugPrintln>
	     	 	     	 	  }
	     	 	     	 	  //READING
	     	 	     	 	  memset(str, 0, sizeof(str));
 8002d1c:	2408      	movs	r4, #8
 8002d1e:	193b      	adds	r3, r7, r4
 8002d20:	223c      	movs	r2, #60	; 0x3c
 8002d22:	2100      	movs	r1, #0
 8002d24:	0018      	movs	r0, r3
 8002d26:	f003 fe79 	bl	8006a1c <memset>
	     	 	     	 	  sprintf(str, "Reading from EEPROM address 0x%X ", madd);
 8002d2a:	256e      	movs	r5, #110	; 0x6e
 8002d2c:	197b      	adds	r3, r7, r5
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	495d      	ldr	r1, [pc, #372]	; (8002ea8 <main+0x450>)
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	0018      	movs	r0, r3
 8002d36:	f004 fae7 	bl	8007308 <siprintf>
	     	 	     	 	  debugPrintln(&huart2, str);
 8002d3a:	193a      	adds	r2, r7, r4
 8002d3c:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <main+0x3fc>)
 8002d3e:	0011      	movs	r1, r2
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7ff fd3b 	bl	80027bc <debugPrintln>
	     	 	     	 	  I2CReturn = HAL_I2C_Mem_Read(&hi2c2, EEPROM_DEVICE_ADDR, madd, 2, rData, 1, HAL_MAX_DELAY);
 8002d46:	2667      	movs	r6, #103	; 0x67
 8002d48:	19bc      	adds	r4, r7, r6
 8002d4a:	197b      	adds	r3, r7, r5
 8002d4c:	881a      	ldrh	r2, [r3, #0]
 8002d4e:	2364      	movs	r3, #100	; 0x64
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	8819      	ldrh	r1, [r3, #0]
 8002d54:	4852      	ldr	r0, [pc, #328]	; (8002ea0 <main+0x448>)
 8002d56:	2301      	movs	r3, #1
 8002d58:	425b      	negs	r3, r3
 8002d5a:	9302      	str	r3, [sp, #8]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2302      	movs	r3, #2
 8002d66:	f001 fec1 	bl	8004aec <HAL_I2C_Mem_Read>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	7023      	strb	r3, [r4, #0]
	     	 	     	 	  if (I2CReturn != HAL_OK) {
 8002d6e:	19bb      	adds	r3, r7, r6
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <main+0x32a>
	     	 	     	 	  debugPrintln(&huart2, "Read from address FAILED");
 8002d76:	4a4d      	ldr	r2, [pc, #308]	; (8002eac <main+0x454>)
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <main+0x3fc>)
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7ff fd1d 	bl	80027bc <debugPrintln>
	     	 	     	 	  }
	     	 	     	 	  //PRINT READ VALUE
	     	 	     	 	  memset(str, 0, sizeof(str));
 8002d82:	2408      	movs	r4, #8
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	223c      	movs	r2, #60	; 0x3c
 8002d88:	2100      	movs	r1, #0
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f003 fe46 	bl	8006a1c <memset>
	     	 	     	 	  sprintf(str, "Received temperature data: %d \n", Result);
 8002d90:	1d7b      	adds	r3, r7, #5
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	001a      	movs	r2, r3
 8002d96:	4946      	ldr	r1, [pc, #280]	; (8002eb0 <main+0x458>)
 8002d98:	193b      	adds	r3, r7, r4
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f004 fab4 	bl	8007308 <siprintf>
	     	 	     	 	  debugPrintln(&huart2, str);
 8002da0:	193a      	adds	r2, r7, r4
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <main+0x3fc>)
 8002da4:	0011      	movs	r1, r2
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7ff fd08 	bl	80027bc <debugPrintln>
	     	 	     	 	  //Increment address and data values and clear Result holder
	     	 	     	 	  madd = madd + 1;
 8002dac:	256e      	movs	r5, #110	; 0x6e
 8002dae:	197b      	adds	r3, r7, r5
 8002db0:	197a      	adds	r2, r7, r5
 8002db2:	8812      	ldrh	r2, [r2, #0]
 8002db4:	3201      	adds	r2, #1
 8002db6:	801a      	strh	r2, [r3, #0]
	     	 	     	 	  Result = 0x00;
 8002db8:	1d7b      	adds	r3, r7, #5
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]


	     	 //WRITING
	     	 				  memset(str, 0, sizeof(str));
 8002dbe:	193b      	adds	r3, r7, r4
 8002dc0:	223c      	movs	r2, #60	; 0x3c
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f003 fe29 	bl	8006a1c <memset>
	     	 				  sprintf(str, "Writing the humidity %d to EEPROM address 0x%X", Data2, madd);
 8002dca:	1dbb      	adds	r3, r7, #6
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	001a      	movs	r2, r3
 8002dd0:	197b      	adds	r3, r7, r5
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	4937      	ldr	r1, [pc, #220]	; (8002eb4 <main+0x45c>)
 8002dd6:	1938      	adds	r0, r7, r4
 8002dd8:	f004 fa96 	bl	8007308 <siprintf>
	     	 				  debugPrintln(&huart2, str);
 8002ddc:	193a      	adds	r2, r7, r4
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <main+0x3fc>)
 8002de0:	0011      	movs	r1, r2
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7ff fcea 	bl	80027bc <debugPrintln>
	     	 				  I2CReturn = HAL_I2C_Mem_Write(&hi2c2, EEPROM_DEVICE_ADDR, madd, 2, sData2, 1, HAL_MAX_DELAY);
 8002de8:	2667      	movs	r6, #103	; 0x67
 8002dea:	19bc      	adds	r4, r7, r6
 8002dec:	197b      	adds	r3, r7, r5
 8002dee:	881a      	ldrh	r2, [r3, #0]
 8002df0:	2364      	movs	r3, #100	; 0x64
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	8819      	ldrh	r1, [r3, #0]
 8002df6:	482a      	ldr	r0, [pc, #168]	; (8002ea0 <main+0x448>)
 8002df8:	2301      	movs	r3, #1
 8002dfa:	425b      	negs	r3, r3
 8002dfc:	9302      	str	r3, [sp, #8]
 8002dfe:	2301      	movs	r3, #1
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2302      	movs	r3, #2
 8002e08:	f001 fd42 	bl	8004890 <HAL_I2C_Mem_Write>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	7023      	strb	r3, [r4, #0]
	     	 				  if (I2CReturn != HAL_OK) {
 8002e10:	19bb      	adds	r3, r7, r6
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <main+0x3cc>
	     	 				  debugPrintln(&huart2, "Write to address FAILED");
 8002e18:	4a22      	ldr	r2, [pc, #136]	; (8002ea4 <main+0x44c>)
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <main+0x3fc>)
 8002e1c:	0011      	movs	r1, r2
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7ff fccc 	bl	80027bc <debugPrintln>
	     	 				  }
	     	 				  //READING
	     	 				  memset(str, 0, sizeof(str));
 8002e24:	2408      	movs	r4, #8
 8002e26:	193b      	adds	r3, r7, r4
 8002e28:	223c      	movs	r2, #60	; 0x3c
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f003 fdf5 	bl	8006a1c <memset>
	     	 				  sprintf(str, "Reading from EEPROM address 0x%X ", madd);
 8002e32:	256e      	movs	r5, #110	; 0x6e
 8002e34:	197b      	adds	r3, r7, r5
 8002e36:	881a      	ldrh	r2, [r3, #0]
 8002e38:	491b      	ldr	r1, [pc, #108]	; (8002ea8 <main+0x450>)
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f004 fa63 	bl	8007308 <siprintf>
	     	 				  debugPrintln(&huart2, str);
 8002e42:	193a      	adds	r2, r7, r4
 8002e44:	e038      	b.n	8002eb8 <main+0x460>
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	20000284 	.word	0x20000284
 8002e4c:	43951333 	.word	0x43951333
 8002e50:	08009d50 	.word	0x08009d50
 8002e54:	200002cc 	.word	0x200002cc
 8002e58:	20000352 	.word	0x20000352
 8002e5c:	20000353 	.word	0x20000353
 8002e60:	20000354 	.word	0x20000354
 8002e64:	20000355 	.word	0x20000355
 8002e68:	08009d78 	.word	0x08009d78
 8002e6c:	08009d9c 	.word	0x08009d9c
 8002e70:	200001f8 	.word	0x200001f8
 8002e74:	20000350 	.word	0x20000350
 8002e78:	7dafbfad 	.word	0x7dafbfad
 8002e7c:	3f4ab329 	.word	0x3f4ab329
 8002e80:	66666666 	.word	0x66666666
 8002e84:	400a6666 	.word	0x400a6666
 8002e88:	461c4000 	.word	0x461c4000
 8002e8c:	4558e000 	.word	0x4558e000
 8002e90:	7ae147ae 	.word	0x7ae147ae
 8002e94:	4071f214 	.word	0x4071f214
 8002e98:	08009dc4 	.word	0x08009dc4
 8002e9c:	08009df4 	.word	0x08009df4
 8002ea0:	20000238 	.word	0x20000238
 8002ea4:	08009e28 	.word	0x08009e28
 8002ea8:	08009e40 	.word	0x08009e40
 8002eac:	08009e64 	.word	0x08009e64
 8002eb0:	08009e80 	.word	0x08009e80
 8002eb4:	08009ea0 	.word	0x08009ea0
 8002eb8:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <main+0x4fc>)
 8002eba:	0011      	movs	r1, r2
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7ff fc7d 	bl	80027bc <debugPrintln>
	     	 				  I2CReturn = HAL_I2C_Mem_Read(&hi2c2, EEPROM_DEVICE_ADDR, madd, 2, rData, 1, HAL_MAX_DELAY);
 8002ec2:	2667      	movs	r6, #103	; 0x67
 8002ec4:	19bc      	adds	r4, r7, r6
 8002ec6:	197b      	adds	r3, r7, r5
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	2364      	movs	r3, #100	; 0x64
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	8819      	ldrh	r1, [r3, #0]
 8002ed0:	4821      	ldr	r0, [pc, #132]	; (8002f58 <main+0x500>)
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	425b      	negs	r3, r3
 8002ed6:	9302      	str	r3, [sp, #8]
 8002ed8:	2301      	movs	r3, #1
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f001 fe03 	bl	8004aec <HAL_I2C_Mem_Read>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	7023      	strb	r3, [r4, #0]
	     	 				  if (I2CReturn != HAL_OK) {
 8002eea:	19bb      	adds	r3, r7, r6
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <main+0x4a6>
	     	 				  debugPrintln(&huart2, "Read from address FAILED");
 8002ef2:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <main+0x504>)
 8002ef4:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <main+0x4fc>)
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff fc5f 	bl	80027bc <debugPrintln>
	     	 				  }
	     	 				  //PRINT READ VALUE
	     	 				  memset(str, 0, sizeof(str));
 8002efe:	2408      	movs	r4, #8
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	223c      	movs	r2, #60	; 0x3c
 8002f04:	2100      	movs	r1, #0
 8002f06:	0018      	movs	r0, r3
 8002f08:	f003 fd88 	bl	8006a1c <memset>
	     	 				  sprintf(str, "Received humidity data: %d \n", Result);
 8002f0c:	1d7b      	adds	r3, r7, #5
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	001a      	movs	r2, r3
 8002f12:	4913      	ldr	r1, [pc, #76]	; (8002f60 <main+0x508>)
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	0018      	movs	r0, r3
 8002f18:	f004 f9f6 	bl	8007308 <siprintf>
	     	 				  debugPrintln(&huart2, str);
 8002f1c:	193a      	adds	r2, r7, r4
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <main+0x4fc>)
 8002f20:	0011      	movs	r1, r2
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7ff fc4a 	bl	80027bc <debugPrintln>
	     	 				  //Increment address and data values and clear Result holder
	     	 				  madd = madd + 1;
 8002f28:	226e      	movs	r2, #110	; 0x6e
 8002f2a:	18bb      	adds	r3, r7, r2
 8002f2c:	18ba      	adds	r2, r7, r2
 8002f2e:	8812      	ldrh	r2, [r2, #0]
 8002f30:	3201      	adds	r2, #1
 8002f32:	801a      	strh	r2, [r3, #0]
	     	 				  Result = 0x00;
 8002f34:	1d7b      	adds	r3, r7, #5
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
	     	 	     	 	  HAL_Delay(1000);
 8002f3a:	23fa      	movs	r3, #250	; 0xfa
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 fcaa 	bl	8003898 <HAL_Delay>
	     	 	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET)
 8002f44:	e5ce      	b.n	8002ae4 <main+0x8c>
	     	 			break;
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b01d      	add	sp, #116	; 0x74
 8002f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	200002cc 	.word	0x200002cc
 8002f58:	20000238 	.word	0x20000238
 8002f5c:	08009e64 	.word	0x08009e64
 8002f60:	08009ed0 	.word	0x08009ed0

08002f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b091      	sub	sp, #68	; 0x44
 8002f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f6a:	2410      	movs	r4, #16
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	0018      	movs	r0, r3
 8002f70:	2330      	movs	r3, #48	; 0x30
 8002f72:	001a      	movs	r2, r3
 8002f74:	2100      	movs	r1, #0
 8002f76:	f003 fd51 	bl	8006a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f7a:	003b      	movs	r3, r7
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	2310      	movs	r3, #16
 8002f80:	001a      	movs	r2, r3
 8002f82:	2100      	movs	r1, #0
 8002f84:	f003 fd4a 	bl	8006a1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002f88:	0021      	movs	r1, r4
 8002f8a:	187b      	adds	r3, r7, r1
 8002f8c:	2212      	movs	r2, #18
 8002f8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f90:	187b      	adds	r3, r7, r1
 8002f92:	2201      	movs	r2, #1
 8002f94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	2201      	movs	r2, #1
 8002f9a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f9c:	187b      	adds	r3, r7, r1
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002fa2:	187b      	adds	r3, r7, r1
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	2202      	movs	r2, #2
 8002fac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	22a0      	movs	r2, #160	; 0xa0
 8002fb8:	0392      	lsls	r2, r2, #14
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f002 f9af 	bl	8005328 <HAL_RCC_OscConfig>
 8002fca:	1e03      	subs	r3, r0, #0
 8002fcc:	d001      	beq.n	8002fd2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002fce:	f000 f9d5 	bl	800337c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fd2:	003b      	movs	r3, r7
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fd8:	003b      	movs	r3, r7
 8002fda:	2202      	movs	r2, #2
 8002fdc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fde:	003b      	movs	r3, r7
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fe4:	003b      	movs	r3, r7
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002fea:	003b      	movs	r3, r7
 8002fec:	2101      	movs	r1, #1
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f002 fcb4 	bl	800595c <HAL_RCC_ClockConfig>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d001      	beq.n	8002ffc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ff8:	f000 f9c0 	bl	800337c <Error_Handler>
  }
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b011      	add	sp, #68	; 0x44
 8003002:	bd90      	pop	{r4, r7, pc}

08003004 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	0018      	movs	r0, r3
 800300e:	230c      	movs	r3, #12
 8003010:	001a      	movs	r2, r3
 8003012:	2100      	movs	r1, #0
 8003014:	f003 fd02 	bl	8006a1c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <MX_ADC_Init+0xac>)
 800301a:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <MX_ADC_Init+0xb0>)
 800301c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <MX_ADC_Init+0xac>)
 8003020:	2200      	movs	r2, #0
 8003022:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003024:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <MX_ADC_Init+0xac>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800302a:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <MX_ADC_Init+0xac>)
 800302c:	2200      	movs	r2, #0
 800302e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003030:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <MX_ADC_Init+0xac>)
 8003032:	2201      	movs	r2, #1
 8003034:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <MX_ADC_Init+0xac>)
 8003038:	2204      	movs	r2, #4
 800303a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <MX_ADC_Init+0xac>)
 800303e:	2200      	movs	r2, #0
 8003040:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003042:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <MX_ADC_Init+0xac>)
 8003044:	2200      	movs	r2, #0
 8003046:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <MX_ADC_Init+0xac>)
 800304a:	2201      	movs	r2, #1
 800304c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800304e:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <MX_ADC_Init+0xac>)
 8003050:	2200      	movs	r2, #0
 8003052:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003054:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <MX_ADC_Init+0xac>)
 8003056:	22c2      	movs	r2, #194	; 0xc2
 8003058:	32ff      	adds	r2, #255	; 0xff
 800305a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800305c:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <MX_ADC_Init+0xac>)
 800305e:	2200      	movs	r2, #0
 8003060:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003062:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <MX_ADC_Init+0xac>)
 8003064:	2224      	movs	r2, #36	; 0x24
 8003066:	2100      	movs	r1, #0
 8003068:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <MX_ADC_Init+0xac>)
 800306c:	2201      	movs	r2, #1
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <MX_ADC_Init+0xac>)
 8003072:	0018      	movs	r0, r3
 8003074:	f000 fc34 	bl	80038e0 <HAL_ADC_Init>
 8003078:	1e03      	subs	r3, r0, #0
 800307a:	d001      	beq.n	8003080 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800307c:	f000 f97e 	bl	800337c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	2205      	movs	r2, #5
 8003084:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	0152      	lsls	r2, r2, #5
 800308c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	2205      	movs	r2, #5
 8003092:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003094:	1d3a      	adds	r2, r7, #4
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <MX_ADC_Init+0xac>)
 8003098:	0011      	movs	r1, r2
 800309a:	0018      	movs	r0, r3
 800309c:	f000 fe98 	bl	8003dd0 <HAL_ADC_ConfigChannel>
 80030a0:	1e03      	subs	r3, r0, #0
 80030a2:	d001      	beq.n	80030a8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80030a4:	f000 f96a 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b004      	add	sp, #16
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200001f8 	.word	0x200001f8
 80030b4:	40012400 	.word	0x40012400

080030b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <MX_I2C2_Init+0x74>)
 80030be:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <MX_I2C2_Init+0x78>)
 80030c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <MX_I2C2_Init+0x74>)
 80030c4:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <MX_I2C2_Init+0x7c>)
 80030c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80030c8:	4b18      	ldr	r3, [pc, #96]	; (800312c <MX_I2C2_Init+0x74>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <MX_I2C2_Init+0x74>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030d4:	4b15      	ldr	r3, [pc, #84]	; (800312c <MX_I2C2_Init+0x74>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <MX_I2C2_Init+0x74>)
 80030dc:	2200      	movs	r2, #0
 80030de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <MX_I2C2_Init+0x74>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <MX_I2C2_Init+0x74>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <MX_I2C2_Init+0x74>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <MX_I2C2_Init+0x74>)
 80030f4:	0018      	movs	r0, r3
 80030f6:	f001 fb35 	bl	8004764 <HAL_I2C_Init>
 80030fa:	1e03      	subs	r3, r0, #0
 80030fc:	d001      	beq.n	8003102 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80030fe:	f000 f93d 	bl	800337c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <MX_I2C2_Init+0x74>)
 8003104:	2100      	movs	r1, #0
 8003106:	0018      	movs	r0, r3
 8003108:	f002 f876 	bl	80051f8 <HAL_I2CEx_ConfigAnalogFilter>
 800310c:	1e03      	subs	r3, r0, #0
 800310e:	d001      	beq.n	8003114 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003110:	f000 f934 	bl	800337c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <MX_I2C2_Init+0x74>)
 8003116:	2100      	movs	r1, #0
 8003118:	0018      	movs	r0, r3
 800311a:	f002 f8b9 	bl	8005290 <HAL_I2CEx_ConfigDigitalFilter>
 800311e:	1e03      	subs	r3, r0, #0
 8003120:	d001      	beq.n	8003126 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003122:	f000 f92b 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000238 	.word	0x20000238
 8003130:	40005800 	.word	0x40005800
 8003134:	2010091a 	.word	0x2010091a

08003138 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800313e:	2308      	movs	r3, #8
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	0018      	movs	r0, r3
 8003144:	2310      	movs	r3, #16
 8003146:	001a      	movs	r2, r3
 8003148:	2100      	movs	r1, #0
 800314a:	f003 fc67 	bl	8006a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314e:	003b      	movs	r3, r7
 8003150:	0018      	movs	r0, r3
 8003152:	2308      	movs	r3, #8
 8003154:	001a      	movs	r2, r3
 8003156:	2100      	movs	r1, #0
 8003158:	f003 fc60 	bl	8006a1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800315c:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <MX_TIM1_Init+0xa4>)
 800315e:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <MX_TIM1_Init+0xa8>)
 8003160:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <MX_TIM1_Init+0xa4>)
 8003164:	222f      	movs	r2, #47	; 0x2f
 8003166:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003168:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <MX_TIM1_Init+0xa4>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <MX_TIM1_Init+0xa4>)
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <MX_TIM1_Init+0xac>)
 8003172:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <MX_TIM1_Init+0xa4>)
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <MX_TIM1_Init+0xa4>)
 800317c:	2200      	movs	r2, #0
 800317e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003180:	4b16      	ldr	r3, [pc, #88]	; (80031dc <MX_TIM1_Init+0xa4>)
 8003182:	2200      	movs	r2, #0
 8003184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <MX_TIM1_Init+0xa4>)
 8003188:	0018      	movs	r0, r3
 800318a:	f002 fd39 	bl	8005c00 <HAL_TIM_Base_Init>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8003192:	f000 f8f3 	bl	800337c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003196:	2108      	movs	r1, #8
 8003198:	187b      	adds	r3, r7, r1
 800319a:	2280      	movs	r2, #128	; 0x80
 800319c:	0152      	lsls	r2, r2, #5
 800319e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031a0:	187a      	adds	r2, r7, r1
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <MX_TIM1_Init+0xa4>)
 80031a4:	0011      	movs	r1, r2
 80031a6:	0018      	movs	r0, r3
 80031a8:	f002 fdc4 	bl	8005d34 <HAL_TIM_ConfigClockSource>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d001      	beq.n	80031b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80031b0:	f000 f8e4 	bl	800337c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031b4:	003b      	movs	r3, r7
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ba:	003b      	movs	r3, r7
 80031bc:	2200      	movs	r2, #0
 80031be:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031c0:	003a      	movs	r2, r7
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <MX_TIM1_Init+0xa4>)
 80031c4:	0011      	movs	r1, r2
 80031c6:	0018      	movs	r0, r3
 80031c8:	f002 ffa2 	bl	8006110 <HAL_TIMEx_MasterConfigSynchronization>
 80031cc:	1e03      	subs	r3, r0, #0
 80031ce:	d001      	beq.n	80031d4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80031d0:	f000 f8d4 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b006      	add	sp, #24
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000284 	.word	0x20000284
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	0000ffff 	.word	0x0000ffff

080031e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <MX_USART2_UART_Init+0x60>)
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <MX_USART2_UART_Init+0x64>)
 80031f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <MX_USART2_UART_Init+0x60>)
 80031f4:	2296      	movs	r2, #150	; 0x96
 80031f6:	0192      	lsls	r2, r2, #6
 80031f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <MX_USART2_UART_Init+0x60>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <MX_USART2_UART_Init+0x60>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <MX_USART2_UART_Init+0x60>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <MX_USART2_UART_Init+0x60>)
 800320e:	220c      	movs	r2, #12
 8003210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <MX_USART2_UART_Init+0x60>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <MX_USART2_UART_Init+0x60>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <MX_USART2_UART_Init+0x60>)
 8003220:	2200      	movs	r2, #0
 8003222:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <MX_USART2_UART_Init+0x60>)
 8003226:	2208      	movs	r2, #8
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <MX_USART2_UART_Init+0x60>)
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	0212      	lsls	r2, r2, #8
 8003230:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <MX_USART2_UART_Init+0x60>)
 8003234:	0018      	movs	r0, r3
 8003236:	f002 ffc9 	bl	80061cc <HAL_UART_Init>
 800323a:	1e03      	subs	r3, r0, #0
 800323c:	d001      	beq.n	8003242 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800323e:	f000 f89d 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200002cc 	.word	0x200002cc
 800324c:	40004400 	.word	0x40004400

08003250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b089      	sub	sp, #36	; 0x24
 8003254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003256:	240c      	movs	r4, #12
 8003258:	193b      	adds	r3, r7, r4
 800325a:	0018      	movs	r0, r3
 800325c:	2314      	movs	r3, #20
 800325e:	001a      	movs	r2, r3
 8003260:	2100      	movs	r1, #0
 8003262:	f003 fbdb 	bl	8006a1c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003266:	4b43      	ldr	r3, [pc, #268]	; (8003374 <MX_GPIO_Init+0x124>)
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	4b42      	ldr	r3, [pc, #264]	; (8003374 <MX_GPIO_Init+0x124>)
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	03c9      	lsls	r1, r1, #15
 8003270:	430a      	orrs	r2, r1
 8003272:	615a      	str	r2, [r3, #20]
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <MX_GPIO_Init+0x124>)
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	03db      	lsls	r3, r3, #15
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <MX_GPIO_Init+0x124>)
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <MX_GPIO_Init+0x124>)
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	0289      	lsls	r1, r1, #10
 800328c:	430a      	orrs	r2, r1
 800328e:	615a      	str	r2, [r3, #20]
 8003290:	4b38      	ldr	r3, [pc, #224]	; (8003374 <MX_GPIO_Init+0x124>)
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	4013      	ands	r3, r2
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800329e:	4b35      	ldr	r3, [pc, #212]	; (8003374 <MX_GPIO_Init+0x124>)
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <MX_GPIO_Init+0x124>)
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	0309      	lsls	r1, r1, #12
 80032a8:	430a      	orrs	r2, r1
 80032aa:	615a      	str	r2, [r3, #20]
 80032ac:	4b31      	ldr	r3, [pc, #196]	; (8003374 <MX_GPIO_Init+0x124>)
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	031b      	lsls	r3, r3, #12
 80032b4:	4013      	ands	r3, r2
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80032ba:	2390      	movs	r3, #144	; 0x90
 80032bc:	05db      	lsls	r3, r3, #23
 80032be:	2200      	movs	r2, #0
 80032c0:	21d2      	movs	r1, #210	; 0xd2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f001 fa15 	bl	80046f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80032c8:	23c0      	movs	r3, #192	; 0xc0
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	482a      	ldr	r0, [pc, #168]	; (8003378 <MX_GPIO_Init+0x128>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	0019      	movs	r1, r3
 80032d2:	f001 fa0e 	bl	80046f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80032dc:	193b      	adds	r3, r7, r4
 80032de:	2290      	movs	r2, #144	; 0x90
 80032e0:	0352      	lsls	r2, r2, #13
 80032e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	193b      	adds	r3, r7, r4
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032ea:	193a      	adds	r2, r7, r4
 80032ec:	2390      	movs	r3, #144	; 0x90
 80032ee:	05db      	lsls	r3, r3, #23
 80032f0:	0011      	movs	r1, r2
 80032f2:	0018      	movs	r0, r3
 80032f4:	f001 f870 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80032f8:	193b      	adds	r3, r7, r4
 80032fa:	22d2      	movs	r2, #210	; 0xd2
 80032fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	2201      	movs	r2, #1
 8003302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	193b      	adds	r3, r7, r4
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	193b      	adds	r3, r7, r4
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003310:	193a      	adds	r2, r7, r4
 8003312:	2390      	movs	r3, #144	; 0x90
 8003314:	05db      	lsls	r3, r3, #23
 8003316:	0011      	movs	r1, r2
 8003318:	0018      	movs	r0, r3
 800331a:	f001 f85d 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800331e:	0021      	movs	r1, r4
 8003320:	187b      	adds	r3, r7, r1
 8003322:	22c0      	movs	r2, #192	; 0xc0
 8003324:	0092      	lsls	r2, r2, #2
 8003326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003328:	000c      	movs	r4, r1
 800332a:	193b      	adds	r3, r7, r4
 800332c:	2201      	movs	r2, #1
 800332e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	193b      	adds	r3, r7, r4
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	193b      	adds	r3, r7, r4
 8003338:	2200      	movs	r2, #0
 800333a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800333c:	193b      	adds	r3, r7, r4
 800333e:	4a0e      	ldr	r2, [pc, #56]	; (8003378 <MX_GPIO_Init+0x128>)
 8003340:	0019      	movs	r1, r3
 8003342:	0010      	movs	r0, r2
 8003344:	f001 f848 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003348:	0021      	movs	r1, r4
 800334a:	187b      	adds	r3, r7, r1
 800334c:	2280      	movs	r2, #128	; 0x80
 800334e:	0052      	lsls	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2203      	movs	r2, #3
 8003356:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	187b      	adds	r3, r7, r1
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	187a      	adds	r2, r7, r1
 8003360:	2390      	movs	r3, #144	; 0x90
 8003362:	05db      	lsls	r3, r3, #23
 8003364:	0011      	movs	r1, r2
 8003366:	0018      	movs	r0, r3
 8003368:	f001 f836 	bl	80043d8 <HAL_GPIO_Init>

}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b009      	add	sp, #36	; 0x24
 8003372:	bd90      	pop	{r4, r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	48000800 	.word	0x48000800

0800337c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003380:	b672      	cpsid	i
}
 8003382:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003384:	e7fe      	b.n	8003384 <Error_Handler+0x8>
	...

08003388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_MspInit+0x44>)
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_MspInit+0x44>)
 8003394:	2101      	movs	r1, #1
 8003396:	430a      	orrs	r2, r1
 8003398:	619a      	str	r2, [r3, #24]
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <HAL_MspInit+0x44>)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2201      	movs	r2, #1
 80033a0:	4013      	ands	r3, r2
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_MspInit+0x44>)
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_MspInit+0x44>)
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	0549      	lsls	r1, r1, #21
 80033b0:	430a      	orrs	r2, r1
 80033b2:	61da      	str	r2, [r3, #28]
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_MspInit+0x44>)
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	055b      	lsls	r3, r3, #21
 80033bc:	4013      	ands	r3, r2
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b08b      	sub	sp, #44	; 0x2c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	2414      	movs	r4, #20
 80033da:	193b      	adds	r3, r7, r4
 80033dc:	0018      	movs	r0, r3
 80033de:	2314      	movs	r3, #20
 80033e0:	001a      	movs	r2, r3
 80033e2:	2100      	movs	r1, #0
 80033e4:	f003 fb1a 	bl	8006a1c <memset>
  if(hadc->Instance==ADC1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_ADC_MspInit+0x84>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d12b      	bne.n	800344a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_ADC_MspInit+0x88>)
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_ADC_MspInit+0x88>)
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	0089      	lsls	r1, r1, #2
 80033fc:	430a      	orrs	r2, r1
 80033fe:	619a      	str	r2, [r3, #24]
 8003400:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_ADC_MspInit+0x88>)
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <HAL_ADC_MspInit+0x88>)
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_ADC_MspInit+0x88>)
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	0289      	lsls	r1, r1, #10
 8003418:	430a      	orrs	r2, r1
 800341a:	615a      	str	r2, [r3, #20]
 800341c:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <HAL_ADC_MspInit+0x88>)
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	029b      	lsls	r3, r3, #10
 8003424:	4013      	ands	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800342a:	193b      	adds	r3, r7, r4
 800342c:	2220      	movs	r2, #32
 800342e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003430:	193b      	adds	r3, r7, r4
 8003432:	2203      	movs	r2, #3
 8003434:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	193b      	adds	r3, r7, r4
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343c:	193a      	adds	r2, r7, r4
 800343e:	2390      	movs	r3, #144	; 0x90
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f000 ffc7 	bl	80043d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	b00b      	add	sp, #44	; 0x2c
 8003450:	bd90      	pop	{r4, r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	40012400 	.word	0x40012400
 8003458:	40021000 	.word	0x40021000

0800345c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b08b      	sub	sp, #44	; 0x2c
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	2414      	movs	r4, #20
 8003466:	193b      	adds	r3, r7, r4
 8003468:	0018      	movs	r0, r3
 800346a:	2314      	movs	r3, #20
 800346c:	001a      	movs	r2, r3
 800346e:	2100      	movs	r1, #0
 8003470:	f003 fad4 	bl	8006a1c <memset>
  if(hi2c->Instance==I2C2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <HAL_I2C_MspInit+0x88>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d12e      	bne.n	80034dc <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_I2C_MspInit+0x8c>)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_I2C_MspInit+0x8c>)
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	03c9      	lsls	r1, r1, #15
 8003488:	430a      	orrs	r2, r1
 800348a:	615a      	str	r2, [r3, #20]
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_I2C_MspInit+0x8c>)
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	03db      	lsls	r3, r3, #15
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF6     ------> I2C2_SCL
    PF7     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800349a:	0021      	movs	r1, r4
 800349c:	187b      	adds	r3, r7, r1
 800349e:	22c0      	movs	r2, #192	; 0xc0
 80034a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	2212      	movs	r2, #18
 80034a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034ae:	187b      	adds	r3, r7, r1
 80034b0:	2203      	movs	r2, #3
 80034b2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <HAL_I2C_MspInit+0x90>)
 80034b8:	0019      	movs	r1, r3
 80034ba:	0010      	movs	r0, r2
 80034bc:	f000 ff8c 	bl	80043d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_I2C_MspInit+0x8c>)
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_I2C_MspInit+0x8c>)
 80034c6:	2180      	movs	r1, #128	; 0x80
 80034c8:	03c9      	lsls	r1, r1, #15
 80034ca:	430a      	orrs	r2, r1
 80034cc:	61da      	str	r2, [r3, #28]
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_I2C_MspInit+0x8c>)
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	03db      	lsls	r3, r3, #15
 80034d6:	4013      	ands	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b00b      	add	sp, #44	; 0x2c
 80034e2:	bd90      	pop	{r4, r7, pc}
 80034e4:	40005800 	.word	0x40005800
 80034e8:	40021000 	.word	0x40021000
 80034ec:	48001400 	.word	0x48001400

080034f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <HAL_TIM_Base_MspInit+0x38>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10d      	bne.n	800351e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <HAL_TIM_Base_MspInit+0x3c>)
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_TIM_Base_MspInit+0x3c>)
 8003508:	2180      	movs	r1, #128	; 0x80
 800350a:	0109      	lsls	r1, r1, #4
 800350c:	430a      	orrs	r2, r1
 800350e:	619a      	str	r2, [r3, #24]
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_TIM_Base_MspInit+0x3c>)
 8003512:	699a      	ldr	r2, [r3, #24]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	4013      	ands	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	46bd      	mov	sp, r7
 8003522:	b004      	add	sp, #16
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40021000 	.word	0x40021000

08003530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b08b      	sub	sp, #44	; 0x2c
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003538:	2414      	movs	r4, #20
 800353a:	193b      	adds	r3, r7, r4
 800353c:	0018      	movs	r0, r3
 800353e:	2314      	movs	r3, #20
 8003540:	001a      	movs	r2, r3
 8003542:	2100      	movs	r1, #0
 8003544:	f003 fa6a 	bl	8006a1c <memset>
  if(huart->Instance==USART2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <HAL_UART_MspInit+0x90>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d132      	bne.n	80035b8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003552:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <HAL_UART_MspInit+0x94>)
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_UART_MspInit+0x94>)
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	0289      	lsls	r1, r1, #10
 800355c:	430a      	orrs	r2, r1
 800355e:	61da      	str	r2, [r3, #28]
 8003560:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_UART_MspInit+0x94>)
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	029b      	lsls	r3, r3, #10
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <HAL_UART_MspInit+0x94>)
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <HAL_UART_MspInit+0x94>)
 8003574:	2180      	movs	r1, #128	; 0x80
 8003576:	0289      	lsls	r1, r1, #10
 8003578:	430a      	orrs	r2, r1
 800357a:	615a      	str	r2, [r3, #20]
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_UART_MspInit+0x94>)
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800358a:	0021      	movs	r1, r4
 800358c:	187b      	adds	r3, r7, r1
 800358e:	220c      	movs	r2, #12
 8003590:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	187b      	adds	r3, r7, r1
 8003594:	2202      	movs	r2, #2
 8003596:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	187b      	adds	r3, r7, r1
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	2203      	movs	r2, #3
 80035a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	2201      	movs	r2, #1
 80035a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	187a      	adds	r2, r7, r1
 80035ac:	2390      	movs	r3, #144	; 0x90
 80035ae:	05db      	lsls	r3, r3, #23
 80035b0:	0011      	movs	r1, r2
 80035b2:	0018      	movs	r0, r3
 80035b4:	f000 ff10 	bl	80043d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b00b      	add	sp, #44	; 0x2c
 80035be:	bd90      	pop	{r4, r7, pc}
 80035c0:	40004400 	.word	0x40004400
 80035c4:	40021000 	.word	0x40021000

080035c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035cc:	e7fe      	b.n	80035cc <NMI_Handler+0x4>

080035ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035d2:	e7fe      	b.n	80035d2 <HardFault_Handler+0x4>

080035d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ec:	f000 f938 	bl	8003860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	af00      	add	r7, sp, #0
	return 1;
 80035fa:	2301      	movs	r3, #1
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <_kill>:

int _kill(int pid, int sig)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800360c:	f003 f9dc 	bl	80069c8 <__errno>
 8003610:	0003      	movs	r3, r0
 8003612:	2216      	movs	r2, #22
 8003614:	601a      	str	r2, [r3, #0]
	return -1;
 8003616:	2301      	movs	r3, #1
 8003618:	425b      	negs	r3, r3
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b002      	add	sp, #8
 8003620:	bd80      	pop	{r7, pc}

08003622 <_exit>:

void _exit (int status)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800362a:	2301      	movs	r3, #1
 800362c:	425a      	negs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	0011      	movs	r1, r2
 8003632:	0018      	movs	r0, r3
 8003634:	f7ff ffe5 	bl	8003602 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003638:	e7fe      	b.n	8003638 <_exit+0x16>

0800363a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e00a      	b.n	8003662 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800364c:	e000      	b.n	8003650 <_read+0x16>
 800364e:	bf00      	nop
 8003650:	0001      	movs	r1, r0
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	60ba      	str	r2, [r7, #8]
 8003658:	b2ca      	uxtb	r2, r1
 800365a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3301      	adds	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	429a      	cmp	r2, r3
 8003668:	dbf0      	blt.n	800364c <_read+0x12>
	}

return len;
 800366a:	687b      	ldr	r3, [r7, #4]
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b006      	add	sp, #24
 8003672:	bd80      	pop	{r7, pc}

08003674 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e009      	b.n	800369a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	60ba      	str	r2, [r7, #8]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	0018      	movs	r0, r3
 8003690:	e000      	b.n	8003694 <_write+0x20>
 8003692:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3301      	adds	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	429a      	cmp	r2, r3
 80036a0:	dbf1      	blt.n	8003686 <_write+0x12>
	}
	return len;
 80036a2:	687b      	ldr	r3, [r7, #4]
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b006      	add	sp, #24
 80036aa:	bd80      	pop	{r7, pc}

080036ac <_close>:

int _close(int file)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	return -1;
 80036b4:	2301      	movs	r3, #1
 80036b6:	425b      	negs	r3, r3
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b002      	add	sp, #8
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	0192      	lsls	r2, r2, #6
 80036d0:	605a      	str	r2, [r3, #4]
	return 0;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}

080036dc <_isatty>:

int _isatty(int file)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	return 1;
 80036e4:	2301      	movs	r3, #1
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b002      	add	sp, #8
 80036ec:	bd80      	pop	{r7, pc}

080036ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
	return 0;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bd80      	pop	{r7, pc}

08003704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <_sbrk+0x5c>)
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <_sbrk+0x60>)
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003718:	4b13      	ldr	r3, [pc, #76]	; (8003768 <_sbrk+0x64>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <_sbrk+0x64>)
 8003722:	4a12      	ldr	r2, [pc, #72]	; (800376c <_sbrk+0x68>)
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <_sbrk+0x64>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	18d3      	adds	r3, r2, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	429a      	cmp	r2, r3
 8003732:	d207      	bcs.n	8003744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003734:	f003 f948 	bl	80069c8 <__errno>
 8003738:	0003      	movs	r3, r0
 800373a:	220c      	movs	r2, #12
 800373c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373e:	2301      	movs	r3, #1
 8003740:	425b      	negs	r3, r3
 8003742:	e009      	b.n	8003758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <_sbrk+0x64>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <_sbrk+0x64>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	18d2      	adds	r2, r2, r3
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <_sbrk+0x64>)
 8003754:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	0018      	movs	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	b006      	add	sp, #24
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20002000 	.word	0x20002000
 8003764:	00000400 	.word	0x00000400
 8003768:	20000360 	.word	0x20000360
 800376c:	20000378 	.word	0x20000378

08003770 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800377c:	480d      	ldr	r0, [pc, #52]	; (80037b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800377e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003780:	480d      	ldr	r0, [pc, #52]	; (80037b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003782:	490e      	ldr	r1, [pc, #56]	; (80037bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003784:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <LoopForever+0xe>)
  movs r3, #0
 8003786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003788:	e002      	b.n	8003790 <LoopCopyDataInit>

0800378a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800378a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800378c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800378e:	3304      	adds	r3, #4

08003790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003794:	d3f9      	bcc.n	800378a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003796:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003798:	4c0b      	ldr	r4, [pc, #44]	; (80037c8 <LoopForever+0x16>)
  movs r3, #0
 800379a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800379c:	e001      	b.n	80037a2 <LoopFillZerobss>

0800379e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800379e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a0:	3204      	adds	r2, #4

080037a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a4:	d3fb      	bcc.n	800379e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80037a6:	f7ff ffe3 	bl	8003770 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80037aa:	f003 f913 	bl	80069d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037ae:	f7ff f953 	bl	8002a58 <main>

080037b2 <LoopForever>:

LoopForever:
    b LoopForever
 80037b2:	e7fe      	b.n	80037b2 <LoopForever>
  ldr   r0, =_estack
 80037b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80037b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80037c0:	0800a40c 	.word	0x0800a40c
  ldr r2, =_sbss
 80037c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80037c8:	20000378 	.word	0x20000378

080037cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037cc:	e7fe      	b.n	80037cc <ADC1_COMP_IRQHandler>
	...

080037d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_Init+0x24>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_Init+0x24>)
 80037da:	2110      	movs	r1, #16
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80037e0:	2000      	movs	r0, #0
 80037e2:	f000 f809 	bl	80037f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037e6:	f7ff fdcf 	bl	8003388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	40022000 	.word	0x40022000

080037f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <HAL_InitTick+0x5c>)
 8003802:	681c      	ldr	r4, [r3, #0]
 8003804:	4b14      	ldr	r3, [pc, #80]	; (8003858 <HAL_InitTick+0x60>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	0019      	movs	r1, r3
 800380a:	23fa      	movs	r3, #250	; 0xfa
 800380c:	0098      	lsls	r0, r3, #2
 800380e:	f7fc fc97 	bl	8000140 <__udivsi3>
 8003812:	0003      	movs	r3, r0
 8003814:	0019      	movs	r1, r3
 8003816:	0020      	movs	r0, r4
 8003818:	f7fc fc92 	bl	8000140 <__udivsi3>
 800381c:	0003      	movs	r3, r0
 800381e:	0018      	movs	r0, r3
 8003820:	f000 fdcd 	bl	80043be <HAL_SYSTICK_Config>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d001      	beq.n	800382c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e00f      	b.n	800384c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d80b      	bhi.n	800384a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	2301      	movs	r3, #1
 8003836:	425b      	negs	r3, r3
 8003838:	2200      	movs	r2, #0
 800383a:	0018      	movs	r0, r3
 800383c:	f000 fdaa 	bl	8004394 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_InitTick+0x64>)
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	b003      	add	sp, #12
 8003852:	bd90      	pop	{r4, r7, pc}
 8003854:	20000000 	.word	0x20000000
 8003858:	20000008 	.word	0x20000008
 800385c:	20000004 	.word	0x20000004

08003860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_IncTick+0x1c>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	001a      	movs	r2, r3
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_IncTick+0x20>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	18d2      	adds	r2, r2, r3
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <HAL_IncTick+0x20>)
 8003872:	601a      	str	r2, [r3, #0]
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	20000008 	.word	0x20000008
 8003880:	20000364 	.word	0x20000364

08003884 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  return uwTick;
 8003888:	4b02      	ldr	r3, [pc, #8]	; (8003894 <HAL_GetTick+0x10>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	20000364 	.word	0x20000364

08003898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a0:	f7ff fff0 	bl	8003884 <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3301      	adds	r3, #1
 80038b0:	d005      	beq.n	80038be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_Delay+0x44>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	001a      	movs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	189b      	adds	r3, r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	f7ff ffe0 	bl	8003884 <HAL_GetTick>
 80038c4:	0002      	movs	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d8f7      	bhi.n	80038c0 <HAL_Delay+0x28>
  {
  }
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	20000008 	.word	0x20000008

080038e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038e8:	230f      	movs	r3, #15
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e125      	b.n	8003b4a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2234      	movs	r2, #52	; 0x34
 8003910:	2100      	movs	r1, #0
 8003912:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	0018      	movs	r0, r3
 8003918:	f7ff fd5a 	bl	80033d0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	2210      	movs	r2, #16
 8003922:	4013      	ands	r3, r2
 8003924:	d000      	beq.n	8003928 <HAL_ADC_Init+0x48>
 8003926:	e103      	b.n	8003b30 <HAL_ADC_Init+0x250>
 8003928:	230f      	movs	r3, #15
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d000      	beq.n	8003934 <HAL_ADC_Init+0x54>
 8003932:	e0fd      	b.n	8003b30 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2204      	movs	r2, #4
 800393c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800393e:	d000      	beq.n	8003942 <HAL_ADC_Init+0x62>
 8003940:	e0f6      	b.n	8003b30 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	4a83      	ldr	r2, [pc, #524]	; (8003b54 <HAL_ADC_Init+0x274>)
 8003948:	4013      	ands	r3, r2
 800394a:	2202      	movs	r2, #2
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2203      	movs	r2, #3
 800395a:	4013      	ands	r3, r2
 800395c:	2b01      	cmp	r3, #1
 800395e:	d112      	bne.n	8003986 <HAL_ADC_Init+0xa6>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	4013      	ands	r3, r2
 800396a:	2b01      	cmp	r3, #1
 800396c:	d009      	beq.n	8003982 <HAL_ADC_Init+0xa2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	401a      	ands	r2, r3
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	429a      	cmp	r2, r3
 8003980:	d101      	bne.n	8003986 <HAL_ADC_Init+0xa6>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_ADC_Init+0xa8>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d116      	bne.n	80039ba <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2218      	movs	r2, #24
 8003994:	4393      	bics	r3, r2
 8003996:	0019      	movs	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	0899      	lsrs	r1, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4964      	ldr	r1, [pc, #400]	; (8003b58 <HAL_ADC_Init+0x278>)
 80039c6:	400a      	ands	r2, r1
 80039c8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7e1b      	ldrb	r3, [r3, #24]
 80039ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7e5b      	ldrb	r3, [r3, #25]
 80039d4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7e9b      	ldrb	r3, [r3, #26]
 80039dc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80039de:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d002      	beq.n	80039ee <HAL_ADC_Init+0x10e>
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	015b      	lsls	r3, r3, #5
 80039ec:	e000      	b.n	80039f0 <HAL_ADC_Init+0x110>
 80039ee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80039f0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80039f6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d101      	bne.n	8003a04 <HAL_ADC_Init+0x124>
 8003a00:	2304      	movs	r3, #4
 8003a02:	e000      	b.n	8003a06 <HAL_ADC_Init+0x126>
 8003a04:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003a06:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2124      	movs	r1, #36	; 0x24
 8003a0c:	5c5b      	ldrb	r3, [r3, r1]
 8003a0e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003a10:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	7edb      	ldrb	r3, [r3, #27]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d115      	bne.n	8003a4c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7e9b      	ldrb	r3, [r3, #26]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d105      	bne.n	8003a34 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2280      	movs	r2, #128	; 0x80
 8003a2c:	0252      	lsls	r2, r2, #9
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	e00b      	b.n	8003a4c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	2220      	movs	r2, #32
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	2201      	movs	r2, #1
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	23c2      	movs	r3, #194	; 0xc2
 8003a52:	33ff      	adds	r3, #255	; 0xff
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d007      	beq.n	8003a68 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003a60:	4313      	orrs	r3, r2
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68d9      	ldr	r1, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	055b      	lsls	r3, r3, #21
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d01b      	beq.n	8003abc <HAL_ADC_Init+0x1dc>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d017      	beq.n	8003abc <HAL_ADC_Init+0x1dc>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d013      	beq.n	8003abc <HAL_ADC_Init+0x1dc>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d00f      	beq.n	8003abc <HAL_ADC_Init+0x1dc>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d00b      	beq.n	8003abc <HAL_ADC_Init+0x1dc>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d007      	beq.n	8003abc <HAL_ADC_Init+0x1dc>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	2b06      	cmp	r3, #6
 8003ab2:	d003      	beq.n	8003abc <HAL_ADC_Init+0x1dc>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	2b07      	cmp	r3, #7
 8003aba:	d112      	bne.n	8003ae2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2107      	movs	r1, #7
 8003ac8:	438a      	bics	r2, r1
 8003aca:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6959      	ldr	r1, [r3, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	2207      	movs	r2, #7
 8003ad8:	401a      	ands	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <HAL_ADC_Init+0x27c>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d10b      	bne.n	8003b0a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	2203      	movs	r2, #3
 8003afe:	4393      	bics	r3, r2
 8003b00:	2201      	movs	r2, #1
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003b08:	e01c      	b.n	8003b44 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	2212      	movs	r2, #18
 8003b10:	4393      	bics	r3, r2
 8003b12:	2210      	movs	r2, #16
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	2201      	movs	r2, #1
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003b26:	230f      	movs	r3, #15
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003b2e:	e009      	b.n	8003b44 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	2210      	movs	r2, #16
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b44:	230f      	movs	r3, #15
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	781b      	ldrb	r3, [r3, #0]
}
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	fffffefd 	.word	0xfffffefd
 8003b58:	fffe0219 	.word	0xfffe0219
 8003b5c:	833fffe7 	.word	0x833fffe7

08003b60 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b68:	230f      	movs	r3, #15
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2204      	movs	r2, #4
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d138      	bne.n	8003bee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2234      	movs	r2, #52	; 0x34
 8003b80:	5c9b      	ldrb	r3, [r3, r2]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_ADC_Start+0x2a>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e038      	b.n	8003bfc <HAL_ADC_Start+0x9c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2234      	movs	r2, #52	; 0x34
 8003b8e:	2101      	movs	r1, #1
 8003b90:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7e5b      	ldrb	r3, [r3, #25]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d007      	beq.n	8003baa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003b9a:	230f      	movs	r3, #15
 8003b9c:	18fc      	adds	r4, r7, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f000 fa23 	bl	8003fec <ADC_Enable>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003baa:	230f      	movs	r3, #15
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d120      	bne.n	8003bf6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <HAL_ADC_Start+0xa4>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0052      	lsls	r2, r2, #1
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2234      	movs	r2, #52	; 0x34
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	221c      	movs	r2, #28
 8003bda:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2104      	movs	r1, #4
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	e003      	b.n	8003bf6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bee:	230f      	movs	r3, #15
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003bf6:	230f      	movs	r3, #15
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	781b      	ldrb	r3, [r3, #0]
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b005      	add	sp, #20
 8003c02:	bd90      	pop	{r4, r7, pc}
 8003c04:	fffff0fe 	.word	0xfffff0fe

08003c08 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8003c08:	b5b0      	push	{r4, r5, r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c10:	230f      	movs	r3, #15
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2234      	movs	r2, #52	; 0x34
 8003c1c:	5c9b      	ldrb	r3, [r3, r2]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_ADC_Stop+0x1e>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e029      	b.n	8003c7a <HAL_ADC_Stop+0x72>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2234      	movs	r2, #52	; 0x34
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003c2e:	250f      	movs	r5, #15
 8003c30:	197c      	adds	r4, r7, r5
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 face 	bl	80041d6 <ADC_ConversionStop>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003c3e:	197b      	adds	r3, r7, r5
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d112      	bne.n	8003c6c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003c46:	197c      	adds	r4, r7, r5
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 fa52 	bl	80040f4 <ADC_Disable>
 8003c50:	0003      	movs	r3, r0
 8003c52:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c54:	197b      	adds	r3, r7, r5
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <HAL_ADC_Stop+0x7c>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	2201      	movs	r2, #1
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2234      	movs	r2, #52	; 0x34
 8003c70:	2100      	movs	r1, #0
 8003c72:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003c74:	230f      	movs	r3, #15
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	781b      	ldrb	r3, [r3, #0]
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bdb0      	pop	{r4, r5, r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	fffffefe 	.word	0xfffffefe

08003c88 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d102      	bne.n	8003ca0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e014      	b.n	8003cca <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d10b      	bne.n	8003cc6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2234      	movs	r2, #52	; 0x34
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e071      	b.n	8003daa <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003cca:	f7ff fddb 	bl	8003884 <HAL_GetTick>
 8003cce:	0003      	movs	r3, r0
 8003cd0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003cd2:	e01f      	b.n	8003d14 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	d01c      	beq.n	8003d14 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_ADC_PollForConversion+0x68>
 8003ce0:	f7ff fdd0 	bl	8003884 <HAL_GetTick>
 8003ce4:	0002      	movs	r2, r0
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d211      	bcs.n	8003d14 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d10b      	bne.n	8003d14 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	2204      	movs	r2, #4
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2234      	movs	r2, #52	; 0x34
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e04a      	b.n	8003daa <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d0d9      	beq.n	8003cd4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	0092      	lsls	r2, r2, #2
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	23c0      	movs	r3, #192	; 0xc0
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d12d      	bne.n	8003d98 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d129      	bne.n	8003d98 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d122      	bne.n	8003d98 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d110      	bne.n	8003d80 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	210c      	movs	r1, #12
 8003d6a:	438a      	bics	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <HAL_ADC_PollForConversion+0x12c>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	2201      	movs	r2, #1
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d7e:	e00b      	b.n	8003d98 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	2220      	movs	r2, #32
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	2201      	movs	r2, #1
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	7e1b      	ldrb	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	220c      	movs	r2, #12
 8003da6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b004      	add	sp, #16
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	fffffefe 	.word	0xfffffefe

08003db8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b002      	add	sp, #8
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dda:	230f      	movs	r3, #15
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	055b      	lsls	r3, r3, #21
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d011      	beq.n	8003e16 <HAL_ADC_ConfigChannel+0x46>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d00d      	beq.n	8003e16 <HAL_ADC_ConfigChannel+0x46>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d009      	beq.n	8003e16 <HAL_ADC_ConfigChannel+0x46>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d005      	beq.n	8003e16 <HAL_ADC_ConfigChannel+0x46>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d001      	beq.n	8003e16 <HAL_ADC_ConfigChannel+0x46>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2234      	movs	r2, #52	; 0x34
 8003e1a:	5c9b      	ldrb	r3, [r3, r2]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x54>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e0d0      	b.n	8003fc6 <HAL_ADC_ConfigChannel+0x1f6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2234      	movs	r2, #52	; 0x34
 8003e28:	2101      	movs	r1, #1
 8003e2a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2204      	movs	r2, #4
 8003e34:	4013      	ands	r3, r2
 8003e36:	d000      	beq.n	8003e3a <HAL_ADC_ConfigChannel+0x6a>
 8003e38:	e0b4      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4a64      	ldr	r2, [pc, #400]	; (8003fd0 <HAL_ADC_ConfigChannel+0x200>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d100      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x76>
 8003e44:	e082      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2201      	movs	r2, #1
 8003e52:	409a      	lsls	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	055b      	lsls	r3, r3, #21
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d037      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x108>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d033      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x108>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d02f      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x108>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d02b      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x108>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d027      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x108>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d023      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x108>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	2b06      	cmp	r3, #6
 8003e96:	d01f      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x108>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	2b07      	cmp	r3, #7
 8003e9e:	d01b      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	2107      	movs	r1, #7
 8003eac:	400b      	ands	r3, r1
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d012      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2107      	movs	r1, #7
 8003ebe:	438a      	bics	r2, r1
 8003ec0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6959      	ldr	r1, [r3, #20]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2207      	movs	r2, #7
 8003ece:	401a      	ands	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d007      	beq.n	8003ef0 <HAL_ADC_ConfigChannel+0x120>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b11      	cmp	r3, #17
 8003ee6:	d003      	beq.n	8003ef0 <HAL_ADC_ConfigChannel+0x120>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b12      	cmp	r3, #18
 8003eee:	d163      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ef0:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <HAL_ADC_ConfigChannel+0x204>)
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d009      	beq.n	8003f10 <HAL_ADC_ConfigChannel+0x140>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b11      	cmp	r3, #17
 8003f02:	d102      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x13a>
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	03db      	lsls	r3, r3, #15
 8003f08:	e004      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x144>
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	045b      	lsls	r3, r3, #17
 8003f0e:	e001      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x144>
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	4a2f      	ldr	r2, [pc, #188]	; (8003fd4 <HAL_ADC_ConfigChannel+0x204>)
 8003f16:	430b      	orrs	r3, r1
 8003f18:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d14a      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f22:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <HAL_ADC_ConfigChannel+0x208>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	492d      	ldr	r1, [pc, #180]	; (8003fdc <HAL_ADC_ConfigChannel+0x20c>)
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7fc f909 	bl	8000140 <__udivsi3>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	001a      	movs	r2, r3
 8003f32:	0013      	movs	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f3c:	e002      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f9      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x16e>
 8003f4a:	e035      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2101      	movs	r1, #1
 8003f58:	4099      	lsls	r1, r3
 8003f5a:	000b      	movs	r3, r1
 8003f5c:	43d9      	mvns	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	400a      	ands	r2, r1
 8003f64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d007      	beq.n	8003f7e <HAL_ADC_ConfigChannel+0x1ae>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b11      	cmp	r3, #17
 8003f74:	d003      	beq.n	8003f7e <HAL_ADC_ConfigChannel+0x1ae>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b12      	cmp	r3, #18
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <HAL_ADC_ConfigChannel+0x204>)
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d007      	beq.n	8003f9a <HAL_ADC_ConfigChannel+0x1ca>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b11      	cmp	r3, #17
 8003f90:	d101      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x1c6>
 8003f92:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <HAL_ADC_ConfigChannel+0x210>)
 8003f94:	e002      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x1cc>
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_ADC_ConfigChannel+0x214>)
 8003f98:	e000      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x1cc>
 8003f9a:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <HAL_ADC_ConfigChannel+0x218>)
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <HAL_ADC_ConfigChannel+0x204>)
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e009      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	2220      	movs	r2, #32
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003fb0:	230f      	movs	r3, #15
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2234      	movs	r2, #52	; 0x34
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003fc0:	230f      	movs	r3, #15
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	781b      	ldrb	r3, [r3, #0]
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b004      	add	sp, #16
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	00001001 	.word	0x00001001
 8003fd4:	40012708 	.word	0x40012708
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	000f4240 	.word	0x000f4240
 8003fe0:	ffbfffff 	.word	0xffbfffff
 8003fe4:	feffffff 	.word	0xfeffffff
 8003fe8:	ff7fffff 	.word	0xff7fffff

08003fec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2203      	movs	r2, #3
 8004004:	4013      	ands	r3, r2
 8004006:	2b01      	cmp	r3, #1
 8004008:	d112      	bne.n	8004030 <ADC_Enable+0x44>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2201      	movs	r2, #1
 8004012:	4013      	ands	r3, r2
 8004014:	2b01      	cmp	r3, #1
 8004016:	d009      	beq.n	800402c <ADC_Enable+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	401a      	ands	r2, r3
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	429a      	cmp	r2, r3
 800402a:	d101      	bne.n	8004030 <ADC_Enable+0x44>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <ADC_Enable+0x46>
 8004030:	2300      	movs	r3, #0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d152      	bne.n	80040dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <ADC_Enable+0xfc>)
 800403e:	4013      	ands	r3, r2
 8004040:	d00d      	beq.n	800405e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	2210      	movs	r2, #16
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	2201      	movs	r2, #1
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e03f      	b.n	80040de <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2101      	movs	r1, #1
 800406a:	430a      	orrs	r2, r1
 800406c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800406e:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <ADC_Enable+0x100>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	491f      	ldr	r1, [pc, #124]	; (80040f0 <ADC_Enable+0x104>)
 8004074:	0018      	movs	r0, r3
 8004076:	f7fc f863 	bl	8000140 <__udivsi3>
 800407a:	0003      	movs	r3, r0
 800407c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800407e:	e002      	b.n	8004086 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	3b01      	subs	r3, #1
 8004084:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f9      	bne.n	8004080 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800408c:	f7ff fbfa 	bl	8003884 <HAL_GetTick>
 8004090:	0003      	movs	r3, r0
 8004092:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004094:	e01b      	b.n	80040ce <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004096:	f7ff fbf5 	bl	8003884 <HAL_GetTick>
 800409a:	0002      	movs	r2, r0
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d914      	bls.n	80040ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2201      	movs	r2, #1
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d00d      	beq.n	80040ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	2210      	movs	r2, #16
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	2201      	movs	r2, #1
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e007      	b.n	80040de <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2201      	movs	r2, #1
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d1dc      	bne.n	8004096 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	0018      	movs	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b004      	add	sp, #16
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	80000017 	.word	0x80000017
 80040ec:	20000000 	.word	0x20000000
 80040f0:	000f4240 	.word	0x000f4240

080040f4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2203      	movs	r2, #3
 8004108:	4013      	ands	r3, r2
 800410a:	2b01      	cmp	r3, #1
 800410c:	d112      	bne.n	8004134 <ADC_Disable+0x40>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2201      	movs	r2, #1
 8004116:	4013      	ands	r3, r2
 8004118:	2b01      	cmp	r3, #1
 800411a:	d009      	beq.n	8004130 <ADC_Disable+0x3c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	2380      	movs	r3, #128	; 0x80
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	401a      	ands	r2, r3
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	429a      	cmp	r2, r3
 800412e:	d101      	bne.n	8004134 <ADC_Disable+0x40>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <ADC_Disable+0x42>
 8004134:	2300      	movs	r3, #0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d048      	beq.n	80041cc <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2205      	movs	r2, #5
 8004142:	4013      	ands	r3, r2
 8004144:	2b01      	cmp	r3, #1
 8004146:	d110      	bne.n	800416a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2102      	movs	r1, #2
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2203      	movs	r2, #3
 800415e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004160:	f7ff fb90 	bl	8003884 <HAL_GetTick>
 8004164:	0003      	movs	r3, r0
 8004166:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004168:	e029      	b.n	80041be <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	2210      	movs	r2, #16
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	2201      	movs	r2, #1
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e023      	b.n	80041ce <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004186:	f7ff fb7d 	bl	8003884 <HAL_GetTick>
 800418a:	0002      	movs	r2, r0
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d914      	bls.n	80041be <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2201      	movs	r2, #1
 800419c:	4013      	ands	r3, r2
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d10d      	bne.n	80041be <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	2210      	movs	r2, #16
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2201      	movs	r2, #1
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e007      	b.n	80041ce <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d0dc      	beq.n	8004186 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b004      	add	sp, #16
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2204      	movs	r2, #4
 80041ea:	4013      	ands	r3, r2
 80041ec:	d03a      	beq.n	8004264 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2204      	movs	r2, #4
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d10d      	bne.n	8004218 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2202      	movs	r2, #2
 8004204:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004206:	d107      	bne.n	8004218 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2110      	movs	r1, #16
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004218:	f7ff fb34 	bl	8003884 <HAL_GetTick>
 800421c:	0003      	movs	r3, r0
 800421e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004220:	e01a      	b.n	8004258 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004222:	f7ff fb2f 	bl	8003884 <HAL_GetTick>
 8004226:	0002      	movs	r2, r0
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d913      	bls.n	8004258 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2204      	movs	r2, #4
 8004238:	4013      	ands	r3, r2
 800423a:	d00d      	beq.n	8004258 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	2210      	movs	r2, #16
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	2201      	movs	r2, #1
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e006      	b.n	8004266 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2204      	movs	r2, #4
 8004260:	4013      	ands	r3, r2
 8004262:	d1de      	bne.n	8004222 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b004      	add	sp, #16
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	0002      	movs	r2, r0
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	1dfb      	adds	r3, r7, #7
 800427c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800427e:	1dfb      	adds	r3, r7, #7
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b7f      	cmp	r3, #127	; 0x7f
 8004284:	d828      	bhi.n	80042d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004286:	4a2f      	ldr	r2, [pc, #188]	; (8004344 <__NVIC_SetPriority+0xd4>)
 8004288:	1dfb      	adds	r3, r7, #7
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b25b      	sxtb	r3, r3
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	33c0      	adds	r3, #192	; 0xc0
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	589b      	ldr	r3, [r3, r2]
 8004296:	1dfa      	adds	r2, r7, #7
 8004298:	7812      	ldrb	r2, [r2, #0]
 800429a:	0011      	movs	r1, r2
 800429c:	2203      	movs	r2, #3
 800429e:	400a      	ands	r2, r1
 80042a0:	00d2      	lsls	r2, r2, #3
 80042a2:	21ff      	movs	r1, #255	; 0xff
 80042a4:	4091      	lsls	r1, r2
 80042a6:	000a      	movs	r2, r1
 80042a8:	43d2      	mvns	r2, r2
 80042aa:	401a      	ands	r2, r3
 80042ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	019b      	lsls	r3, r3, #6
 80042b2:	22ff      	movs	r2, #255	; 0xff
 80042b4:	401a      	ands	r2, r3
 80042b6:	1dfb      	adds	r3, r7, #7
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	0018      	movs	r0, r3
 80042bc:	2303      	movs	r3, #3
 80042be:	4003      	ands	r3, r0
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042c4:	481f      	ldr	r0, [pc, #124]	; (8004344 <__NVIC_SetPriority+0xd4>)
 80042c6:	1dfb      	adds	r3, r7, #7
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	b25b      	sxtb	r3, r3
 80042cc:	089b      	lsrs	r3, r3, #2
 80042ce:	430a      	orrs	r2, r1
 80042d0:	33c0      	adds	r3, #192	; 0xc0
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80042d6:	e031      	b.n	800433c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <__NVIC_SetPriority+0xd8>)
 80042da:	1dfb      	adds	r3, r7, #7
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	0019      	movs	r1, r3
 80042e0:	230f      	movs	r3, #15
 80042e2:	400b      	ands	r3, r1
 80042e4:	3b08      	subs	r3, #8
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	3306      	adds	r3, #6
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	18d3      	adds	r3, r2, r3
 80042ee:	3304      	adds	r3, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	1dfa      	adds	r2, r7, #7
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	0011      	movs	r1, r2
 80042f8:	2203      	movs	r2, #3
 80042fa:	400a      	ands	r2, r1
 80042fc:	00d2      	lsls	r2, r2, #3
 80042fe:	21ff      	movs	r1, #255	; 0xff
 8004300:	4091      	lsls	r1, r2
 8004302:	000a      	movs	r2, r1
 8004304:	43d2      	mvns	r2, r2
 8004306:	401a      	ands	r2, r3
 8004308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	019b      	lsls	r3, r3, #6
 800430e:	22ff      	movs	r2, #255	; 0xff
 8004310:	401a      	ands	r2, r3
 8004312:	1dfb      	adds	r3, r7, #7
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	0018      	movs	r0, r3
 8004318:	2303      	movs	r3, #3
 800431a:	4003      	ands	r3, r0
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004320:	4809      	ldr	r0, [pc, #36]	; (8004348 <__NVIC_SetPriority+0xd8>)
 8004322:	1dfb      	adds	r3, r7, #7
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	001c      	movs	r4, r3
 8004328:	230f      	movs	r3, #15
 800432a:	4023      	ands	r3, r4
 800432c:	3b08      	subs	r3, #8
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	430a      	orrs	r2, r1
 8004332:	3306      	adds	r3, #6
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	18c3      	adds	r3, r0, r3
 8004338:	3304      	adds	r3, #4
 800433a:	601a      	str	r2, [r3, #0]
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b003      	add	sp, #12
 8004342:	bd90      	pop	{r4, r7, pc}
 8004344:	e000e100 	.word	0xe000e100
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	1e5a      	subs	r2, r3, #1
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	045b      	lsls	r3, r3, #17
 800435c:	429a      	cmp	r2, r3
 800435e:	d301      	bcc.n	8004364 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004360:	2301      	movs	r3, #1
 8004362:	e010      	b.n	8004386 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004364:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <SysTick_Config+0x44>)
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	3a01      	subs	r2, #1
 800436a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800436c:	2301      	movs	r3, #1
 800436e:	425b      	negs	r3, r3
 8004370:	2103      	movs	r1, #3
 8004372:	0018      	movs	r0, r3
 8004374:	f7ff ff7c 	bl	8004270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <SysTick_Config+0x44>)
 800437a:	2200      	movs	r2, #0
 800437c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800437e:	4b04      	ldr	r3, [pc, #16]	; (8004390 <SysTick_Config+0x44>)
 8004380:	2207      	movs	r2, #7
 8004382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004384:	2300      	movs	r3, #0
}
 8004386:	0018      	movs	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	b002      	add	sp, #8
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	e000e010 	.word	0xe000e010

08004394 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	210f      	movs	r1, #15
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	1c02      	adds	r2, r0, #0
 80043a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	0011      	movs	r1, r2
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7ff ff5d 	bl	8004270 <__NVIC_SetPriority>
}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b004      	add	sp, #16
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7ff ffbf 	bl	800434c <SysTick_Config>
 80043ce:	0003      	movs	r3, r0
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b002      	add	sp, #8
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e6:	e14f      	b.n	8004688 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2101      	movs	r1, #1
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4091      	lsls	r1, r2
 80043f2:	000a      	movs	r2, r1
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d100      	bne.n	8004400 <HAL_GPIO_Init+0x28>
 80043fe:	e140      	b.n	8004682 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2203      	movs	r2, #3
 8004406:	4013      	ands	r3, r2
 8004408:	2b01      	cmp	r3, #1
 800440a:	d005      	beq.n	8004418 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2203      	movs	r2, #3
 8004412:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004414:	2b02      	cmp	r3, #2
 8004416:	d130      	bne.n	800447a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	409a      	lsls	r2, r3
 8004426:	0013      	movs	r3, r2
 8004428:	43da      	mvns	r2, r3
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	409a      	lsls	r2, r3
 800443a:	0013      	movs	r3, r2
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800444e:	2201      	movs	r2, #1
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	409a      	lsls	r2, r3
 8004454:	0013      	movs	r3, r2
 8004456:	43da      	mvns	r2, r3
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	2201      	movs	r2, #1
 8004466:	401a      	ands	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	409a      	lsls	r2, r3
 800446c:	0013      	movs	r3, r2
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2203      	movs	r2, #3
 8004480:	4013      	ands	r3, r2
 8004482:	2b03      	cmp	r3, #3
 8004484:	d017      	beq.n	80044b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	2203      	movs	r2, #3
 8004492:	409a      	lsls	r2, r3
 8004494:	0013      	movs	r3, r2
 8004496:	43da      	mvns	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	409a      	lsls	r2, r3
 80044a8:	0013      	movs	r3, r2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2203      	movs	r2, #3
 80044bc:	4013      	ands	r3, r2
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d123      	bne.n	800450a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	08da      	lsrs	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3208      	adds	r2, #8
 80044ca:	0092      	lsls	r2, r2, #2
 80044cc:	58d3      	ldr	r3, [r2, r3]
 80044ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2207      	movs	r2, #7
 80044d4:	4013      	ands	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	220f      	movs	r2, #15
 80044da:	409a      	lsls	r2, r3
 80044dc:	0013      	movs	r3, r2
 80044de:	43da      	mvns	r2, r3
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4013      	ands	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2107      	movs	r1, #7
 80044ee:	400b      	ands	r3, r1
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	409a      	lsls	r2, r3
 80044f4:	0013      	movs	r3, r2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	08da      	lsrs	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3208      	adds	r2, #8
 8004504:	0092      	lsls	r2, r2, #2
 8004506:	6939      	ldr	r1, [r7, #16]
 8004508:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	2203      	movs	r2, #3
 8004516:	409a      	lsls	r2, r3
 8004518:	0013      	movs	r3, r2
 800451a:	43da      	mvns	r2, r3
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2203      	movs	r2, #3
 8004528:	401a      	ands	r2, r3
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	409a      	lsls	r2, r3
 8004530:	0013      	movs	r3, r2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	23c0      	movs	r3, #192	; 0xc0
 8004544:	029b      	lsls	r3, r3, #10
 8004546:	4013      	ands	r3, r2
 8004548:	d100      	bne.n	800454c <HAL_GPIO_Init+0x174>
 800454a:	e09a      	b.n	8004682 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454c:	4b54      	ldr	r3, [pc, #336]	; (80046a0 <HAL_GPIO_Init+0x2c8>)
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	4b53      	ldr	r3, [pc, #332]	; (80046a0 <HAL_GPIO_Init+0x2c8>)
 8004552:	2101      	movs	r1, #1
 8004554:	430a      	orrs	r2, r1
 8004556:	619a      	str	r2, [r3, #24]
 8004558:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <HAL_GPIO_Init+0x2c8>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2201      	movs	r2, #1
 800455e:	4013      	ands	r3, r2
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004564:	4a4f      	ldr	r2, [pc, #316]	; (80046a4 <HAL_GPIO_Init+0x2cc>)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	3302      	adds	r3, #2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	589b      	ldr	r3, [r3, r2]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2203      	movs	r2, #3
 8004576:	4013      	ands	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	220f      	movs	r2, #15
 800457c:	409a      	lsls	r2, r3
 800457e:	0013      	movs	r3, r2
 8004580:	43da      	mvns	r2, r3
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	2390      	movs	r3, #144	; 0x90
 800458c:	05db      	lsls	r3, r3, #23
 800458e:	429a      	cmp	r2, r3
 8004590:	d013      	beq.n	80045ba <HAL_GPIO_Init+0x1e2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a44      	ldr	r2, [pc, #272]	; (80046a8 <HAL_GPIO_Init+0x2d0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00d      	beq.n	80045b6 <HAL_GPIO_Init+0x1de>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a43      	ldr	r2, [pc, #268]	; (80046ac <HAL_GPIO_Init+0x2d4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d007      	beq.n	80045b2 <HAL_GPIO_Init+0x1da>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a42      	ldr	r2, [pc, #264]	; (80046b0 <HAL_GPIO_Init+0x2d8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d101      	bne.n	80045ae <HAL_GPIO_Init+0x1d6>
 80045aa:	2303      	movs	r3, #3
 80045ac:	e006      	b.n	80045bc <HAL_GPIO_Init+0x1e4>
 80045ae:	2305      	movs	r3, #5
 80045b0:	e004      	b.n	80045bc <HAL_GPIO_Init+0x1e4>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e002      	b.n	80045bc <HAL_GPIO_Init+0x1e4>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <HAL_GPIO_Init+0x1e4>
 80045ba:	2300      	movs	r3, #0
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	2103      	movs	r1, #3
 80045c0:	400a      	ands	r2, r1
 80045c2:	0092      	lsls	r2, r2, #2
 80045c4:	4093      	lsls	r3, r2
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045cc:	4935      	ldr	r1, [pc, #212]	; (80046a4 <HAL_GPIO_Init+0x2cc>)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	3302      	adds	r3, #2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045da:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <HAL_GPIO_Init+0x2dc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	43da      	mvns	r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	2380      	movs	r3, #128	; 0x80
 80045f0:	025b      	lsls	r3, r3, #9
 80045f2:	4013      	ands	r3, r2
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045fe:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <HAL_GPIO_Init+0x2dc>)
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004604:	4b2b      	ldr	r3, [pc, #172]	; (80046b4 <HAL_GPIO_Init+0x2dc>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	43da      	mvns	r2, r3
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	029b      	lsls	r3, r3, #10
 800461c:	4013      	ands	r3, r2
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004628:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_GPIO_Init+0x2dc>)
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800462e:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <HAL_GPIO_Init+0x2dc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	43da      	mvns	r2, r3
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4013      	ands	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	035b      	lsls	r3, r3, #13
 8004646:	4013      	ands	r3, r2
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004652:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_GPIO_Init+0x2dc>)
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004658:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <HAL_GPIO_Init+0x2dc>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	43da      	mvns	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	039b      	lsls	r3, r3, #14
 8004670:	4013      	ands	r3, r2
 8004672:	d003      	beq.n	800467c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <HAL_GPIO_Init+0x2dc>)
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3301      	adds	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	40da      	lsrs	r2, r3
 8004690:	1e13      	subs	r3, r2, #0
 8004692:	d000      	beq.n	8004696 <HAL_GPIO_Init+0x2be>
 8004694:	e6a8      	b.n	80043e8 <HAL_GPIO_Init+0x10>
  } 
}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b006      	add	sp, #24
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40010000 	.word	0x40010000
 80046a8:	48000400 	.word	0x48000400
 80046ac:	48000800 	.word	0x48000800
 80046b0:	48000c00 	.word	0x48000c00
 80046b4:	40010400 	.word	0x40010400

080046b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	000a      	movs	r2, r1
 80046c2:	1cbb      	adds	r3, r7, #2
 80046c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	1cba      	adds	r2, r7, #2
 80046cc:	8812      	ldrh	r2, [r2, #0]
 80046ce:	4013      	ands	r3, r2
 80046d0:	d004      	beq.n	80046dc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80046d2:	230f      	movs	r3, #15
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e003      	b.n	80046e4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046dc:	230f      	movs	r3, #15
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80046e4:	230f      	movs	r3, #15
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	781b      	ldrb	r3, [r3, #0]
  }
 80046ea:	0018      	movs	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b004      	add	sp, #16
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	0008      	movs	r0, r1
 80046fc:	0011      	movs	r1, r2
 80046fe:	1cbb      	adds	r3, r7, #2
 8004700:	1c02      	adds	r2, r0, #0
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	1c7b      	adds	r3, r7, #1
 8004706:	1c0a      	adds	r2, r1, #0
 8004708:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800470a:	1c7b      	adds	r3, r7, #1
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004712:	1cbb      	adds	r3, r7, #2
 8004714:	881a      	ldrh	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800471a:	e003      	b.n	8004724 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800471c:	1cbb      	adds	r3, r7, #2
 800471e:	881a      	ldrh	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b002      	add	sp, #8
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	000a      	movs	r2, r1
 8004736:	1cbb      	adds	r3, r7, #2
 8004738:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004740:	1cbb      	adds	r3, r7, #2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4013      	ands	r3, r2
 8004748:	041a      	lsls	r2, r3, #16
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	43db      	mvns	r3, r3
 800474e:	1cb9      	adds	r1, r7, #2
 8004750:	8809      	ldrh	r1, [r1, #0]
 8004752:	400b      	ands	r3, r1
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	619a      	str	r2, [r3, #24]
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b004      	add	sp, #16
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e082      	b.n	800487c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2241      	movs	r2, #65	; 0x41
 800477a:	5c9b      	ldrb	r3, [r3, r2]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2240      	movs	r2, #64	; 0x40
 8004786:	2100      	movs	r1, #0
 8004788:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f7fe fe65 	bl	800345c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2241      	movs	r2, #65	; 0x41
 8004796:	2124      	movs	r1, #36	; 0x24
 8004798:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2101      	movs	r1, #1
 80047a6:	438a      	bics	r2, r1
 80047a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4934      	ldr	r1, [pc, #208]	; (8004884 <HAL_I2C_Init+0x120>)
 80047b4:	400a      	ands	r2, r1
 80047b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4931      	ldr	r1, [pc, #196]	; (8004888 <HAL_I2C_Init+0x124>)
 80047c4:	400a      	ands	r2, r1
 80047c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d108      	bne.n	80047e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2180      	movs	r1, #128	; 0x80
 80047da:	0209      	lsls	r1, r1, #8
 80047dc:	430a      	orrs	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	e007      	b.n	80047f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2184      	movs	r1, #132	; 0x84
 80047ec:	0209      	lsls	r1, r1, #8
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d104      	bne.n	8004804 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2280      	movs	r2, #128	; 0x80
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	491f      	ldr	r1, [pc, #124]	; (800488c <HAL_I2C_Init+0x128>)
 8004810:	430a      	orrs	r2, r1
 8004812:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	491a      	ldr	r1, [pc, #104]	; (8004888 <HAL_I2C_Init+0x124>)
 8004820:	400a      	ands	r2, r1
 8004822:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	431a      	orrs	r2, r3
 800482e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69d9      	ldr	r1, [r3, #28]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1a      	ldr	r2, [r3, #32]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	430a      	orrs	r2, r1
 800485c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2241      	movs	r2, #65	; 0x41
 8004868:	2120      	movs	r1, #32
 800486a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2242      	movs	r2, #66	; 0x42
 8004876:	2100      	movs	r1, #0
 8004878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	0018      	movs	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	b002      	add	sp, #8
 8004882:	bd80      	pop	{r7, pc}
 8004884:	f0ffffff 	.word	0xf0ffffff
 8004888:	ffff7fff 	.word	0xffff7fff
 800488c:	02008000 	.word	0x02008000

08004890 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b089      	sub	sp, #36	; 0x24
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	000c      	movs	r4, r1
 800489a:	0010      	movs	r0, r2
 800489c:	0019      	movs	r1, r3
 800489e:	230a      	movs	r3, #10
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	1c22      	adds	r2, r4, #0
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	2308      	movs	r3, #8
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	1c02      	adds	r2, r0, #0
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	1dbb      	adds	r3, r7, #6
 80048b0:	1c0a      	adds	r2, r1, #0
 80048b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2241      	movs	r2, #65	; 0x41
 80048b8:	5c9b      	ldrb	r3, [r3, r2]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d000      	beq.n	80048c2 <HAL_I2C_Mem_Write+0x32>
 80048c0:	e10c      	b.n	8004adc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <HAL_I2C_Mem_Write+0x42>
 80048c8:	232c      	movs	r3, #44	; 0x2c
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d105      	bne.n	80048de <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2280      	movs	r2, #128	; 0x80
 80048d6:	0092      	lsls	r2, r2, #2
 80048d8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0ff      	b.n	8004ade <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2240      	movs	r2, #64	; 0x40
 80048e2:	5c9b      	ldrb	r3, [r3, r2]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_I2C_Mem_Write+0x5c>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e0f8      	b.n	8004ade <HAL_I2C_Mem_Write+0x24e>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2240      	movs	r2, #64	; 0x40
 80048f0:	2101      	movs	r1, #1
 80048f2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048f4:	f7fe ffc6 	bl	8003884 <HAL_GetTick>
 80048f8:	0003      	movs	r3, r0
 80048fa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	0219      	lsls	r1, r3, #8
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	2319      	movs	r3, #25
 8004908:	2201      	movs	r2, #1
 800490a:	f000 fb0b 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 800490e:	1e03      	subs	r3, r0, #0
 8004910:	d001      	beq.n	8004916 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e0e3      	b.n	8004ade <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2241      	movs	r2, #65	; 0x41
 800491a:	2121      	movs	r1, #33	; 0x21
 800491c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2242      	movs	r2, #66	; 0x42
 8004922:	2140      	movs	r1, #64	; 0x40
 8004924:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	222c      	movs	r2, #44	; 0x2c
 8004936:	18ba      	adds	r2, r7, r2
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004942:	1dbb      	adds	r3, r7, #6
 8004944:	881c      	ldrh	r4, [r3, #0]
 8004946:	2308      	movs	r3, #8
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	230a      	movs	r3, #10
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	8819      	ldrh	r1, [r3, #0]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	0023      	movs	r3, r4
 800495e:	f000 f9f9 	bl	8004d54 <I2C_RequestMemoryWrite>
 8004962:	1e03      	subs	r3, r0, #0
 8004964:	d005      	beq.n	8004972 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2240      	movs	r2, #64	; 0x40
 800496a:	2100      	movs	r1, #0
 800496c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e0b5      	b.n	8004ade <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	2bff      	cmp	r3, #255	; 0xff
 800497a:	d911      	bls.n	80049a0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	22ff      	movs	r2, #255	; 0xff
 8004980:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004986:	b2da      	uxtb	r2, r3
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	045c      	lsls	r4, r3, #17
 800498c:	230a      	movs	r3, #10
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	8819      	ldrh	r1, [r3, #0]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	2300      	movs	r3, #0
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	0023      	movs	r3, r4
 800499a:	f000 fbf7 	bl	800518c <I2C_TransferConfig>
 800499e:	e012      	b.n	80049c6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	049c      	lsls	r4, r3, #18
 80049b4:	230a      	movs	r3, #10
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	8819      	ldrh	r1, [r3, #0]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	2300      	movs	r3, #0
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	0023      	movs	r3, r4
 80049c2:	f000 fbe3 	bl	800518c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 fae8 	bl	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 80049d2:	1e03      	subs	r3, r0, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e081      	b.n	8004ade <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d03a      	beq.n	8004a8a <HAL_I2C_Mem_Write+0x1fa>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d136      	bne.n	8004a8a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	0013      	movs	r3, r2
 8004a26:	2200      	movs	r2, #0
 8004a28:	2180      	movs	r1, #128	; 0x80
 8004a2a:	f000 fa7b 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004a2e:	1e03      	subs	r3, r0, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e053      	b.n	8004ade <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2bff      	cmp	r3, #255	; 0xff
 8004a3e:	d911      	bls.n	8004a64 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	22ff      	movs	r2, #255	; 0xff
 8004a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	045c      	lsls	r4, r3, #17
 8004a50:	230a      	movs	r3, #10
 8004a52:	18fb      	adds	r3, r7, r3
 8004a54:	8819      	ldrh	r1, [r3, #0]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	0023      	movs	r3, r4
 8004a5e:	f000 fb95 	bl	800518c <I2C_TransferConfig>
 8004a62:	e012      	b.n	8004a8a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	049c      	lsls	r4, r3, #18
 8004a78:	230a      	movs	r3, #10
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	8819      	ldrh	r1, [r3, #0]
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	2300      	movs	r3, #0
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	0023      	movs	r3, r4
 8004a86:	f000 fb81 	bl	800518c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d198      	bne.n	80049c6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f000 fac0 	bl	8005020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e01a      	b.n	8004ade <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2220      	movs	r2, #32
 8004aae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	490b      	ldr	r1, [pc, #44]	; (8004ae8 <HAL_I2C_Mem_Write+0x258>)
 8004abc:	400a      	ands	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2241      	movs	r2, #65	; 0x41
 8004ac4:	2120      	movs	r1, #32
 8004ac6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2242      	movs	r2, #66	; 0x42
 8004acc:	2100      	movs	r1, #0
 8004ace:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2240      	movs	r2, #64	; 0x40
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	0018      	movs	r0, r3
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b007      	add	sp, #28
 8004ae4:	bd90      	pop	{r4, r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	fe00e800 	.word	0xfe00e800

08004aec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b089      	sub	sp, #36	; 0x24
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	000c      	movs	r4, r1
 8004af6:	0010      	movs	r0, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	230a      	movs	r3, #10
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	1c22      	adds	r2, r4, #0
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	2308      	movs	r3, #8
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	1c02      	adds	r2, r0, #0
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	1dbb      	adds	r3, r7, #6
 8004b0c:	1c0a      	adds	r2, r1, #0
 8004b0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2241      	movs	r2, #65	; 0x41
 8004b14:	5c9b      	ldrb	r3, [r3, r2]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d000      	beq.n	8004b1e <HAL_I2C_Mem_Read+0x32>
 8004b1c:	e110      	b.n	8004d40 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <HAL_I2C_Mem_Read+0x42>
 8004b24:	232c      	movs	r3, #44	; 0x2c
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	0092      	lsls	r2, r2, #2
 8004b34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e103      	b.n	8004d42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2240      	movs	r2, #64	; 0x40
 8004b3e:	5c9b      	ldrb	r3, [r3, r2]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_I2C_Mem_Read+0x5c>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e0fc      	b.n	8004d42 <HAL_I2C_Mem_Read+0x256>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2240      	movs	r2, #64	; 0x40
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b50:	f7fe fe98 	bl	8003884 <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	0219      	lsls	r1, r3, #8
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2319      	movs	r3, #25
 8004b64:	2201      	movs	r2, #1
 8004b66:	f000 f9dd 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004b6a:	1e03      	subs	r3, r0, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0e7      	b.n	8004d42 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2241      	movs	r2, #65	; 0x41
 8004b76:	2122      	movs	r1, #34	; 0x22
 8004b78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2242      	movs	r2, #66	; 0x42
 8004b7e:	2140      	movs	r1, #64	; 0x40
 8004b80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	222c      	movs	r2, #44	; 0x2c
 8004b92:	18ba      	adds	r2, r7, r2
 8004b94:	8812      	ldrh	r2, [r2, #0]
 8004b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b9e:	1dbb      	adds	r3, r7, #6
 8004ba0:	881c      	ldrh	r4, [r3, #0]
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	881a      	ldrh	r2, [r3, #0]
 8004ba8:	230a      	movs	r3, #10
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	8819      	ldrh	r1, [r3, #0]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	0023      	movs	r3, r4
 8004bba:	f000 f92f 	bl	8004e1c <I2C_RequestMemoryRead>
 8004bbe:	1e03      	subs	r3, r0, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2240      	movs	r2, #64	; 0x40
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e0b9      	b.n	8004d42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2bff      	cmp	r3, #255	; 0xff
 8004bd6:	d911      	bls.n	8004bfc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	22ff      	movs	r2, #255	; 0xff
 8004bdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	045c      	lsls	r4, r3, #17
 8004be8:	230a      	movs	r3, #10
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	8819      	ldrh	r1, [r3, #0]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	4b56      	ldr	r3, [pc, #344]	; (8004d4c <HAL_I2C_Mem_Read+0x260>)
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	0023      	movs	r3, r4
 8004bf6:	f000 fac9 	bl	800518c <I2C_TransferConfig>
 8004bfa:	e012      	b.n	8004c22 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	2380      	movs	r3, #128	; 0x80
 8004c0e:	049c      	lsls	r4, r3, #18
 8004c10:	230a      	movs	r3, #10
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	8819      	ldrh	r1, [r3, #0]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	4b4c      	ldr	r3, [pc, #304]	; (8004d4c <HAL_I2C_Mem_Read+0x260>)
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	0023      	movs	r3, r4
 8004c1e:	f000 fab5 	bl	800518c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	0013      	movs	r3, r2
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2104      	movs	r1, #4
 8004c30:	f000 f978 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004c34:	1e03      	subs	r3, r0, #0
 8004c36:	d001      	beq.n	8004c3c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e082      	b.n	8004d42 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d03a      	beq.n	8004cee <HAL_I2C_Mem_Read+0x202>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d136      	bne.n	8004cee <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	0013      	movs	r3, r2
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2180      	movs	r1, #128	; 0x80
 8004c8e:	f000 f949 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004c92:	1e03      	subs	r3, r0, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e053      	b.n	8004d42 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2bff      	cmp	r3, #255	; 0xff
 8004ca2:	d911      	bls.n	8004cc8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	22ff      	movs	r2, #255	; 0xff
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	045c      	lsls	r4, r3, #17
 8004cb4:	230a      	movs	r3, #10
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	8819      	ldrh	r1, [r3, #0]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	0023      	movs	r3, r4
 8004cc2:	f000 fa63 	bl	800518c <I2C_TransferConfig>
 8004cc6:	e012      	b.n	8004cee <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	2380      	movs	r3, #128	; 0x80
 8004cda:	049c      	lsls	r4, r3, #18
 8004cdc:	230a      	movs	r3, #10
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	8819      	ldrh	r1, [r3, #0]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	0023      	movs	r3, r4
 8004cea:	f000 fa4f 	bl	800518c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d194      	bne.n	8004c22 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f000 f98e 	bl	8005020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d04:	1e03      	subs	r3, r0, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e01a      	b.n	8004d42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2220      	movs	r2, #32
 8004d12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	490c      	ldr	r1, [pc, #48]	; (8004d50 <HAL_I2C_Mem_Read+0x264>)
 8004d20:	400a      	ands	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2241      	movs	r2, #65	; 0x41
 8004d28:	2120      	movs	r1, #32
 8004d2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2242      	movs	r2, #66	; 0x42
 8004d30:	2100      	movs	r1, #0
 8004d32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2240      	movs	r2, #64	; 0x40
 8004d38:	2100      	movs	r1, #0
 8004d3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e000      	b.n	8004d42 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
  }
}
 8004d42:	0018      	movs	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b007      	add	sp, #28
 8004d48:	bd90      	pop	{r4, r7, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	80002400 	.word	0x80002400
 8004d50:	fe00e800 	.word	0xfe00e800

08004d54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004d54:	b5b0      	push	{r4, r5, r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	000c      	movs	r4, r1
 8004d5e:	0010      	movs	r0, r2
 8004d60:	0019      	movs	r1, r3
 8004d62:	250a      	movs	r5, #10
 8004d64:	197b      	adds	r3, r7, r5
 8004d66:	1c22      	adds	r2, r4, #0
 8004d68:	801a      	strh	r2, [r3, #0]
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	1c02      	adds	r2, r0, #0
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	1dbb      	adds	r3, r7, #6
 8004d74:	1c0a      	adds	r2, r1, #0
 8004d76:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d78:	1dbb      	adds	r3, r7, #6
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	045c      	lsls	r4, r3, #17
 8004d82:	197b      	adds	r3, r7, r5
 8004d84:	8819      	ldrh	r1, [r3, #0]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <I2C_RequestMemoryWrite+0xc4>)
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	0023      	movs	r3, r4
 8004d8e:	f000 f9fd 	bl	800518c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d94:	6a39      	ldr	r1, [r7, #32]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 f902 	bl	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d001      	beq.n	8004da6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e033      	b.n	8004e0e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004da6:	1dbb      	adds	r3, r7, #6
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d107      	bne.n	8004dbe <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dae:	2308      	movs	r3, #8
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
 8004dbc:	e019      	b.n	8004df2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	0a1b      	lsrs	r3, r3, #8
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd2:	6a39      	ldr	r1, [r7, #32]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f000 f8e3 	bl	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ddc:	1e03      	subs	r3, r0, #0
 8004dde:	d001      	beq.n	8004de4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e014      	b.n	8004e0e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004de4:	2308      	movs	r3, #8
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004df2:	6a3a      	ldr	r2, [r7, #32]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	0013      	movs	r3, r2
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2180      	movs	r1, #128	; 0x80
 8004e00:	f000 f890 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004e04:	1e03      	subs	r3, r0, #0
 8004e06:	d001      	beq.n	8004e0c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b004      	add	sp, #16
 8004e14:	bdb0      	pop	{r4, r5, r7, pc}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	80002000 	.word	0x80002000

08004e1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e1c:	b5b0      	push	{r4, r5, r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	000c      	movs	r4, r1
 8004e26:	0010      	movs	r0, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	250a      	movs	r5, #10
 8004e2c:	197b      	adds	r3, r7, r5
 8004e2e:	1c22      	adds	r2, r4, #0
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	2308      	movs	r3, #8
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	1c02      	adds	r2, r0, #0
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	1dbb      	adds	r3, r7, #6
 8004e3c:	1c0a      	adds	r2, r1, #0
 8004e3e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e40:	1dbb      	adds	r3, r7, #6
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	197b      	adds	r3, r7, r5
 8004e48:	8819      	ldrh	r1, [r3, #0]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	4b23      	ldr	r3, [pc, #140]	; (8004edc <I2C_RequestMemoryRead+0xc0>)
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	2300      	movs	r3, #0
 8004e52:	f000 f99b 	bl	800518c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e58:	6a39      	ldr	r1, [r7, #32]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f000 f8a0 	bl	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e62:	1e03      	subs	r3, r0, #0
 8004e64:	d001      	beq.n	8004e6a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e033      	b.n	8004ed2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e6a:	1dbb      	adds	r3, r7, #6
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d107      	bne.n	8004e82 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e72:	2308      	movs	r3, #8
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e80:	e019      	b.n	8004eb6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e82:	2308      	movs	r3, #8
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	6a39      	ldr	r1, [r7, #32]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f000 f881 	bl	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ea0:	1e03      	subs	r3, r0, #0
 8004ea2:	d001      	beq.n	8004ea8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e014      	b.n	8004ed2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	0013      	movs	r3, r2
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2140      	movs	r1, #64	; 0x40
 8004ec4:	f000 f82e 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004ec8:	1e03      	subs	r3, r0, #0
 8004eca:	d001      	beq.n	8004ed0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	80002000 	.word	0x80002000

08004ee0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d103      	bne.n	8004efe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2201      	movs	r2, #1
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d007      	beq.n	8004f1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2101      	movs	r1, #1
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	619a      	str	r2, [r3, #24]
  }
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b002      	add	sp, #8
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	1dfb      	adds	r3, r7, #7
 8004f32:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f34:	e021      	b.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	d01e      	beq.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3c:	f7fe fca2 	bl	8003884 <HAL_GetTick>
 8004f40:	0002      	movs	r2, r0
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d302      	bcc.n	8004f52 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d113      	bne.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	2220      	movs	r2, #32
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2241      	movs	r2, #65	; 0x41
 8004f62:	2120      	movs	r1, #32
 8004f64:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2242      	movs	r2, #66	; 0x42
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2240      	movs	r2, #64	; 0x40
 8004f72:	2100      	movs	r1, #0
 8004f74:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e00f      	b.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	4013      	ands	r3, r2
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	425a      	negs	r2, r3
 8004f8a:	4153      	adcs	r3, r2
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	001a      	movs	r2, r3
 8004f90:	1dfb      	adds	r3, r7, #7
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d0ce      	beq.n	8004f36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b004      	add	sp, #16
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fae:	e02b      	b.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f000 f86e 	bl	8005098 <I2C_IsAcknowledgeFailed>
 8004fbc:	1e03      	subs	r3, r0, #0
 8004fbe:	d001      	beq.n	8004fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e029      	b.n	8005018 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	d01e      	beq.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fca:	f7fe fc5b 	bl	8003884 <HAL_GetTick>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d302      	bcc.n	8004fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d113      	bne.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2241      	movs	r2, #65	; 0x41
 8004ff0:	2120      	movs	r1, #32
 8004ff2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2242      	movs	r2, #66	; 0x42
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2240      	movs	r2, #64	; 0x40
 8005000:	2100      	movs	r1, #0
 8005002:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e007      	b.n	8005018 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2202      	movs	r2, #2
 8005010:	4013      	ands	r3, r2
 8005012:	2b02      	cmp	r3, #2
 8005014:	d1cc      	bne.n	8004fb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	0018      	movs	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	b004      	add	sp, #16
 800501e:	bd80      	pop	{r7, pc}

08005020 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800502c:	e028      	b.n	8005080 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	0018      	movs	r0, r3
 8005036:	f000 f82f 	bl	8005098 <I2C_IsAcknowledgeFailed>
 800503a:	1e03      	subs	r3, r0, #0
 800503c:	d001      	beq.n	8005042 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e026      	b.n	8005090 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005042:	f7fe fc1f 	bl	8003884 <HAL_GetTick>
 8005046:	0002      	movs	r2, r0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d113      	bne.n	8005080 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	2220      	movs	r2, #32
 800505e:	431a      	orrs	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2241      	movs	r2, #65	; 0x41
 8005068:	2120      	movs	r1, #32
 800506a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2242      	movs	r2, #66	; 0x42
 8005070:	2100      	movs	r1, #0
 8005072:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2240      	movs	r2, #64	; 0x40
 8005078:	2100      	movs	r1, #0
 800507a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e007      	b.n	8005090 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2220      	movs	r2, #32
 8005088:	4013      	ands	r3, r2
 800508a:	2b20      	cmp	r3, #32
 800508c:	d1cf      	bne.n	800502e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b004      	add	sp, #16
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2210      	movs	r2, #16
 80050ac:	4013      	ands	r3, r2
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d164      	bne.n	800517c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	049b      	lsls	r3, r3, #18
 80050bc:	401a      	ands	r2, r3
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	049b      	lsls	r3, r3, #18
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d02b      	beq.n	800511e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2180      	movs	r1, #128	; 0x80
 80050d2:	01c9      	lsls	r1, r1, #7
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050d8:	e021      	b.n	800511e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	3301      	adds	r3, #1
 80050de:	d01e      	beq.n	800511e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e0:	f7fe fbd0 	bl	8003884 <HAL_GetTick>
 80050e4:	0002      	movs	r2, r0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d302      	bcc.n	80050f6 <I2C_IsAcknowledgeFailed+0x5e>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d113      	bne.n	800511e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	2220      	movs	r2, #32
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2241      	movs	r2, #65	; 0x41
 8005106:	2120      	movs	r1, #32
 8005108:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2242      	movs	r2, #66	; 0x42
 800510e:	2100      	movs	r1, #0
 8005110:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2240      	movs	r2, #64	; 0x40
 8005116:	2100      	movs	r1, #0
 8005118:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e02f      	b.n	800517e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	2220      	movs	r2, #32
 8005126:	4013      	ands	r3, r2
 8005128:	2b20      	cmp	r3, #32
 800512a:	d1d6      	bne.n	80050da <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2210      	movs	r2, #16
 8005132:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2220      	movs	r2, #32
 800513a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	0018      	movs	r0, r3
 8005140:	f7ff fece 	bl	8004ee0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	490e      	ldr	r1, [pc, #56]	; (8005188 <I2C_IsAcknowledgeFailed+0xf0>)
 8005150:	400a      	ands	r2, r1
 8005152:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005158:	2204      	movs	r2, #4
 800515a:	431a      	orrs	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2241      	movs	r2, #65	; 0x41
 8005164:	2120      	movs	r1, #32
 8005166:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2242      	movs	r2, #66	; 0x42
 800516c:	2100      	movs	r1, #0
 800516e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2240      	movs	r2, #64	; 0x40
 8005174:	2100      	movs	r1, #0
 8005176:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	0018      	movs	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	b004      	add	sp, #16
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	fe00e800 	.word	0xfe00e800

0800518c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	0008      	movs	r0, r1
 8005196:	0011      	movs	r1, r2
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	240a      	movs	r4, #10
 800519c:	193b      	adds	r3, r7, r4
 800519e:	1c02      	adds	r2, r0, #0
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	2009      	movs	r0, #9
 80051a4:	183b      	adds	r3, r7, r0
 80051a6:	1c0a      	adds	r2, r1, #0
 80051a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	6a3a      	ldr	r2, [r7, #32]
 80051b2:	0d51      	lsrs	r1, r2, #21
 80051b4:	2280      	movs	r2, #128	; 0x80
 80051b6:	00d2      	lsls	r2, r2, #3
 80051b8:	400a      	ands	r2, r1
 80051ba:	490e      	ldr	r1, [pc, #56]	; (80051f4 <I2C_TransferConfig+0x68>)
 80051bc:	430a      	orrs	r2, r1
 80051be:	43d2      	mvns	r2, r2
 80051c0:	401a      	ands	r2, r3
 80051c2:	0011      	movs	r1, r2
 80051c4:	193b      	adds	r3, r7, r4
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	059b      	lsls	r3, r3, #22
 80051ca:	0d9a      	lsrs	r2, r3, #22
 80051cc:	183b      	adds	r3, r7, r0
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	0418      	lsls	r0, r3, #16
 80051d2:	23ff      	movs	r3, #255	; 0xff
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	4003      	ands	r3, r0
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	431a      	orrs	r2, r3
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b005      	add	sp, #20
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	03ff63ff 	.word	0x03ff63ff

080051f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2241      	movs	r2, #65	; 0x41
 8005206:	5c9b      	ldrb	r3, [r3, r2]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b20      	cmp	r3, #32
 800520c:	d138      	bne.n	8005280 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2240      	movs	r2, #64	; 0x40
 8005212:	5c9b      	ldrb	r3, [r3, r2]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005218:	2302      	movs	r3, #2
 800521a:	e032      	b.n	8005282 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2240      	movs	r2, #64	; 0x40
 8005220:	2101      	movs	r1, #1
 8005222:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2241      	movs	r2, #65	; 0x41
 8005228:	2124      	movs	r1, #36	; 0x24
 800522a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2101      	movs	r1, #1
 8005238:	438a      	bics	r2, r1
 800523a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4911      	ldr	r1, [pc, #68]	; (800528c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005248:	400a      	ands	r2, r1
 800524a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6819      	ldr	r1, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2101      	movs	r1, #1
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2241      	movs	r2, #65	; 0x41
 8005270:	2120      	movs	r1, #32
 8005272:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2240      	movs	r2, #64	; 0x40
 8005278:	2100      	movs	r1, #0
 800527a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e000      	b.n	8005282 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005280:	2302      	movs	r3, #2
  }
}
 8005282:	0018      	movs	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	b002      	add	sp, #8
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	ffffefff 	.word	0xffffefff

08005290 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2241      	movs	r2, #65	; 0x41
 800529e:	5c9b      	ldrb	r3, [r3, r2]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d139      	bne.n	800531a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2240      	movs	r2, #64	; 0x40
 80052aa:	5c9b      	ldrb	r3, [r3, r2]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e033      	b.n	800531c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2240      	movs	r2, #64	; 0x40
 80052b8:	2101      	movs	r1, #1
 80052ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2241      	movs	r2, #65	; 0x41
 80052c0:	2124      	movs	r1, #36	; 0x24
 80052c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2101      	movs	r1, #1
 80052d0:	438a      	bics	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a11      	ldr	r2, [pc, #68]	; (8005324 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2101      	movs	r1, #1
 8005302:	430a      	orrs	r2, r1
 8005304:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2241      	movs	r2, #65	; 0x41
 800530a:	2120      	movs	r1, #32
 800530c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2240      	movs	r2, #64	; 0x40
 8005312:	2100      	movs	r1, #0
 8005314:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e000      	b.n	800531c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b004      	add	sp, #16
 8005322:	bd80      	pop	{r7, pc}
 8005324:	fffff0ff 	.word	0xfffff0ff

08005328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e301      	b.n	800593e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2201      	movs	r2, #1
 8005340:	4013      	ands	r3, r2
 8005342:	d100      	bne.n	8005346 <HAL_RCC_OscConfig+0x1e>
 8005344:	e08d      	b.n	8005462 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005346:	4bc3      	ldr	r3, [pc, #780]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	220c      	movs	r2, #12
 800534c:	4013      	ands	r3, r2
 800534e:	2b04      	cmp	r3, #4
 8005350:	d00e      	beq.n	8005370 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005352:	4bc0      	ldr	r3, [pc, #768]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	220c      	movs	r2, #12
 8005358:	4013      	ands	r3, r2
 800535a:	2b08      	cmp	r3, #8
 800535c:	d116      	bne.n	800538c <HAL_RCC_OscConfig+0x64>
 800535e:	4bbd      	ldr	r3, [pc, #756]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	025b      	lsls	r3, r3, #9
 8005366:	401a      	ands	r2, r3
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	025b      	lsls	r3, r3, #9
 800536c:	429a      	cmp	r2, r3
 800536e:	d10d      	bne.n	800538c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005370:	4bb8      	ldr	r3, [pc, #736]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	029b      	lsls	r3, r3, #10
 8005378:	4013      	ands	r3, r2
 800537a:	d100      	bne.n	800537e <HAL_RCC_OscConfig+0x56>
 800537c:	e070      	b.n	8005460 <HAL_RCC_OscConfig+0x138>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d000      	beq.n	8005388 <HAL_RCC_OscConfig+0x60>
 8005386:	e06b      	b.n	8005460 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e2d8      	b.n	800593e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d107      	bne.n	80053a4 <HAL_RCC_OscConfig+0x7c>
 8005394:	4baf      	ldr	r3, [pc, #700]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4bae      	ldr	r3, [pc, #696]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 800539a:	2180      	movs	r1, #128	; 0x80
 800539c:	0249      	lsls	r1, r1, #9
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e02f      	b.n	8005404 <HAL_RCC_OscConfig+0xdc>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10c      	bne.n	80053c6 <HAL_RCC_OscConfig+0x9e>
 80053ac:	4ba9      	ldr	r3, [pc, #676]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4ba8      	ldr	r3, [pc, #672]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053b2:	49a9      	ldr	r1, [pc, #676]	; (8005658 <HAL_RCC_OscConfig+0x330>)
 80053b4:	400a      	ands	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	4ba6      	ldr	r3, [pc, #664]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	4ba5      	ldr	r3, [pc, #660]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053be:	49a7      	ldr	r1, [pc, #668]	; (800565c <HAL_RCC_OscConfig+0x334>)
 80053c0:	400a      	ands	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e01e      	b.n	8005404 <HAL_RCC_OscConfig+0xdc>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d10e      	bne.n	80053ec <HAL_RCC_OscConfig+0xc4>
 80053ce:	4ba1      	ldr	r3, [pc, #644]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4ba0      	ldr	r3, [pc, #640]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053d4:	2180      	movs	r1, #128	; 0x80
 80053d6:	02c9      	lsls	r1, r1, #11
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	4b9d      	ldr	r3, [pc, #628]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4b9c      	ldr	r3, [pc, #624]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053e2:	2180      	movs	r1, #128	; 0x80
 80053e4:	0249      	lsls	r1, r1, #9
 80053e6:	430a      	orrs	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e00b      	b.n	8005404 <HAL_RCC_OscConfig+0xdc>
 80053ec:	4b99      	ldr	r3, [pc, #612]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4b98      	ldr	r3, [pc, #608]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053f2:	4999      	ldr	r1, [pc, #612]	; (8005658 <HAL_RCC_OscConfig+0x330>)
 80053f4:	400a      	ands	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	4b96      	ldr	r3, [pc, #600]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4b95      	ldr	r3, [pc, #596]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80053fe:	4997      	ldr	r1, [pc, #604]	; (800565c <HAL_RCC_OscConfig+0x334>)
 8005400:	400a      	ands	r2, r1
 8005402:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d014      	beq.n	8005436 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7fe fa3a 	bl	8003884 <HAL_GetTick>
 8005410:	0003      	movs	r3, r0
 8005412:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005416:	f7fe fa35 	bl	8003884 <HAL_GetTick>
 800541a:	0002      	movs	r2, r0
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b64      	cmp	r3, #100	; 0x64
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e28a      	b.n	800593e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005428:	4b8a      	ldr	r3, [pc, #552]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	029b      	lsls	r3, r3, #10
 8005430:	4013      	ands	r3, r2
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0xee>
 8005434:	e015      	b.n	8005462 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005436:	f7fe fa25 	bl	8003884 <HAL_GetTick>
 800543a:	0003      	movs	r3, r0
 800543c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005440:	f7fe fa20 	bl	8003884 <HAL_GetTick>
 8005444:	0002      	movs	r2, r0
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e275      	b.n	800593e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005452:	4b80      	ldr	r3, [pc, #512]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	029b      	lsls	r3, r3, #10
 800545a:	4013      	ands	r3, r2
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x118>
 800545e:	e000      	b.n	8005462 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005460:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2202      	movs	r2, #2
 8005468:	4013      	ands	r3, r2
 800546a:	d100      	bne.n	800546e <HAL_RCC_OscConfig+0x146>
 800546c:	e069      	b.n	8005542 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800546e:	4b79      	ldr	r3, [pc, #484]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	220c      	movs	r2, #12
 8005474:	4013      	ands	r3, r2
 8005476:	d00b      	beq.n	8005490 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005478:	4b76      	ldr	r3, [pc, #472]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	220c      	movs	r2, #12
 800547e:	4013      	ands	r3, r2
 8005480:	2b08      	cmp	r3, #8
 8005482:	d11c      	bne.n	80054be <HAL_RCC_OscConfig+0x196>
 8005484:	4b73      	ldr	r3, [pc, #460]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	025b      	lsls	r3, r3, #9
 800548c:	4013      	ands	r3, r2
 800548e:	d116      	bne.n	80054be <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005490:	4b70      	ldr	r3, [pc, #448]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2202      	movs	r2, #2
 8005496:	4013      	ands	r3, r2
 8005498:	d005      	beq.n	80054a6 <HAL_RCC_OscConfig+0x17e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e24b      	b.n	800593e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a6:	4b6b      	ldr	r3, [pc, #428]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	22f8      	movs	r2, #248	; 0xf8
 80054ac:	4393      	bics	r3, r2
 80054ae:	0019      	movs	r1, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	00da      	lsls	r2, r3, #3
 80054b6:	4b67      	ldr	r3, [pc, #412]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054bc:	e041      	b.n	8005542 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d024      	beq.n	8005510 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c6:	4b63      	ldr	r3, [pc, #396]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b62      	ldr	r3, [pc, #392]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80054cc:	2101      	movs	r1, #1
 80054ce:	430a      	orrs	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d2:	f7fe f9d7 	bl	8003884 <HAL_GetTick>
 80054d6:	0003      	movs	r3, r0
 80054d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054dc:	f7fe f9d2 	bl	8003884 <HAL_GetTick>
 80054e0:	0002      	movs	r2, r0
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e227      	b.n	800593e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ee:	4b59      	ldr	r3, [pc, #356]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2202      	movs	r2, #2
 80054f4:	4013      	ands	r3, r2
 80054f6:	d0f1      	beq.n	80054dc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f8:	4b56      	ldr	r3, [pc, #344]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	22f8      	movs	r2, #248	; 0xf8
 80054fe:	4393      	bics	r3, r2
 8005500:	0019      	movs	r1, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00da      	lsls	r2, r3, #3
 8005508:	4b52      	ldr	r3, [pc, #328]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 800550a:	430a      	orrs	r2, r1
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e018      	b.n	8005542 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005510:	4b50      	ldr	r3, [pc, #320]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b4f      	ldr	r3, [pc, #316]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005516:	2101      	movs	r1, #1
 8005518:	438a      	bics	r2, r1
 800551a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fe f9b2 	bl	8003884 <HAL_GetTick>
 8005520:	0003      	movs	r3, r0
 8005522:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005526:	f7fe f9ad 	bl	8003884 <HAL_GetTick>
 800552a:	0002      	movs	r2, r0
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e202      	b.n	800593e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005538:	4b46      	ldr	r3, [pc, #280]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2202      	movs	r2, #2
 800553e:	4013      	ands	r3, r2
 8005540:	d1f1      	bne.n	8005526 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2208      	movs	r2, #8
 8005548:	4013      	ands	r3, r2
 800554a:	d036      	beq.n	80055ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d019      	beq.n	8005588 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005554:	4b3f      	ldr	r3, [pc, #252]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005558:	4b3e      	ldr	r3, [pc, #248]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 800555a:	2101      	movs	r1, #1
 800555c:	430a      	orrs	r2, r1
 800555e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005560:	f7fe f990 	bl	8003884 <HAL_GetTick>
 8005564:	0003      	movs	r3, r0
 8005566:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800556a:	f7fe f98b 	bl	8003884 <HAL_GetTick>
 800556e:	0002      	movs	r2, r0
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e1e0      	b.n	800593e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557c:	4b35      	ldr	r3, [pc, #212]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2202      	movs	r2, #2
 8005582:	4013      	ands	r3, r2
 8005584:	d0f1      	beq.n	800556a <HAL_RCC_OscConfig+0x242>
 8005586:	e018      	b.n	80055ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005588:	4b32      	ldr	r3, [pc, #200]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 800558a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800558c:	4b31      	ldr	r3, [pc, #196]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 800558e:	2101      	movs	r1, #1
 8005590:	438a      	bics	r2, r1
 8005592:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005594:	f7fe f976 	bl	8003884 <HAL_GetTick>
 8005598:	0003      	movs	r3, r0
 800559a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800559e:	f7fe f971 	bl	8003884 <HAL_GetTick>
 80055a2:	0002      	movs	r2, r0
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e1c6      	b.n	800593e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b0:	4b28      	ldr	r3, [pc, #160]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2202      	movs	r2, #2
 80055b6:	4013      	ands	r3, r2
 80055b8:	d1f1      	bne.n	800559e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2204      	movs	r2, #4
 80055c0:	4013      	ands	r3, r2
 80055c2:	d100      	bne.n	80055c6 <HAL_RCC_OscConfig+0x29e>
 80055c4:	e0b4      	b.n	8005730 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055c6:	201f      	movs	r0, #31
 80055c8:	183b      	adds	r3, r7, r0
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ce:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	2380      	movs	r3, #128	; 0x80
 80055d4:	055b      	lsls	r3, r3, #21
 80055d6:	4013      	ands	r3, r2
 80055d8:	d110      	bne.n	80055fc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055da:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80055e0:	2180      	movs	r1, #128	; 0x80
 80055e2:	0549      	lsls	r1, r1, #21
 80055e4:	430a      	orrs	r2, r1
 80055e6:	61da      	str	r2, [r3, #28]
 80055e8:	4b1a      	ldr	r3, [pc, #104]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	055b      	lsls	r3, r3, #21
 80055f0:	4013      	ands	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055f6:	183b      	adds	r3, r7, r0
 80055f8:	2201      	movs	r2, #1
 80055fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fc:	4b18      	ldr	r3, [pc, #96]	; (8005660 <HAL_RCC_OscConfig+0x338>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	4013      	ands	r3, r2
 8005606:	d11a      	bne.n	800563e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005608:	4b15      	ldr	r3, [pc, #84]	; (8005660 <HAL_RCC_OscConfig+0x338>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b14      	ldr	r3, [pc, #80]	; (8005660 <HAL_RCC_OscConfig+0x338>)
 800560e:	2180      	movs	r1, #128	; 0x80
 8005610:	0049      	lsls	r1, r1, #1
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005616:	f7fe f935 	bl	8003884 <HAL_GetTick>
 800561a:	0003      	movs	r3, r0
 800561c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005620:	f7fe f930 	bl	8003884 <HAL_GetTick>
 8005624:	0002      	movs	r2, r0
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e185      	b.n	800593e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <HAL_RCC_OscConfig+0x338>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	4013      	ands	r3, r2
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d10e      	bne.n	8005664 <HAL_RCC_OscConfig+0x33c>
 8005646:	4b03      	ldr	r3, [pc, #12]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 8005648:	6a1a      	ldr	r2, [r3, #32]
 800564a:	4b02      	ldr	r3, [pc, #8]	; (8005654 <HAL_RCC_OscConfig+0x32c>)
 800564c:	2101      	movs	r1, #1
 800564e:	430a      	orrs	r2, r1
 8005650:	621a      	str	r2, [r3, #32]
 8005652:	e035      	b.n	80056c0 <HAL_RCC_OscConfig+0x398>
 8005654:	40021000 	.word	0x40021000
 8005658:	fffeffff 	.word	0xfffeffff
 800565c:	fffbffff 	.word	0xfffbffff
 8005660:	40007000 	.word	0x40007000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10c      	bne.n	8005686 <HAL_RCC_OscConfig+0x35e>
 800566c:	4bb6      	ldr	r3, [pc, #728]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 800566e:	6a1a      	ldr	r2, [r3, #32]
 8005670:	4bb5      	ldr	r3, [pc, #724]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005672:	2101      	movs	r1, #1
 8005674:	438a      	bics	r2, r1
 8005676:	621a      	str	r2, [r3, #32]
 8005678:	4bb3      	ldr	r3, [pc, #716]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 800567a:	6a1a      	ldr	r2, [r3, #32]
 800567c:	4bb2      	ldr	r3, [pc, #712]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 800567e:	2104      	movs	r1, #4
 8005680:	438a      	bics	r2, r1
 8005682:	621a      	str	r2, [r3, #32]
 8005684:	e01c      	b.n	80056c0 <HAL_RCC_OscConfig+0x398>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b05      	cmp	r3, #5
 800568c:	d10c      	bne.n	80056a8 <HAL_RCC_OscConfig+0x380>
 800568e:	4bae      	ldr	r3, [pc, #696]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005690:	6a1a      	ldr	r2, [r3, #32]
 8005692:	4bad      	ldr	r3, [pc, #692]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005694:	2104      	movs	r1, #4
 8005696:	430a      	orrs	r2, r1
 8005698:	621a      	str	r2, [r3, #32]
 800569a:	4bab      	ldr	r3, [pc, #684]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 800569c:	6a1a      	ldr	r2, [r3, #32]
 800569e:	4baa      	ldr	r3, [pc, #680]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80056a0:	2101      	movs	r1, #1
 80056a2:	430a      	orrs	r2, r1
 80056a4:	621a      	str	r2, [r3, #32]
 80056a6:	e00b      	b.n	80056c0 <HAL_RCC_OscConfig+0x398>
 80056a8:	4ba7      	ldr	r3, [pc, #668]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80056aa:	6a1a      	ldr	r2, [r3, #32]
 80056ac:	4ba6      	ldr	r3, [pc, #664]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80056ae:	2101      	movs	r1, #1
 80056b0:	438a      	bics	r2, r1
 80056b2:	621a      	str	r2, [r3, #32]
 80056b4:	4ba4      	ldr	r3, [pc, #656]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	4ba3      	ldr	r3, [pc, #652]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80056ba:	2104      	movs	r1, #4
 80056bc:	438a      	bics	r2, r1
 80056be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d014      	beq.n	80056f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c8:	f7fe f8dc 	bl	8003884 <HAL_GetTick>
 80056cc:	0003      	movs	r3, r0
 80056ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d0:	e009      	b.n	80056e6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d2:	f7fe f8d7 	bl	8003884 <HAL_GetTick>
 80056d6:	0002      	movs	r2, r0
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	4a9b      	ldr	r2, [pc, #620]	; (800594c <HAL_RCC_OscConfig+0x624>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e12b      	b.n	800593e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e6:	4b98      	ldr	r3, [pc, #608]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	2202      	movs	r2, #2
 80056ec:	4013      	ands	r3, r2
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x3aa>
 80056f0:	e013      	b.n	800571a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f2:	f7fe f8c7 	bl	8003884 <HAL_GetTick>
 80056f6:	0003      	movs	r3, r0
 80056f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056fa:	e009      	b.n	8005710 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056fc:	f7fe f8c2 	bl	8003884 <HAL_GetTick>
 8005700:	0002      	movs	r2, r0
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	4a91      	ldr	r2, [pc, #580]	; (800594c <HAL_RCC_OscConfig+0x624>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e116      	b.n	800593e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005710:	4b8d      	ldr	r3, [pc, #564]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	2202      	movs	r2, #2
 8005716:	4013      	ands	r3, r2
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800571a:	231f      	movs	r3, #31
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d105      	bne.n	8005730 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005724:	4b88      	ldr	r3, [pc, #544]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	4b87      	ldr	r3, [pc, #540]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 800572a:	4989      	ldr	r1, [pc, #548]	; (8005950 <HAL_RCC_OscConfig+0x628>)
 800572c:	400a      	ands	r2, r1
 800572e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2210      	movs	r2, #16
 8005736:	4013      	ands	r3, r2
 8005738:	d063      	beq.n	8005802 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d12a      	bne.n	8005798 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005742:	4b81      	ldr	r3, [pc, #516]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005746:	4b80      	ldr	r3, [pc, #512]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005748:	2104      	movs	r1, #4
 800574a:	430a      	orrs	r2, r1
 800574c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800574e:	4b7e      	ldr	r3, [pc, #504]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005752:	4b7d      	ldr	r3, [pc, #500]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005754:	2101      	movs	r1, #1
 8005756:	430a      	orrs	r2, r1
 8005758:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800575a:	f7fe f893 	bl	8003884 <HAL_GetTick>
 800575e:	0003      	movs	r3, r0
 8005760:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005764:	f7fe f88e 	bl	8003884 <HAL_GetTick>
 8005768:	0002      	movs	r2, r0
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e0e3      	b.n	800593e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005776:	4b74      	ldr	r3, [pc, #464]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577a:	2202      	movs	r2, #2
 800577c:	4013      	ands	r3, r2
 800577e:	d0f1      	beq.n	8005764 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005780:	4b71      	ldr	r3, [pc, #452]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	22f8      	movs	r2, #248	; 0xf8
 8005786:	4393      	bics	r3, r2
 8005788:	0019      	movs	r1, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	00da      	lsls	r2, r3, #3
 8005790:	4b6d      	ldr	r3, [pc, #436]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005792:	430a      	orrs	r2, r1
 8005794:	635a      	str	r2, [r3, #52]	; 0x34
 8005796:	e034      	b.n	8005802 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	3305      	adds	r3, #5
 800579e:	d111      	bne.n	80057c4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80057a0:	4b69      	ldr	r3, [pc, #420]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80057a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a4:	4b68      	ldr	r3, [pc, #416]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80057a6:	2104      	movs	r1, #4
 80057a8:	438a      	bics	r2, r1
 80057aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80057ac:	4b66      	ldr	r3, [pc, #408]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	22f8      	movs	r2, #248	; 0xf8
 80057b2:	4393      	bics	r3, r2
 80057b4:	0019      	movs	r1, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	00da      	lsls	r2, r3, #3
 80057bc:	4b62      	ldr	r3, [pc, #392]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80057be:	430a      	orrs	r2, r1
 80057c0:	635a      	str	r2, [r3, #52]	; 0x34
 80057c2:	e01e      	b.n	8005802 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80057c4:	4b60      	ldr	r3, [pc, #384]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80057c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c8:	4b5f      	ldr	r3, [pc, #380]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80057ca:	2104      	movs	r1, #4
 80057cc:	430a      	orrs	r2, r1
 80057ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80057d0:	4b5d      	ldr	r3, [pc, #372]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80057d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d4:	4b5c      	ldr	r3, [pc, #368]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80057d6:	2101      	movs	r1, #1
 80057d8:	438a      	bics	r2, r1
 80057da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057dc:	f7fe f852 	bl	8003884 <HAL_GetTick>
 80057e0:	0003      	movs	r3, r0
 80057e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80057e6:	f7fe f84d 	bl	8003884 <HAL_GetTick>
 80057ea:	0002      	movs	r2, r0
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e0a2      	b.n	800593e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80057f8:	4b53      	ldr	r3, [pc, #332]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	2202      	movs	r2, #2
 80057fe:	4013      	ands	r3, r2
 8005800:	d1f1      	bne.n	80057e6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d100      	bne.n	800580c <HAL_RCC_OscConfig+0x4e4>
 800580a:	e097      	b.n	800593c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800580c:	4b4e      	ldr	r3, [pc, #312]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	220c      	movs	r2, #12
 8005812:	4013      	ands	r3, r2
 8005814:	2b08      	cmp	r3, #8
 8005816:	d100      	bne.n	800581a <HAL_RCC_OscConfig+0x4f2>
 8005818:	e06b      	b.n	80058f2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d14c      	bne.n	80058bc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005822:	4b49      	ldr	r3, [pc, #292]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b48      	ldr	r3, [pc, #288]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005828:	494a      	ldr	r1, [pc, #296]	; (8005954 <HAL_RCC_OscConfig+0x62c>)
 800582a:	400a      	ands	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582e:	f7fe f829 	bl	8003884 <HAL_GetTick>
 8005832:	0003      	movs	r3, r0
 8005834:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005838:	f7fe f824 	bl	8003884 <HAL_GetTick>
 800583c:	0002      	movs	r2, r0
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e079      	b.n	800593e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800584a:	4b3f      	ldr	r3, [pc, #252]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	2380      	movs	r3, #128	; 0x80
 8005850:	049b      	lsls	r3, r3, #18
 8005852:	4013      	ands	r3, r2
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005856:	4b3c      	ldr	r3, [pc, #240]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	220f      	movs	r2, #15
 800585c:	4393      	bics	r3, r2
 800585e:	0019      	movs	r1, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	4b38      	ldr	r3, [pc, #224]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005866:	430a      	orrs	r2, r1
 8005868:	62da      	str	r2, [r3, #44]	; 0x2c
 800586a:	4b37      	ldr	r3, [pc, #220]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	4a3a      	ldr	r2, [pc, #232]	; (8005958 <HAL_RCC_OscConfig+0x630>)
 8005870:	4013      	ands	r3, r2
 8005872:	0019      	movs	r1, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	431a      	orrs	r2, r3
 800587e:	4b32      	ldr	r3, [pc, #200]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005880:	430a      	orrs	r2, r1
 8005882:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005884:	4b30      	ldr	r3, [pc, #192]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 800588a:	2180      	movs	r1, #128	; 0x80
 800588c:	0449      	lsls	r1, r1, #17
 800588e:	430a      	orrs	r2, r1
 8005890:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005892:	f7fd fff7 	bl	8003884 <HAL_GetTick>
 8005896:	0003      	movs	r3, r0
 8005898:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589c:	f7fd fff2 	bl	8003884 <HAL_GetTick>
 80058a0:	0002      	movs	r2, r0
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e047      	b.n	800593e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058ae:	4b26      	ldr	r3, [pc, #152]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	049b      	lsls	r3, r3, #18
 80058b6:	4013      	ands	r3, r2
 80058b8:	d0f0      	beq.n	800589c <HAL_RCC_OscConfig+0x574>
 80058ba:	e03f      	b.n	800593c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058bc:	4b22      	ldr	r3, [pc, #136]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b21      	ldr	r3, [pc, #132]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80058c2:	4924      	ldr	r1, [pc, #144]	; (8005954 <HAL_RCC_OscConfig+0x62c>)
 80058c4:	400a      	ands	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fd ffdc 	bl	8003884 <HAL_GetTick>
 80058cc:	0003      	movs	r3, r0
 80058ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d2:	f7fd ffd7 	bl	8003884 <HAL_GetTick>
 80058d6:	0002      	movs	r2, r0
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e02c      	b.n	800593e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058e4:	4b18      	ldr	r3, [pc, #96]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	2380      	movs	r3, #128	; 0x80
 80058ea:	049b      	lsls	r3, r3, #18
 80058ec:	4013      	ands	r3, r2
 80058ee:	d1f0      	bne.n	80058d2 <HAL_RCC_OscConfig+0x5aa>
 80058f0:	e024      	b.n	800593c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e01f      	b.n	800593e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005904:	4b10      	ldr	r3, [pc, #64]	; (8005948 <HAL_RCC_OscConfig+0x620>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	025b      	lsls	r3, r3, #9
 8005910:	401a      	ands	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	429a      	cmp	r2, r3
 8005918:	d10e      	bne.n	8005938 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	220f      	movs	r2, #15
 800591e:	401a      	ands	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d107      	bne.n	8005938 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	23f0      	movs	r3, #240	; 0xf0
 800592c:	039b      	lsls	r3, r3, #14
 800592e:	401a      	ands	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005934:	429a      	cmp	r2, r3
 8005936:	d001      	beq.n	800593c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	0018      	movs	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	b008      	add	sp, #32
 8005944:	bd80      	pop	{r7, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	40021000 	.word	0x40021000
 800594c:	00001388 	.word	0x00001388
 8005950:	efffffff 	.word	0xefffffff
 8005954:	feffffff 	.word	0xfeffffff
 8005958:	ffc2ffff 	.word	0xffc2ffff

0800595c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0b3      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005970:	4b5b      	ldr	r3, [pc, #364]	; (8005ae0 <HAL_RCC_ClockConfig+0x184>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2201      	movs	r2, #1
 8005976:	4013      	ands	r3, r2
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d911      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597e:	4b58      	ldr	r3, [pc, #352]	; (8005ae0 <HAL_RCC_ClockConfig+0x184>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2201      	movs	r2, #1
 8005984:	4393      	bics	r3, r2
 8005986:	0019      	movs	r1, r3
 8005988:	4b55      	ldr	r3, [pc, #340]	; (8005ae0 <HAL_RCC_ClockConfig+0x184>)
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005990:	4b53      	ldr	r3, [pc, #332]	; (8005ae0 <HAL_RCC_ClockConfig+0x184>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2201      	movs	r2, #1
 8005996:	4013      	ands	r3, r2
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d001      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e09a      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2202      	movs	r2, #2
 80059a8:	4013      	ands	r3, r2
 80059aa:	d015      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2204      	movs	r2, #4
 80059b2:	4013      	ands	r3, r2
 80059b4:	d006      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80059b6:	4b4b      	ldr	r3, [pc, #300]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	4b4a      	ldr	r3, [pc, #296]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 80059bc:	21e0      	movs	r1, #224	; 0xe0
 80059be:	00c9      	lsls	r1, r1, #3
 80059c0:	430a      	orrs	r2, r1
 80059c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c4:	4b47      	ldr	r3, [pc, #284]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	22f0      	movs	r2, #240	; 0xf0
 80059ca:	4393      	bics	r3, r2
 80059cc:	0019      	movs	r1, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	4b44      	ldr	r3, [pc, #272]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2201      	movs	r2, #1
 80059de:	4013      	ands	r3, r2
 80059e0:	d040      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b3e      	ldr	r3, [pc, #248]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	029b      	lsls	r3, r3, #10
 80059f2:	4013      	ands	r3, r2
 80059f4:	d114      	bne.n	8005a20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e06e      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d107      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a02:	4b38      	ldr	r3, [pc, #224]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	2380      	movs	r3, #128	; 0x80
 8005a08:	049b      	lsls	r3, r3, #18
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e062      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a12:	4b34      	ldr	r3, [pc, #208]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2202      	movs	r2, #2
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d101      	bne.n	8005a20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e05b      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a20:	4b30      	ldr	r3, [pc, #192]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2203      	movs	r2, #3
 8005a26:	4393      	bics	r3, r2
 8005a28:	0019      	movs	r1, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	4b2d      	ldr	r3, [pc, #180]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a34:	f7fd ff26 	bl	8003884 <HAL_GetTick>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3c:	e009      	b.n	8005a52 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3e:	f7fd ff21 	bl	8003884 <HAL_GetTick>
 8005a42:	0002      	movs	r2, r0
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	4a27      	ldr	r2, [pc, #156]	; (8005ae8 <HAL_RCC_ClockConfig+0x18c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e042      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a52:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	220c      	movs	r2, #12
 8005a58:	401a      	ands	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d1ec      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a64:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <HAL_RCC_ClockConfig+0x184>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d211      	bcs.n	8005a96 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <HAL_RCC_ClockConfig+0x184>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2201      	movs	r2, #1
 8005a78:	4393      	bics	r3, r2
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	4b18      	ldr	r3, [pc, #96]	; (8005ae0 <HAL_RCC_ClockConfig+0x184>)
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a84:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <HAL_RCC_ClockConfig+0x184>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d001      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e020      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2204      	movs	r2, #4
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa0:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a11      	ldr	r2, [pc, #68]	; (8005aec <HAL_RCC_ClockConfig+0x190>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ab4:	f000 f820 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 8005ab8:	0001      	movs	r1, r0
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <HAL_RCC_ClockConfig+0x188>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	220f      	movs	r2, #15
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	4a0a      	ldr	r2, [pc, #40]	; (8005af0 <HAL_RCC_ClockConfig+0x194>)
 8005ac6:	5cd3      	ldrb	r3, [r2, r3]
 8005ac8:	000a      	movs	r2, r1
 8005aca:	40da      	lsrs	r2, r3
 8005acc:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <HAL_RCC_ClockConfig+0x198>)
 8005ace:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	f7fd fe91 	bl	80037f8 <HAL_InitTick>
  
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	0018      	movs	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b004      	add	sp, #16
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40022000 	.word	0x40022000
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	00001388 	.word	0x00001388
 8005aec:	fffff8ff 	.word	0xfffff8ff
 8005af0:	0800a010 	.word	0x0800a010
 8005af4:	20000000 	.word	0x20000000

08005af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af8:	b590      	push	{r4, r7, lr}
 8005afa:	b08f      	sub	sp, #60	; 0x3c
 8005afc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005afe:	2314      	movs	r3, #20
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	4a2b      	ldr	r2, [pc, #172]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005b06:	c313      	stmia	r3!, {r0, r1, r4}
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005b0c:	1d3b      	adds	r3, r7, #4
 8005b0e:	4a29      	ldr	r2, [pc, #164]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005b12:	c313      	stmia	r3!, {r0, r1, r4}
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b20:	2300      	movs	r3, #0
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
 8005b24:	2300      	movs	r3, #0
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005b2c:	4b22      	ldr	r3, [pc, #136]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	220c      	movs	r2, #12
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d002      	beq.n	8005b42 <HAL_RCC_GetSysClockFreq+0x4a>
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d003      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x50>
 8005b40:	e02d      	b.n	8005b9e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b42:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b46:	e02d      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	0c9b      	lsrs	r3, r3, #18
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2214      	movs	r2, #20
 8005b52:	18ba      	adds	r2, r7, r2
 8005b54:	5cd3      	ldrb	r3, [r2, r3]
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005b58:	4b17      	ldr	r3, [pc, #92]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	220f      	movs	r2, #15
 8005b5e:	4013      	ands	r3, r2
 8005b60:	1d3a      	adds	r2, r7, #4
 8005b62:	5cd3      	ldrb	r3, [r2, r3]
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	025b      	lsls	r3, r3, #9
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d009      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b72:	4812      	ldr	r0, [pc, #72]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b74:	f7fa fae4 	bl	8000140 <__udivsi3>
 8005b78:	0003      	movs	r3, r0
 8005b7a:	001a      	movs	r2, r3
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	4353      	muls	r3, r2
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
 8005b82:	e009      	b.n	8005b98 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b86:	000a      	movs	r2, r1
 8005b88:	0152      	lsls	r2, r2, #5
 8005b8a:	1a52      	subs	r2, r2, r1
 8005b8c:	0193      	lsls	r3, r2, #6
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	185b      	adds	r3, r3, r1
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b9c:	e002      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b9e:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ba2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b00f      	add	sp, #60	; 0x3c
 8005bac:	bd90      	pop	{r4, r7, pc}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	08009ef0 	.word	0x08009ef0
 8005bb4:	08009f00 	.word	0x08009f00
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	007a1200 	.word	0x007a1200

08005bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc4:	4b02      	ldr	r3, [pc, #8]	; (8005bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	20000000 	.word	0x20000000

08005bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005bd8:	f7ff fff2 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005bdc:	0001      	movs	r1, r0
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	0a1b      	lsrs	r3, r3, #8
 8005be4:	2207      	movs	r2, #7
 8005be6:	4013      	ands	r3, r2
 8005be8:	4a04      	ldr	r2, [pc, #16]	; (8005bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bea:	5cd3      	ldrb	r3, [r2, r3]
 8005bec:	40d9      	lsrs	r1, r3
 8005bee:	000b      	movs	r3, r1
}    
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	0800a020 	.word	0x0800a020

08005c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e042      	b.n	8005c98 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	223d      	movs	r2, #61	; 0x3d
 8005c16:	5c9b      	ldrb	r3, [r3, r2]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d107      	bne.n	8005c2e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	223c      	movs	r2, #60	; 0x3c
 8005c22:	2100      	movs	r1, #0
 8005c24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f7fd fc61 	bl	80034f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	223d      	movs	r2, #61	; 0x3d
 8005c32:	2102      	movs	r1, #2
 8005c34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	0019      	movs	r1, r3
 8005c40:	0010      	movs	r0, r2
 8005c42:	f000 f94b 	bl	8005edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2246      	movs	r2, #70	; 0x46
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	223e      	movs	r2, #62	; 0x3e
 8005c52:	2101      	movs	r1, #1
 8005c54:	5499      	strb	r1, [r3, r2]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	223f      	movs	r2, #63	; 0x3f
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	5499      	strb	r1, [r3, r2]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2240      	movs	r2, #64	; 0x40
 8005c62:	2101      	movs	r1, #1
 8005c64:	5499      	strb	r1, [r3, r2]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2241      	movs	r2, #65	; 0x41
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2242      	movs	r2, #66	; 0x42
 8005c72:	2101      	movs	r1, #1
 8005c74:	5499      	strb	r1, [r3, r2]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2243      	movs	r2, #67	; 0x43
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	5499      	strb	r1, [r3, r2]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2244      	movs	r2, #68	; 0x44
 8005c82:	2101      	movs	r1, #1
 8005c84:	5499      	strb	r1, [r3, r2]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2245      	movs	r2, #69	; 0x45
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	223d      	movs	r2, #61	; 0x3d
 8005c92:	2101      	movs	r1, #1
 8005c94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	0018      	movs	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b002      	add	sp, #8
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	223d      	movs	r2, #61	; 0x3d
 8005cac:	5c9b      	ldrb	r3, [r3, r2]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d001      	beq.n	8005cb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e033      	b.n	8005d20 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	223d      	movs	r2, #61	; 0x3d
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a18      	ldr	r2, [pc, #96]	; (8005d28 <HAL_TIM_Base_Start+0x88>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00f      	beq.n	8005cea <HAL_TIM_Base_Start+0x4a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	05db      	lsls	r3, r3, #23
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d009      	beq.n	8005cea <HAL_TIM_Base_Start+0x4a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <HAL_TIM_Base_Start+0x8c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_TIM_Base_Start+0x4a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a12      	ldr	r2, [pc, #72]	; (8005d30 <HAL_TIM_Base_Start+0x90>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d111      	bne.n	8005d0e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2207      	movs	r2, #7
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b06      	cmp	r3, #6
 8005cfa:	d010      	beq.n	8005d1e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2101      	movs	r1, #1
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0c:	e007      	b.n	8005d1e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2101      	movs	r1, #1
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b004      	add	sp, #16
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40014000 	.word	0x40014000

08005d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3e:	230f      	movs	r3, #15
 8005d40:	18fb      	adds	r3, r7, r3
 8005d42:	2200      	movs	r2, #0
 8005d44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	223c      	movs	r2, #60	; 0x3c
 8005d4a:	5c9b      	ldrb	r3, [r3, r2]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_TIM_ConfigClockSource+0x20>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e0bc      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x19a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	223c      	movs	r2, #60	; 0x3c
 8005d58:	2101      	movs	r1, #1
 8005d5a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	223d      	movs	r2, #61	; 0x3d
 8005d60:	2102      	movs	r1, #2
 8005d62:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2277      	movs	r2, #119	; 0x77
 8005d70:	4393      	bics	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4a58      	ldr	r2, [pc, #352]	; (8005ed8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2280      	movs	r2, #128	; 0x80
 8005d8a:	0192      	lsls	r2, r2, #6
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d040      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0xde>
 8005d90:	2280      	movs	r2, #128	; 0x80
 8005d92:	0192      	lsls	r2, r2, #6
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d900      	bls.n	8005d9a <HAL_TIM_ConfigClockSource+0x66>
 8005d98:	e088      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x178>
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	0152      	lsls	r2, r2, #5
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d100      	bne.n	8005da4 <HAL_TIM_ConfigClockSource+0x70>
 8005da2:	e088      	b.n	8005eb6 <HAL_TIM_ConfigClockSource+0x182>
 8005da4:	2280      	movs	r2, #128	; 0x80
 8005da6:	0152      	lsls	r2, r2, #5
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d900      	bls.n	8005dae <HAL_TIM_ConfigClockSource+0x7a>
 8005dac:	e07e      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x178>
 8005dae:	2b70      	cmp	r3, #112	; 0x70
 8005db0:	d018      	beq.n	8005de4 <HAL_TIM_ConfigClockSource+0xb0>
 8005db2:	d900      	bls.n	8005db6 <HAL_TIM_ConfigClockSource+0x82>
 8005db4:	e07a      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x178>
 8005db6:	2b60      	cmp	r3, #96	; 0x60
 8005db8:	d04f      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x126>
 8005dba:	d900      	bls.n	8005dbe <HAL_TIM_ConfigClockSource+0x8a>
 8005dbc:	e076      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x178>
 8005dbe:	2b50      	cmp	r3, #80	; 0x50
 8005dc0:	d03b      	beq.n	8005e3a <HAL_TIM_ConfigClockSource+0x106>
 8005dc2:	d900      	bls.n	8005dc6 <HAL_TIM_ConfigClockSource+0x92>
 8005dc4:	e072      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x178>
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d057      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x146>
 8005dca:	d900      	bls.n	8005dce <HAL_TIM_ConfigClockSource+0x9a>
 8005dcc:	e06e      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x178>
 8005dce:	2b30      	cmp	r3, #48	; 0x30
 8005dd0:	d063      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x166>
 8005dd2:	d86b      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x178>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d060      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x166>
 8005dd8:	d868      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x178>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d05d      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x166>
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d05b      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x166>
 8005de2:	e063      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6899      	ldr	r1, [r3, #8]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f000 f96c 	bl	80060d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2277      	movs	r2, #119	; 0x77
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	609a      	str	r2, [r3, #8]
      break;
 8005e10:	e052      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6899      	ldr	r1, [r3, #8]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f000 f955 	bl	80060d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2180      	movs	r1, #128	; 0x80
 8005e32:	01c9      	lsls	r1, r1, #7
 8005e34:	430a      	orrs	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]
      break;
 8005e38:	e03e      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6859      	ldr	r1, [r3, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	001a      	movs	r2, r3
 8005e48:	f000 f8c8 	bl	8005fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2150      	movs	r1, #80	; 0x50
 8005e52:	0018      	movs	r0, r3
 8005e54:	f000 f922 	bl	800609c <TIM_ITRx_SetConfig>
      break;
 8005e58:	e02e      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6859      	ldr	r1, [r3, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	001a      	movs	r2, r3
 8005e68:	f000 f8e6 	bl	8006038 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2160      	movs	r1, #96	; 0x60
 8005e72:	0018      	movs	r0, r3
 8005e74:	f000 f912 	bl	800609c <TIM_ITRx_SetConfig>
      break;
 8005e78:	e01e      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6859      	ldr	r1, [r3, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	001a      	movs	r2, r3
 8005e88:	f000 f8a8 	bl	8005fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2140      	movs	r1, #64	; 0x40
 8005e92:	0018      	movs	r0, r3
 8005e94:	f000 f902 	bl	800609c <TIM_ITRx_SetConfig>
      break;
 8005e98:	e00e      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	0010      	movs	r0, r2
 8005ea6:	f000 f8f9 	bl	800609c <TIM_ITRx_SetConfig>
      break;
 8005eaa:	e005      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005eac:	230f      	movs	r3, #15
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
      break;
 8005eb4:	e000      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005eb6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	223d      	movs	r2, #61	; 0x3d
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	223c      	movs	r2, #60	; 0x3c
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	5499      	strb	r1, [r3, r2]

  return status;
 8005ec8:	230f      	movs	r3, #15
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	781b      	ldrb	r3, [r3, #0]
}
 8005ece:	0018      	movs	r0, r3
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b004      	add	sp, #16
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	ffff00ff 	.word	0xffff00ff

08005edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a34      	ldr	r2, [pc, #208]	; (8005fc0 <TIM_Base_SetConfig+0xe4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d008      	beq.n	8005f06 <TIM_Base_SetConfig+0x2a>
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	2380      	movs	r3, #128	; 0x80
 8005ef8:	05db      	lsls	r3, r3, #23
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d003      	beq.n	8005f06 <TIM_Base_SetConfig+0x2a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a30      	ldr	r2, [pc, #192]	; (8005fc4 <TIM_Base_SetConfig+0xe8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d108      	bne.n	8005f18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2270      	movs	r2, #112	; 0x70
 8005f0a:	4393      	bics	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a29      	ldr	r2, [pc, #164]	; (8005fc0 <TIM_Base_SetConfig+0xe4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d018      	beq.n	8005f52 <TIM_Base_SetConfig+0x76>
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	2380      	movs	r3, #128	; 0x80
 8005f24:	05db      	lsls	r3, r3, #23
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d013      	beq.n	8005f52 <TIM_Base_SetConfig+0x76>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <TIM_Base_SetConfig+0xe8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00f      	beq.n	8005f52 <TIM_Base_SetConfig+0x76>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a24      	ldr	r2, [pc, #144]	; (8005fc8 <TIM_Base_SetConfig+0xec>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00b      	beq.n	8005f52 <TIM_Base_SetConfig+0x76>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a23      	ldr	r2, [pc, #140]	; (8005fcc <TIM_Base_SetConfig+0xf0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d007      	beq.n	8005f52 <TIM_Base_SetConfig+0x76>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <TIM_Base_SetConfig+0xf4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d003      	beq.n	8005f52 <TIM_Base_SetConfig+0x76>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <TIM_Base_SetConfig+0xf8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d108      	bne.n	8005f64 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a20      	ldr	r2, [pc, #128]	; (8005fd8 <TIM_Base_SetConfig+0xfc>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2280      	movs	r2, #128	; 0x80
 8005f68:	4393      	bics	r3, r2
 8005f6a:	001a      	movs	r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a0c      	ldr	r2, [pc, #48]	; (8005fc0 <TIM_Base_SetConfig+0xe4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_Base_SetConfig+0xce>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a0d      	ldr	r2, [pc, #52]	; (8005fcc <TIM_Base_SetConfig+0xf0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_Base_SetConfig+0xce>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a0c      	ldr	r2, [pc, #48]	; (8005fd0 <TIM_Base_SetConfig+0xf4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_Base_SetConfig+0xce>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a0b      	ldr	r2, [pc, #44]	; (8005fd4 <TIM_Base_SetConfig+0xf8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d103      	bne.n	8005fb2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	615a      	str	r2, [r3, #20]
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b004      	add	sp, #16
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40002000 	.word	0x40002000
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800
 8005fd8:	fffffcff 	.word	0xfffffcff

08005fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	4393      	bics	r3, r2
 8005ff6:	001a      	movs	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	22f0      	movs	r2, #240	; 0xf0
 8006006:	4393      	bics	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	220a      	movs	r2, #10
 8006018:	4393      	bics	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b006      	add	sp, #24
 8006036:	bd80      	pop	{r7, pc}

08006038 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	2210      	movs	r2, #16
 800604a:	4393      	bics	r3, r2
 800604c:	001a      	movs	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <TIM_TI2_ConfigInputStage+0x60>)
 8006062:	4013      	ands	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	031b      	lsls	r3, r3, #12
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	22a0      	movs	r2, #160	; 0xa0
 8006074:	4393      	bics	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	621a      	str	r2, [r3, #32]
}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	46bd      	mov	sp, r7
 8006092:	b006      	add	sp, #24
 8006094:	bd80      	pop	{r7, pc}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	ffff0fff 	.word	0xffff0fff

0800609c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2270      	movs	r2, #112	; 0x70
 80060b0:	4393      	bics	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	2207      	movs	r2, #7
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	609a      	str	r2, [r3, #8]
}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	46bd      	mov	sp, r7
 80060ca:	b004      	add	sp, #16
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <TIM_ETR_SetConfig+0x3c>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	021a      	lsls	r2, r3, #8
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	46bd      	mov	sp, r7
 8006108:	b006      	add	sp, #24
 800610a:	bd80      	pop	{r7, pc}
 800610c:	ffff00ff 	.word	0xffff00ff

08006110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	223c      	movs	r2, #60	; 0x3c
 800611e:	5c9b      	ldrb	r3, [r3, r2]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006124:	2302      	movs	r3, #2
 8006126:	e047      	b.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	223c      	movs	r2, #60	; 0x3c
 800612c:	2101      	movs	r1, #1
 800612e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	223d      	movs	r2, #61	; 0x3d
 8006134:	2102      	movs	r1, #2
 8006136:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2270      	movs	r2, #112	; 0x70
 800614c:	4393      	bics	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a16      	ldr	r2, [pc, #88]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00f      	beq.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	05db      	lsls	r3, r3, #23
 8006174:	429a      	cmp	r2, r3
 8006176:	d009      	beq.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a10      	ldr	r2, [pc, #64]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d10c      	bne.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	4393      	bics	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	4313      	orrs	r3, r2
 800619c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	223d      	movs	r2, #61	; 0x3d
 80061aa:	2101      	movs	r1, #1
 80061ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	223c      	movs	r2, #60	; 0x3c
 80061b2:	2100      	movs	r1, #0
 80061b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	0018      	movs	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b004      	add	sp, #16
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40000400 	.word	0x40000400
 80061c8:	40014000 	.word	0x40014000

080061cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e044      	b.n	8006268 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d107      	bne.n	80061f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2274      	movs	r2, #116	; 0x74
 80061ea:	2100      	movs	r1, #0
 80061ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7fd f99d 	bl	8003530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2224      	movs	r2, #36	; 0x24
 80061fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2101      	movs	r1, #1
 8006208:	438a      	bics	r2, r1
 800620a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	0018      	movs	r0, r3
 8006210:	f000 f8da 	bl	80063c8 <UART_SetConfig>
 8006214:	0003      	movs	r3, r0
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e024      	b.n	8006268 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	0018      	movs	r0, r3
 800622a:	f000 fa0d 	bl	8006648 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	490d      	ldr	r1, [pc, #52]	; (8006270 <HAL_UART_Init+0xa4>)
 800623a:	400a      	ands	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	212a      	movs	r1, #42	; 0x2a
 800624a:	438a      	bics	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2101      	movs	r1, #1
 800625a:	430a      	orrs	r2, r1
 800625c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	0018      	movs	r0, r3
 8006262:	f000 faa5 	bl	80067b0 <UART_CheckIdleState>
 8006266:	0003      	movs	r3, r0
}
 8006268:	0018      	movs	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	b002      	add	sp, #8
 800626e:	bd80      	pop	{r7, pc}
 8006270:	ffffb7ff 	.word	0xffffb7ff

08006274 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	; 0x28
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	1dbb      	adds	r3, r7, #6
 8006282:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006288:	2b20      	cmp	r3, #32
 800628a:	d000      	beq.n	800628e <HAL_UART_Transmit+0x1a>
 800628c:	e096      	b.n	80063bc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_UART_Transmit+0x28>
 8006294:	1dbb      	adds	r3, r7, #6
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e08e      	b.n	80063be <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	2380      	movs	r3, #128	; 0x80
 80062a6:	015b      	lsls	r3, r3, #5
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d109      	bne.n	80062c0 <HAL_UART_Transmit+0x4c>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2201      	movs	r2, #1
 80062b8:	4013      	ands	r3, r2
 80062ba:	d001      	beq.n	80062c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e07e      	b.n	80063be <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2274      	movs	r2, #116	; 0x74
 80062c4:	5c9b      	ldrb	r3, [r3, r2]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_UART_Transmit+0x5a>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e077      	b.n	80063be <HAL_UART_Transmit+0x14a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2274      	movs	r2, #116	; 0x74
 80062d2:	2101      	movs	r1, #1
 80062d4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2280      	movs	r2, #128	; 0x80
 80062da:	2100      	movs	r1, #0
 80062dc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2221      	movs	r2, #33	; 0x21
 80062e2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062e4:	f7fd face 	bl	8003884 <HAL_GetTick>
 80062e8:	0003      	movs	r3, r0
 80062ea:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	1dba      	adds	r2, r7, #6
 80062f0:	2150      	movs	r1, #80	; 0x50
 80062f2:	8812      	ldrh	r2, [r2, #0]
 80062f4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1dba      	adds	r2, r7, #6
 80062fa:	2152      	movs	r1, #82	; 0x52
 80062fc:	8812      	ldrh	r2, [r2, #0]
 80062fe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	015b      	lsls	r3, r3, #5
 8006308:	429a      	cmp	r2, r3
 800630a:	d108      	bne.n	800631e <HAL_UART_Transmit+0xaa>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	e003      	b.n	8006326 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2274      	movs	r2, #116	; 0x74
 800632a:	2100      	movs	r1, #0
 800632c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800632e:	e02d      	b.n	800638c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	0013      	movs	r3, r2
 800633a:	2200      	movs	r2, #0
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	f000 fa7f 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 8006342:	1e03      	subs	r3, r0, #0
 8006344:	d001      	beq.n	800634a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e039      	b.n	80063be <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10b      	bne.n	8006368 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	881a      	ldrh	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	05d2      	lsls	r2, r2, #23
 800635a:	0dd2      	lsrs	r2, r2, #23
 800635c:	b292      	uxth	r2, r2
 800635e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	3302      	adds	r3, #2
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	e008      	b.n	800637a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	b292      	uxth	r2, r2
 8006372:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	3301      	adds	r3, #1
 8006378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2252      	movs	r2, #82	; 0x52
 800637e:	5a9b      	ldrh	r3, [r3, r2]
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b299      	uxth	r1, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2252      	movs	r2, #82	; 0x52
 800638a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2252      	movs	r2, #82	; 0x52
 8006390:	5a9b      	ldrh	r3, [r3, r2]
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1cb      	bne.n	8006330 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	0013      	movs	r3, r2
 80063a2:	2200      	movs	r2, #0
 80063a4:	2140      	movs	r1, #64	; 0x40
 80063a6:	f000 fa4b 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 80063aa:	1e03      	subs	r3, r0, #0
 80063ac:	d001      	beq.n	80063b2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e005      	b.n	80063be <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	0018      	movs	r0, r3
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b008      	add	sp, #32
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d0:	231e      	movs	r3, #30
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a8d      	ldr	r2, [pc, #564]	; (800662c <UART_SetConfig+0x264>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	0019      	movs	r1, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	430a      	orrs	r2, r1
 8006404:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4a88      	ldr	r2, [pc, #544]	; (8006630 <UART_SetConfig+0x268>)
 800640e:	4013      	ands	r3, r2
 8006410:	0019      	movs	r1, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4a7f      	ldr	r2, [pc, #508]	; (8006634 <UART_SetConfig+0x26c>)
 8006436:	4013      	ands	r3, r2
 8006438:	0019      	movs	r1, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	430a      	orrs	r2, r1
 8006442:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a7b      	ldr	r2, [pc, #492]	; (8006638 <UART_SetConfig+0x270>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d127      	bne.n	800649e <UART_SetConfig+0xd6>
 800644e:	4b7b      	ldr	r3, [pc, #492]	; (800663c <UART_SetConfig+0x274>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	2203      	movs	r2, #3
 8006454:	4013      	ands	r3, r2
 8006456:	2b03      	cmp	r3, #3
 8006458:	d00d      	beq.n	8006476 <UART_SetConfig+0xae>
 800645a:	d81b      	bhi.n	8006494 <UART_SetConfig+0xcc>
 800645c:	2b02      	cmp	r3, #2
 800645e:	d014      	beq.n	800648a <UART_SetConfig+0xc2>
 8006460:	d818      	bhi.n	8006494 <UART_SetConfig+0xcc>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <UART_SetConfig+0xa4>
 8006466:	2b01      	cmp	r3, #1
 8006468:	d00a      	beq.n	8006480 <UART_SetConfig+0xb8>
 800646a:	e013      	b.n	8006494 <UART_SetConfig+0xcc>
 800646c:	231f      	movs	r3, #31
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	e021      	b.n	80064ba <UART_SetConfig+0xf2>
 8006476:	231f      	movs	r3, #31
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	2202      	movs	r2, #2
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	e01c      	b.n	80064ba <UART_SetConfig+0xf2>
 8006480:	231f      	movs	r3, #31
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	2204      	movs	r2, #4
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	e017      	b.n	80064ba <UART_SetConfig+0xf2>
 800648a:	231f      	movs	r3, #31
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	2208      	movs	r2, #8
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	e012      	b.n	80064ba <UART_SetConfig+0xf2>
 8006494:	231f      	movs	r3, #31
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	2210      	movs	r2, #16
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	e00d      	b.n	80064ba <UART_SetConfig+0xf2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a67      	ldr	r2, [pc, #412]	; (8006640 <UART_SetConfig+0x278>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d104      	bne.n	80064b2 <UART_SetConfig+0xea>
 80064a8:	231f      	movs	r3, #31
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	e003      	b.n	80064ba <UART_SetConfig+0xf2>
 80064b2:	231f      	movs	r3, #31
 80064b4:	18fb      	adds	r3, r7, r3
 80064b6:	2210      	movs	r2, #16
 80064b8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69da      	ldr	r2, [r3, #28]
 80064be:	2380      	movs	r3, #128	; 0x80
 80064c0:	021b      	lsls	r3, r3, #8
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d15d      	bne.n	8006582 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80064c6:	231f      	movs	r3, #31
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d015      	beq.n	80064fc <UART_SetConfig+0x134>
 80064d0:	dc18      	bgt.n	8006504 <UART_SetConfig+0x13c>
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d00d      	beq.n	80064f2 <UART_SetConfig+0x12a>
 80064d6:	dc15      	bgt.n	8006504 <UART_SetConfig+0x13c>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <UART_SetConfig+0x11a>
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d005      	beq.n	80064ec <UART_SetConfig+0x124>
 80064e0:	e010      	b.n	8006504 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e2:	f7ff fb77 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 80064e6:	0003      	movs	r3, r0
 80064e8:	61bb      	str	r3, [r7, #24]
        break;
 80064ea:	e012      	b.n	8006512 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064ec:	4b55      	ldr	r3, [pc, #340]	; (8006644 <UART_SetConfig+0x27c>)
 80064ee:	61bb      	str	r3, [r7, #24]
        break;
 80064f0:	e00f      	b.n	8006512 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f2:	f7ff fb01 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 80064f6:	0003      	movs	r3, r0
 80064f8:	61bb      	str	r3, [r7, #24]
        break;
 80064fa:	e00a      	b.n	8006512 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fc:	2380      	movs	r3, #128	; 0x80
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	61bb      	str	r3, [r7, #24]
        break;
 8006502:	e006      	b.n	8006512 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006508:	231e      	movs	r3, #30
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	2201      	movs	r2, #1
 800650e:	701a      	strb	r2, [r3, #0]
        break;
 8006510:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d100      	bne.n	800651a <UART_SetConfig+0x152>
 8006518:	e07b      	b.n	8006612 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	005a      	lsls	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	18d2      	adds	r2, r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	0019      	movs	r1, r3
 800652c:	0010      	movs	r0, r2
 800652e:	f7f9 fe07 	bl	8000140 <__udivsi3>
 8006532:	0003      	movs	r3, r0
 8006534:	b29b      	uxth	r3, r3
 8006536:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b0f      	cmp	r3, #15
 800653c:	d91c      	bls.n	8006578 <UART_SetConfig+0x1b0>
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	025b      	lsls	r3, r3, #9
 8006544:	429a      	cmp	r2, r3
 8006546:	d217      	bcs.n	8006578 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	b29a      	uxth	r2, r3
 800654c:	200e      	movs	r0, #14
 800654e:	183b      	adds	r3, r7, r0
 8006550:	210f      	movs	r1, #15
 8006552:	438a      	bics	r2, r1
 8006554:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	b29b      	uxth	r3, r3
 800655c:	2207      	movs	r2, #7
 800655e:	4013      	ands	r3, r2
 8006560:	b299      	uxth	r1, r3
 8006562:	183b      	adds	r3, r7, r0
 8006564:	183a      	adds	r2, r7, r0
 8006566:	8812      	ldrh	r2, [r2, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	183a      	adds	r2, r7, r0
 8006572:	8812      	ldrh	r2, [r2, #0]
 8006574:	60da      	str	r2, [r3, #12]
 8006576:	e04c      	b.n	8006612 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006578:	231e      	movs	r3, #30
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	2201      	movs	r2, #1
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	e047      	b.n	8006612 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006582:	231f      	movs	r3, #31
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b08      	cmp	r3, #8
 800658a:	d015      	beq.n	80065b8 <UART_SetConfig+0x1f0>
 800658c:	dc18      	bgt.n	80065c0 <UART_SetConfig+0x1f8>
 800658e:	2b04      	cmp	r3, #4
 8006590:	d00d      	beq.n	80065ae <UART_SetConfig+0x1e6>
 8006592:	dc15      	bgt.n	80065c0 <UART_SetConfig+0x1f8>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <UART_SetConfig+0x1d6>
 8006598:	2b02      	cmp	r3, #2
 800659a:	d005      	beq.n	80065a8 <UART_SetConfig+0x1e0>
 800659c:	e010      	b.n	80065c0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800659e:	f7ff fb19 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 80065a2:	0003      	movs	r3, r0
 80065a4:	61bb      	str	r3, [r7, #24]
        break;
 80065a6:	e012      	b.n	80065ce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a8:	4b26      	ldr	r3, [pc, #152]	; (8006644 <UART_SetConfig+0x27c>)
 80065aa:	61bb      	str	r3, [r7, #24]
        break;
 80065ac:	e00f      	b.n	80065ce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ae:	f7ff faa3 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 80065b2:	0003      	movs	r3, r0
 80065b4:	61bb      	str	r3, [r7, #24]
        break;
 80065b6:	e00a      	b.n	80065ce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b8:	2380      	movs	r3, #128	; 0x80
 80065ba:	021b      	lsls	r3, r3, #8
 80065bc:	61bb      	str	r3, [r7, #24]
        break;
 80065be:	e006      	b.n	80065ce <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065c4:	231e      	movs	r3, #30
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	2201      	movs	r2, #1
 80065ca:	701a      	strb	r2, [r3, #0]
        break;
 80065cc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01e      	beq.n	8006612 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	085a      	lsrs	r2, r3, #1
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	18d2      	adds	r2, r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	0019      	movs	r1, r3
 80065e4:	0010      	movs	r0, r2
 80065e6:	f7f9 fdab 	bl	8000140 <__udivsi3>
 80065ea:	0003      	movs	r3, r0
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b0f      	cmp	r3, #15
 80065f4:	d909      	bls.n	800660a <UART_SetConfig+0x242>
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	2380      	movs	r3, #128	; 0x80
 80065fa:	025b      	lsls	r3, r3, #9
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d204      	bcs.n	800660a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	60da      	str	r2, [r3, #12]
 8006608:	e003      	b.n	8006612 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800660a:	231e      	movs	r3, #30
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	2201      	movs	r2, #1
 8006610:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800661e:	231e      	movs	r3, #30
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	781b      	ldrb	r3, [r3, #0]
}
 8006624:	0018      	movs	r0, r3
 8006626:	46bd      	mov	sp, r7
 8006628:	b008      	add	sp, #32
 800662a:	bd80      	pop	{r7, pc}
 800662c:	ffff69f3 	.word	0xffff69f3
 8006630:	ffffcfff 	.word	0xffffcfff
 8006634:	fffff4ff 	.word	0xfffff4ff
 8006638:	40013800 	.word	0x40013800
 800663c:	40021000 	.word	0x40021000
 8006640:	40004400 	.word	0x40004400
 8006644:	007a1200 	.word	0x007a1200

08006648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	2201      	movs	r2, #1
 8006656:	4013      	ands	r3, r2
 8006658:	d00b      	beq.n	8006672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4a4a      	ldr	r2, [pc, #296]	; (800678c <UART_AdvFeatureConfig+0x144>)
 8006662:	4013      	ands	r3, r2
 8006664:	0019      	movs	r1, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2202      	movs	r2, #2
 8006678:	4013      	ands	r3, r2
 800667a:	d00b      	beq.n	8006694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	4a43      	ldr	r2, [pc, #268]	; (8006790 <UART_AdvFeatureConfig+0x148>)
 8006684:	4013      	ands	r3, r2
 8006686:	0019      	movs	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	2204      	movs	r2, #4
 800669a:	4013      	ands	r3, r2
 800669c:	d00b      	beq.n	80066b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	4a3b      	ldr	r2, [pc, #236]	; (8006794 <UART_AdvFeatureConfig+0x14c>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	0019      	movs	r1, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	2208      	movs	r2, #8
 80066bc:	4013      	ands	r3, r2
 80066be:	d00b      	beq.n	80066d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	4a34      	ldr	r2, [pc, #208]	; (8006798 <UART_AdvFeatureConfig+0x150>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	0019      	movs	r1, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	2210      	movs	r2, #16
 80066de:	4013      	ands	r3, r2
 80066e0:	d00b      	beq.n	80066fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	4a2c      	ldr	r2, [pc, #176]	; (800679c <UART_AdvFeatureConfig+0x154>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	0019      	movs	r1, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	2220      	movs	r2, #32
 8006700:	4013      	ands	r3, r2
 8006702:	d00b      	beq.n	800671c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	4a25      	ldr	r2, [pc, #148]	; (80067a0 <UART_AdvFeatureConfig+0x158>)
 800670c:	4013      	ands	r3, r2
 800670e:	0019      	movs	r1, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	2240      	movs	r2, #64	; 0x40
 8006722:	4013      	ands	r3, r2
 8006724:	d01d      	beq.n	8006762 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	4a1d      	ldr	r2, [pc, #116]	; (80067a4 <UART_AdvFeatureConfig+0x15c>)
 800672e:	4013      	ands	r3, r2
 8006730:	0019      	movs	r1, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006742:	2380      	movs	r3, #128	; 0x80
 8006744:	035b      	lsls	r3, r3, #13
 8006746:	429a      	cmp	r2, r3
 8006748:	d10b      	bne.n	8006762 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <UART_AdvFeatureConfig+0x160>)
 8006752:	4013      	ands	r3, r2
 8006754:	0019      	movs	r1, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	2280      	movs	r2, #128	; 0x80
 8006768:	4013      	ands	r3, r2
 800676a:	d00b      	beq.n	8006784 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	4a0e      	ldr	r2, [pc, #56]	; (80067ac <UART_AdvFeatureConfig+0x164>)
 8006774:	4013      	ands	r3, r2
 8006776:	0019      	movs	r1, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	605a      	str	r2, [r3, #4]
  }
}
 8006784:	46c0      	nop			; (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b002      	add	sp, #8
 800678a:	bd80      	pop	{r7, pc}
 800678c:	fffdffff 	.word	0xfffdffff
 8006790:	fffeffff 	.word	0xfffeffff
 8006794:	fffbffff 	.word	0xfffbffff
 8006798:	ffff7fff 	.word	0xffff7fff
 800679c:	ffffefff 	.word	0xffffefff
 80067a0:	ffffdfff 	.word	0xffffdfff
 80067a4:	ffefffff 	.word	0xffefffff
 80067a8:	ff9fffff 	.word	0xff9fffff
 80067ac:	fff7ffff 	.word	0xfff7ffff

080067b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2280      	movs	r2, #128	; 0x80
 80067bc:	2100      	movs	r1, #0
 80067be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067c0:	f7fd f860 	bl	8003884 <HAL_GetTick>
 80067c4:	0003      	movs	r3, r0
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2208      	movs	r2, #8
 80067d0:	4013      	ands	r3, r2
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	d10c      	bne.n	80067f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2280      	movs	r2, #128	; 0x80
 80067da:	0391      	lsls	r1, r2, #14
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4a17      	ldr	r2, [pc, #92]	; (800683c <UART_CheckIdleState+0x8c>)
 80067e0:	9200      	str	r2, [sp, #0]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f000 f82c 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 80067e8:	1e03      	subs	r3, r0, #0
 80067ea:	d001      	beq.n	80067f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e021      	b.n	8006834 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2204      	movs	r2, #4
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d10c      	bne.n	8006818 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2280      	movs	r2, #128	; 0x80
 8006802:	03d1      	lsls	r1, r2, #15
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4a0d      	ldr	r2, [pc, #52]	; (800683c <UART_CheckIdleState+0x8c>)
 8006808:	9200      	str	r2, [sp, #0]
 800680a:	2200      	movs	r2, #0
 800680c:	f000 f818 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 8006810:	1e03      	subs	r3, r0, #0
 8006812:	d001      	beq.n	8006818 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e00d      	b.n	8006834 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2274      	movs	r2, #116	; 0x74
 800682e:	2100      	movs	r1, #0
 8006830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	0018      	movs	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	b004      	add	sp, #16
 800683a:	bd80      	pop	{r7, pc}
 800683c:	01ffffff 	.word	0x01ffffff

08006840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b094      	sub	sp, #80	; 0x50
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	1dfb      	adds	r3, r7, #7
 800684e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006850:	e0a3      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006854:	3301      	adds	r3, #1
 8006856:	d100      	bne.n	800685a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006858:	e09f      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fd f813 	bl	8003884 <HAL_GetTick>
 800685e:	0002      	movs	r2, r0
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <UART_WaitOnFlagUntilTimeout+0x30>
 800686a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800686c:	2b00      	cmp	r3, #0
 800686e:	d13d      	bne.n	80068ec <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006870:	f3ef 8310 	mrs	r3, PRIMASK
 8006874:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006878:	647b      	str	r3, [r7, #68]	; 0x44
 800687a:	2301      	movs	r3, #1
 800687c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	f383 8810 	msr	PRIMASK, r3
}
 8006884:	46c0      	nop			; (mov r8, r8)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	494c      	ldr	r1, [pc, #304]	; (80069c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006892:	400a      	ands	r2, r1
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006898:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	f383 8810 	msr	PRIMASK, r3
}
 80068a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a2:	f3ef 8310 	mrs	r3, PRIMASK
 80068a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	643b      	str	r3, [r7, #64]	; 0x40
 80068ac:	2301      	movs	r3, #1
 80068ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	f383 8810 	msr	PRIMASK, r3
}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2101      	movs	r1, #1
 80068c4:	438a      	bics	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]
 80068c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ce:	f383 8810 	msr	PRIMASK, r3
}
 80068d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2274      	movs	r2, #116	; 0x74
 80068e4:	2100      	movs	r1, #0
 80068e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e067      	b.n	80069bc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2204      	movs	r2, #4
 80068f4:	4013      	ands	r3, r2
 80068f6:	d050      	beq.n	800699a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69da      	ldr	r2, [r3, #28]
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	401a      	ands	r2, r3
 8006904:	2380      	movs	r3, #128	; 0x80
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	429a      	cmp	r2, r3
 800690a:	d146      	bne.n	800699a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2280      	movs	r2, #128	; 0x80
 8006912:	0112      	lsls	r2, r2, #4
 8006914:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006916:	f3ef 8310 	mrs	r3, PRIMASK
 800691a:	613b      	str	r3, [r7, #16]
  return(result);
 800691c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006920:	2301      	movs	r3, #1
 8006922:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f383 8810 	msr	PRIMASK, r3
}
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4923      	ldr	r1, [pc, #140]	; (80069c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006938:	400a      	ands	r2, r1
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f383 8810 	msr	PRIMASK, r3
}
 8006946:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006948:	f3ef 8310 	mrs	r3, PRIMASK
 800694c:	61fb      	str	r3, [r7, #28]
  return(result);
 800694e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006950:	64bb      	str	r3, [r7, #72]	; 0x48
 8006952:	2301      	movs	r3, #1
 8006954:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	f383 8810 	msr	PRIMASK, r3
}
 800695c:	46c0      	nop			; (mov r8, r8)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2101      	movs	r1, #1
 800696a:	438a      	bics	r2, r1
 800696c:	609a      	str	r2, [r3, #8]
 800696e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	f383 8810 	msr	PRIMASK, r3
}
 8006978:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2280      	movs	r2, #128	; 0x80
 800698a:	2120      	movs	r1, #32
 800698c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2274      	movs	r2, #116	; 0x74
 8006992:	2100      	movs	r1, #0
 8006994:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e010      	b.n	80069bc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	4013      	ands	r3, r2
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	425a      	negs	r2, r3
 80069aa:	4153      	adcs	r3, r2
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	001a      	movs	r2, r3
 80069b0:	1dfb      	adds	r3, r7, #7
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d100      	bne.n	80069ba <UART_WaitOnFlagUntilTimeout+0x17a>
 80069b8:	e74b      	b.n	8006852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	0018      	movs	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	b014      	add	sp, #80	; 0x50
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	fffffe5f 	.word	0xfffffe5f

080069c8 <__errno>:
 80069c8:	4b01      	ldr	r3, [pc, #4]	; (80069d0 <__errno+0x8>)
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	4770      	bx	lr
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	2000000c 	.word	0x2000000c

080069d4 <__libc_init_array>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	2600      	movs	r6, #0
 80069d8:	4d0c      	ldr	r5, [pc, #48]	; (8006a0c <__libc_init_array+0x38>)
 80069da:	4c0d      	ldr	r4, [pc, #52]	; (8006a10 <__libc_init_array+0x3c>)
 80069dc:	1b64      	subs	r4, r4, r5
 80069de:	10a4      	asrs	r4, r4, #2
 80069e0:	42a6      	cmp	r6, r4
 80069e2:	d109      	bne.n	80069f8 <__libc_init_array+0x24>
 80069e4:	2600      	movs	r6, #0
 80069e6:	f003 f9a7 	bl	8009d38 <_init>
 80069ea:	4d0a      	ldr	r5, [pc, #40]	; (8006a14 <__libc_init_array+0x40>)
 80069ec:	4c0a      	ldr	r4, [pc, #40]	; (8006a18 <__libc_init_array+0x44>)
 80069ee:	1b64      	subs	r4, r4, r5
 80069f0:	10a4      	asrs	r4, r4, #2
 80069f2:	42a6      	cmp	r6, r4
 80069f4:	d105      	bne.n	8006a02 <__libc_init_array+0x2e>
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	00b3      	lsls	r3, r6, #2
 80069fa:	58eb      	ldr	r3, [r5, r3]
 80069fc:	4798      	blx	r3
 80069fe:	3601      	adds	r6, #1
 8006a00:	e7ee      	b.n	80069e0 <__libc_init_array+0xc>
 8006a02:	00b3      	lsls	r3, r6, #2
 8006a04:	58eb      	ldr	r3, [r5, r3]
 8006a06:	4798      	blx	r3
 8006a08:	3601      	adds	r6, #1
 8006a0a:	e7f2      	b.n	80069f2 <__libc_init_array+0x1e>
 8006a0c:	0800a404 	.word	0x0800a404
 8006a10:	0800a404 	.word	0x0800a404
 8006a14:	0800a404 	.word	0x0800a404
 8006a18:	0800a408 	.word	0x0800a408

08006a1c <memset>:
 8006a1c:	0003      	movs	r3, r0
 8006a1e:	1882      	adds	r2, r0, r2
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d100      	bne.n	8006a26 <memset+0xa>
 8006a24:	4770      	bx	lr
 8006a26:	7019      	strb	r1, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	e7f9      	b.n	8006a20 <memset+0x4>

08006a2c <__cvt>:
 8006a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2e:	001e      	movs	r6, r3
 8006a30:	2300      	movs	r3, #0
 8006a32:	0014      	movs	r4, r2
 8006a34:	b08b      	sub	sp, #44	; 0x2c
 8006a36:	429e      	cmp	r6, r3
 8006a38:	da04      	bge.n	8006a44 <__cvt+0x18>
 8006a3a:	2180      	movs	r1, #128	; 0x80
 8006a3c:	0609      	lsls	r1, r1, #24
 8006a3e:	1873      	adds	r3, r6, r1
 8006a40:	001e      	movs	r6, r3
 8006a42:	232d      	movs	r3, #45	; 0x2d
 8006a44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a46:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006a48:	7013      	strb	r3, [r2, #0]
 8006a4a:	2320      	movs	r3, #32
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	439f      	bics	r7, r3
 8006a50:	2f46      	cmp	r7, #70	; 0x46
 8006a52:	d007      	beq.n	8006a64 <__cvt+0x38>
 8006a54:	003b      	movs	r3, r7
 8006a56:	3b45      	subs	r3, #69	; 0x45
 8006a58:	4259      	negs	r1, r3
 8006a5a:	414b      	adcs	r3, r1
 8006a5c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006a5e:	3a01      	subs	r2, #1
 8006a60:	18cb      	adds	r3, r1, r3
 8006a62:	9310      	str	r3, [sp, #64]	; 0x40
 8006a64:	ab09      	add	r3, sp, #36	; 0x24
 8006a66:	9304      	str	r3, [sp, #16]
 8006a68:	ab08      	add	r3, sp, #32
 8006a6a:	9303      	str	r3, [sp, #12]
 8006a6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a6e:	9200      	str	r2, [sp, #0]
 8006a70:	9302      	str	r3, [sp, #8]
 8006a72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a74:	0022      	movs	r2, r4
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	0033      	movs	r3, r6
 8006a7a:	f000 fcf1 	bl	8007460 <_dtoa_r>
 8006a7e:	0005      	movs	r5, r0
 8006a80:	2f47      	cmp	r7, #71	; 0x47
 8006a82:	d102      	bne.n	8006a8a <__cvt+0x5e>
 8006a84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a86:	07db      	lsls	r3, r3, #31
 8006a88:	d528      	bpl.n	8006adc <__cvt+0xb0>
 8006a8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a8c:	18eb      	adds	r3, r5, r3
 8006a8e:	9307      	str	r3, [sp, #28]
 8006a90:	2f46      	cmp	r7, #70	; 0x46
 8006a92:	d114      	bne.n	8006abe <__cvt+0x92>
 8006a94:	782b      	ldrb	r3, [r5, #0]
 8006a96:	2b30      	cmp	r3, #48	; 0x30
 8006a98:	d10c      	bne.n	8006ab4 <__cvt+0x88>
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	0020      	movs	r0, r4
 8006aa0:	0031      	movs	r1, r6
 8006aa2:	f7f9 fcd3 	bl	800044c <__aeabi_dcmpeq>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d104      	bne.n	8006ab4 <__cvt+0x88>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006aae:	1a9b      	subs	r3, r3, r2
 8006ab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ab6:	9a07      	ldr	r2, [sp, #28]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	18d3      	adds	r3, r2, r3
 8006abc:	9307      	str	r3, [sp, #28]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	0020      	movs	r0, r4
 8006ac4:	0031      	movs	r1, r6
 8006ac6:	f7f9 fcc1 	bl	800044c <__aeabi_dcmpeq>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d001      	beq.n	8006ad2 <__cvt+0xa6>
 8006ace:	9b07      	ldr	r3, [sp, #28]
 8006ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad2:	2230      	movs	r2, #48	; 0x30
 8006ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad6:	9907      	ldr	r1, [sp, #28]
 8006ad8:	428b      	cmp	r3, r1
 8006ada:	d306      	bcc.n	8006aea <__cvt+0xbe>
 8006adc:	0028      	movs	r0, r5
 8006ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ae2:	1b5b      	subs	r3, r3, r5
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	b00b      	add	sp, #44	; 0x2c
 8006ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aea:	1c59      	adds	r1, r3, #1
 8006aec:	9109      	str	r1, [sp, #36]	; 0x24
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	e7f0      	b.n	8006ad4 <__cvt+0xa8>

08006af2 <__exponent>:
 8006af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006af4:	1c83      	adds	r3, r0, #2
 8006af6:	b087      	sub	sp, #28
 8006af8:	9303      	str	r3, [sp, #12]
 8006afa:	0005      	movs	r5, r0
 8006afc:	000c      	movs	r4, r1
 8006afe:	232b      	movs	r3, #43	; 0x2b
 8006b00:	7002      	strb	r2, [r0, #0]
 8006b02:	2900      	cmp	r1, #0
 8006b04:	da01      	bge.n	8006b0a <__exponent+0x18>
 8006b06:	424c      	negs	r4, r1
 8006b08:	3302      	adds	r3, #2
 8006b0a:	706b      	strb	r3, [r5, #1]
 8006b0c:	2c09      	cmp	r4, #9
 8006b0e:	dd31      	ble.n	8006b74 <__exponent+0x82>
 8006b10:	270a      	movs	r7, #10
 8006b12:	ab04      	add	r3, sp, #16
 8006b14:	1dde      	adds	r6, r3, #7
 8006b16:	0020      	movs	r0, r4
 8006b18:	0039      	movs	r1, r7
 8006b1a:	9601      	str	r6, [sp, #4]
 8006b1c:	f7f9 fc80 	bl	8000420 <__aeabi_idivmod>
 8006b20:	3e01      	subs	r6, #1
 8006b22:	3130      	adds	r1, #48	; 0x30
 8006b24:	0020      	movs	r0, r4
 8006b26:	7031      	strb	r1, [r6, #0]
 8006b28:	0039      	movs	r1, r7
 8006b2a:	9402      	str	r4, [sp, #8]
 8006b2c:	f7f9 fb92 	bl	8000254 <__divsi3>
 8006b30:	9b02      	ldr	r3, [sp, #8]
 8006b32:	0004      	movs	r4, r0
 8006b34:	2b63      	cmp	r3, #99	; 0x63
 8006b36:	dcee      	bgt.n	8006b16 <__exponent+0x24>
 8006b38:	9b01      	ldr	r3, [sp, #4]
 8006b3a:	3430      	adds	r4, #48	; 0x30
 8006b3c:	1e9a      	subs	r2, r3, #2
 8006b3e:	0013      	movs	r3, r2
 8006b40:	9903      	ldr	r1, [sp, #12]
 8006b42:	7014      	strb	r4, [r2, #0]
 8006b44:	a804      	add	r0, sp, #16
 8006b46:	3007      	adds	r0, #7
 8006b48:	4298      	cmp	r0, r3
 8006b4a:	d80e      	bhi.n	8006b6a <__exponent+0x78>
 8006b4c:	ab04      	add	r3, sp, #16
 8006b4e:	3307      	adds	r3, #7
 8006b50:	2000      	movs	r0, #0
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d804      	bhi.n	8006b60 <__exponent+0x6e>
 8006b56:	ab04      	add	r3, sp, #16
 8006b58:	3009      	adds	r0, #9
 8006b5a:	18c0      	adds	r0, r0, r3
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	1ac0      	subs	r0, r0, r3
 8006b60:	9b03      	ldr	r3, [sp, #12]
 8006b62:	1818      	adds	r0, r3, r0
 8006b64:	1b40      	subs	r0, r0, r5
 8006b66:	b007      	add	sp, #28
 8006b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6a:	7818      	ldrb	r0, [r3, #0]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	7008      	strb	r0, [r1, #0]
 8006b70:	3101      	adds	r1, #1
 8006b72:	e7e7      	b.n	8006b44 <__exponent+0x52>
 8006b74:	2330      	movs	r3, #48	; 0x30
 8006b76:	18e4      	adds	r4, r4, r3
 8006b78:	70ab      	strb	r3, [r5, #2]
 8006b7a:	1d28      	adds	r0, r5, #4
 8006b7c:	70ec      	strb	r4, [r5, #3]
 8006b7e:	e7f1      	b.n	8006b64 <__exponent+0x72>

08006b80 <_printf_float>:
 8006b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b82:	b095      	sub	sp, #84	; 0x54
 8006b84:	000c      	movs	r4, r1
 8006b86:	9209      	str	r2, [sp, #36]	; 0x24
 8006b88:	001e      	movs	r6, r3
 8006b8a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006b8c:	0007      	movs	r7, r0
 8006b8e:	f001 fa81 	bl	8008094 <_localeconv_r>
 8006b92:	6803      	ldr	r3, [r0, #0]
 8006b94:	0018      	movs	r0, r3
 8006b96:	930c      	str	r3, [sp, #48]	; 0x30
 8006b98:	f7f9 fab6 	bl	8000108 <strlen>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9312      	str	r3, [sp, #72]	; 0x48
 8006ba0:	7e23      	ldrb	r3, [r4, #24]
 8006ba2:	2207      	movs	r2, #7
 8006ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	900e      	str	r0, [sp, #56]	; 0x38
 8006baa:	930d      	str	r3, [sp, #52]	; 0x34
 8006bac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006bae:	682b      	ldr	r3, [r5, #0]
 8006bb0:	05c9      	lsls	r1, r1, #23
 8006bb2:	d547      	bpl.n	8006c44 <_printf_float+0xc4>
 8006bb4:	189b      	adds	r3, r3, r2
 8006bb6:	4393      	bics	r3, r2
 8006bb8:	001a      	movs	r2, r3
 8006bba:	3208      	adds	r2, #8
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	64a2      	str	r2, [r4, #72]	; 0x48
 8006bc4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006bca:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006bcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bce:	006b      	lsls	r3, r5, #1
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006bd6:	4ba7      	ldr	r3, [pc, #668]	; (8006e74 <_printf_float+0x2f4>)
 8006bd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006bda:	4252      	negs	r2, r2
 8006bdc:	f7fb fc56 	bl	800248c <__aeabi_dcmpun>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d131      	bne.n	8006c48 <_printf_float+0xc8>
 8006be4:	2201      	movs	r2, #1
 8006be6:	4ba3      	ldr	r3, [pc, #652]	; (8006e74 <_printf_float+0x2f4>)
 8006be8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006bea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006bec:	4252      	negs	r2, r2
 8006bee:	f7f9 fc3d 	bl	800046c <__aeabi_dcmple>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d128      	bne.n	8006c48 <_printf_float+0xc8>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	0029      	movs	r1, r5
 8006bfc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006bfe:	f7f9 fc2b 	bl	8000458 <__aeabi_dcmplt>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d003      	beq.n	8006c0e <_printf_float+0x8e>
 8006c06:	0023      	movs	r3, r4
 8006c08:	222d      	movs	r2, #45	; 0x2d
 8006c0a:	3343      	adds	r3, #67	; 0x43
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c10:	4d99      	ldr	r5, [pc, #612]	; (8006e78 <_printf_float+0x2f8>)
 8006c12:	2b47      	cmp	r3, #71	; 0x47
 8006c14:	d900      	bls.n	8006c18 <_printf_float+0x98>
 8006c16:	4d99      	ldr	r5, [pc, #612]	; (8006e7c <_printf_float+0x2fc>)
 8006c18:	2303      	movs	r3, #3
 8006c1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	439a      	bics	r2, r3
 8006c22:	2300      	movs	r3, #0
 8006c24:	6022      	str	r2, [r4, #0]
 8006c26:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2a:	0021      	movs	r1, r4
 8006c2c:	0038      	movs	r0, r7
 8006c2e:	9600      	str	r6, [sp, #0]
 8006c30:	aa13      	add	r2, sp, #76	; 0x4c
 8006c32:	f000 f9e7 	bl	8007004 <_printf_common>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d000      	beq.n	8006c3c <_printf_float+0xbc>
 8006c3a:	e0a2      	b.n	8006d82 <_printf_float+0x202>
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	4240      	negs	r0, r0
 8006c40:	b015      	add	sp, #84	; 0x54
 8006c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c44:	3307      	adds	r3, #7
 8006c46:	e7b6      	b.n	8006bb6 <_printf_float+0x36>
 8006c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c4a:	002b      	movs	r3, r5
 8006c4c:	0010      	movs	r0, r2
 8006c4e:	0029      	movs	r1, r5
 8006c50:	f7fb fc1c 	bl	800248c <__aeabi_dcmpun>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d00b      	beq.n	8006c70 <_printf_float+0xf0>
 8006c58:	2d00      	cmp	r5, #0
 8006c5a:	da03      	bge.n	8006c64 <_printf_float+0xe4>
 8006c5c:	0023      	movs	r3, r4
 8006c5e:	222d      	movs	r2, #45	; 0x2d
 8006c60:	3343      	adds	r3, #67	; 0x43
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c66:	4d86      	ldr	r5, [pc, #536]	; (8006e80 <_printf_float+0x300>)
 8006c68:	2b47      	cmp	r3, #71	; 0x47
 8006c6a:	d9d5      	bls.n	8006c18 <_printf_float+0x98>
 8006c6c:	4d85      	ldr	r5, [pc, #532]	; (8006e84 <_printf_float+0x304>)
 8006c6e:	e7d3      	b.n	8006c18 <_printf_float+0x98>
 8006c70:	2220      	movs	r2, #32
 8006c72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c74:	6863      	ldr	r3, [r4, #4]
 8006c76:	4391      	bics	r1, r2
 8006c78:	910f      	str	r1, [sp, #60]	; 0x3c
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	d149      	bne.n	8006d12 <_printf_float+0x192>
 8006c7e:	3307      	adds	r3, #7
 8006c80:	6063      	str	r3, [r4, #4]
 8006c82:	2380      	movs	r3, #128	; 0x80
 8006c84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	9206      	str	r2, [sp, #24]
 8006c8e:	aa12      	add	r2, sp, #72	; 0x48
 8006c90:	9205      	str	r2, [sp, #20]
 8006c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c94:	a908      	add	r1, sp, #32
 8006c96:	9204      	str	r2, [sp, #16]
 8006c98:	aa11      	add	r2, sp, #68	; 0x44
 8006c9a:	9203      	str	r2, [sp, #12]
 8006c9c:	2223      	movs	r2, #35	; 0x23
 8006c9e:	6023      	str	r3, [r4, #0]
 8006ca0:	9301      	str	r3, [sp, #4]
 8006ca2:	6863      	ldr	r3, [r4, #4]
 8006ca4:	1852      	adds	r2, r2, r1
 8006ca6:	9202      	str	r2, [sp, #8]
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	0038      	movs	r0, r7
 8006cac:	002b      	movs	r3, r5
 8006cae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cb0:	f7ff febc 	bl	8006a2c <__cvt>
 8006cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cb6:	0005      	movs	r5, r0
 8006cb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006cba:	2b47      	cmp	r3, #71	; 0x47
 8006cbc:	d108      	bne.n	8006cd0 <_printf_float+0x150>
 8006cbe:	1ccb      	adds	r3, r1, #3
 8006cc0:	db02      	blt.n	8006cc8 <_printf_float+0x148>
 8006cc2:	6863      	ldr	r3, [r4, #4]
 8006cc4:	4299      	cmp	r1, r3
 8006cc6:	dd48      	ble.n	8006d5a <_printf_float+0x1da>
 8006cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cca:	3b02      	subs	r3, #2
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd2:	2b65      	cmp	r3, #101	; 0x65
 8006cd4:	d824      	bhi.n	8006d20 <_printf_float+0x1a0>
 8006cd6:	0020      	movs	r0, r4
 8006cd8:	001a      	movs	r2, r3
 8006cda:	3901      	subs	r1, #1
 8006cdc:	3050      	adds	r0, #80	; 0x50
 8006cde:	9111      	str	r1, [sp, #68]	; 0x44
 8006ce0:	f7ff ff07 	bl	8006af2 <__exponent>
 8006ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ce6:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ce8:	1813      	adds	r3, r2, r0
 8006cea:	6123      	str	r3, [r4, #16]
 8006cec:	2a01      	cmp	r2, #1
 8006cee:	dc02      	bgt.n	8006cf6 <_printf_float+0x176>
 8006cf0:	6822      	ldr	r2, [r4, #0]
 8006cf2:	07d2      	lsls	r2, r2, #31
 8006cf4:	d501      	bpl.n	8006cfa <_printf_float+0x17a>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	2323      	movs	r3, #35	; 0x23
 8006cfc:	aa08      	add	r2, sp, #32
 8006cfe:	189b      	adds	r3, r3, r2
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d100      	bne.n	8006d08 <_printf_float+0x188>
 8006d06:	e78f      	b.n	8006c28 <_printf_float+0xa8>
 8006d08:	0023      	movs	r3, r4
 8006d0a:	222d      	movs	r2, #45	; 0x2d
 8006d0c:	3343      	adds	r3, #67	; 0x43
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	e78a      	b.n	8006c28 <_printf_float+0xa8>
 8006d12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d14:	2a47      	cmp	r2, #71	; 0x47
 8006d16:	d1b4      	bne.n	8006c82 <_printf_float+0x102>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1b2      	bne.n	8006c82 <_printf_float+0x102>
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	e7af      	b.n	8006c80 <_printf_float+0x100>
 8006d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d22:	2b66      	cmp	r3, #102	; 0x66
 8006d24:	d11b      	bne.n	8006d5e <_printf_float+0x1de>
 8006d26:	6863      	ldr	r3, [r4, #4]
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	dd0d      	ble.n	8006d48 <_printf_float+0x1c8>
 8006d2c:	6121      	str	r1, [r4, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d102      	bne.n	8006d38 <_printf_float+0x1b8>
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	07d2      	lsls	r2, r2, #31
 8006d36:	d502      	bpl.n	8006d3e <_printf_float+0x1be>
 8006d38:	3301      	adds	r3, #1
 8006d3a:	1859      	adds	r1, r3, r1
 8006d3c:	6121      	str	r1, [r4, #16]
 8006d3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d40:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d42:	2300      	movs	r3, #0
 8006d44:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d46:	e7d8      	b.n	8006cfa <_printf_float+0x17a>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d103      	bne.n	8006d54 <_printf_float+0x1d4>
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	6821      	ldr	r1, [r4, #0]
 8006d50:	4211      	tst	r1, r2
 8006d52:	d000      	beq.n	8006d56 <_printf_float+0x1d6>
 8006d54:	1c9a      	adds	r2, r3, #2
 8006d56:	6122      	str	r2, [r4, #16]
 8006d58:	e7f1      	b.n	8006d3e <_printf_float+0x1be>
 8006d5a:	2367      	movs	r3, #103	; 0x67
 8006d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8006d5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d62:	4293      	cmp	r3, r2
 8006d64:	db06      	blt.n	8006d74 <_printf_float+0x1f4>
 8006d66:	6822      	ldr	r2, [r4, #0]
 8006d68:	6123      	str	r3, [r4, #16]
 8006d6a:	07d2      	lsls	r2, r2, #31
 8006d6c:	d5e7      	bpl.n	8006d3e <_printf_float+0x1be>
 8006d6e:	3301      	adds	r3, #1
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	e7e4      	b.n	8006d3e <_printf_float+0x1be>
 8006d74:	2101      	movs	r1, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dc01      	bgt.n	8006d7e <_printf_float+0x1fe>
 8006d7a:	1849      	adds	r1, r1, r1
 8006d7c:	1ac9      	subs	r1, r1, r3
 8006d7e:	1852      	adds	r2, r2, r1
 8006d80:	e7e9      	b.n	8006d56 <_printf_float+0x1d6>
 8006d82:	6822      	ldr	r2, [r4, #0]
 8006d84:	0553      	lsls	r3, r2, #21
 8006d86:	d407      	bmi.n	8006d98 <_printf_float+0x218>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	002a      	movs	r2, r5
 8006d8c:	0038      	movs	r0, r7
 8006d8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d90:	47b0      	blx	r6
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	d128      	bne.n	8006de8 <_printf_float+0x268>
 8006d96:	e751      	b.n	8006c3c <_printf_float+0xbc>
 8006d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9a:	2b65      	cmp	r3, #101	; 0x65
 8006d9c:	d800      	bhi.n	8006da0 <_printf_float+0x220>
 8006d9e:	e0e1      	b.n	8006f64 <_printf_float+0x3e4>
 8006da0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006da2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006da4:	2200      	movs	r2, #0
 8006da6:	2300      	movs	r3, #0
 8006da8:	f7f9 fb50 	bl	800044c <__aeabi_dcmpeq>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d031      	beq.n	8006e14 <_printf_float+0x294>
 8006db0:	2301      	movs	r3, #1
 8006db2:	0038      	movs	r0, r7
 8006db4:	4a34      	ldr	r2, [pc, #208]	; (8006e88 <_printf_float+0x308>)
 8006db6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006db8:	47b0      	blx	r6
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	d100      	bne.n	8006dc0 <_printf_float+0x240>
 8006dbe:	e73d      	b.n	8006c3c <_printf_float+0xbc>
 8006dc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	db02      	blt.n	8006dce <_printf_float+0x24e>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	07db      	lsls	r3, r3, #31
 8006dcc:	d50c      	bpl.n	8006de8 <_printf_float+0x268>
 8006dce:	0038      	movs	r0, r7
 8006dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dd6:	47b0      	blx	r6
 8006dd8:	2500      	movs	r5, #0
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	d100      	bne.n	8006de0 <_printf_float+0x260>
 8006dde:	e72d      	b.n	8006c3c <_printf_float+0xbc>
 8006de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006de2:	3b01      	subs	r3, #1
 8006de4:	42ab      	cmp	r3, r5
 8006de6:	dc0a      	bgt.n	8006dfe <_printf_float+0x27e>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	079b      	lsls	r3, r3, #30
 8006dec:	d500      	bpl.n	8006df0 <_printf_float+0x270>
 8006dee:	e106      	b.n	8006ffe <_printf_float+0x47e>
 8006df0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006df2:	68e0      	ldr	r0, [r4, #12]
 8006df4:	4298      	cmp	r0, r3
 8006df6:	db00      	blt.n	8006dfa <_printf_float+0x27a>
 8006df8:	e722      	b.n	8006c40 <_printf_float+0xc0>
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	e720      	b.n	8006c40 <_printf_float+0xc0>
 8006dfe:	0022      	movs	r2, r4
 8006e00:	2301      	movs	r3, #1
 8006e02:	0038      	movs	r0, r7
 8006e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e06:	321a      	adds	r2, #26
 8006e08:	47b0      	blx	r6
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	d100      	bne.n	8006e10 <_printf_float+0x290>
 8006e0e:	e715      	b.n	8006c3c <_printf_float+0xbc>
 8006e10:	3501      	adds	r5, #1
 8006e12:	e7e5      	b.n	8006de0 <_printf_float+0x260>
 8006e14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	dc38      	bgt.n	8006e8c <_printf_float+0x30c>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	0038      	movs	r0, r7
 8006e1e:	4a1a      	ldr	r2, [pc, #104]	; (8006e88 <_printf_float+0x308>)
 8006e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e22:	47b0      	blx	r6
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	d100      	bne.n	8006e2a <_printf_float+0x2aa>
 8006e28:	e708      	b.n	8006c3c <_printf_float+0xbc>
 8006e2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	d102      	bne.n	8006e38 <_printf_float+0x2b8>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	07db      	lsls	r3, r3, #31
 8006e36:	d5d7      	bpl.n	8006de8 <_printf_float+0x268>
 8006e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e3a:	0038      	movs	r0, r7
 8006e3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e40:	47b0      	blx	r6
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d100      	bne.n	8006e48 <_printf_float+0x2c8>
 8006e46:	e6f9      	b.n	8006c3c <_printf_float+0xbc>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e50:	425b      	negs	r3, r3
 8006e52:	4293      	cmp	r3, r2
 8006e54:	dc01      	bgt.n	8006e5a <_printf_float+0x2da>
 8006e56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e58:	e797      	b.n	8006d8a <_printf_float+0x20a>
 8006e5a:	0022      	movs	r2, r4
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	0038      	movs	r0, r7
 8006e60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e62:	321a      	adds	r2, #26
 8006e64:	47b0      	blx	r6
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	d100      	bne.n	8006e6c <_printf_float+0x2ec>
 8006e6a:	e6e7      	b.n	8006c3c <_printf_float+0xbc>
 8006e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6e:	3301      	adds	r3, #1
 8006e70:	e7eb      	b.n	8006e4a <_printf_float+0x2ca>
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	7fefffff 	.word	0x7fefffff
 8006e78:	0800a02c 	.word	0x0800a02c
 8006e7c:	0800a030 	.word	0x0800a030
 8006e80:	0800a034 	.word	0x0800a034
 8006e84:	0800a038 	.word	0x0800a038
 8006e88:	0800a03c 	.word	0x0800a03c
 8006e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e90:	920a      	str	r2, [sp, #40]	; 0x28
 8006e92:	429a      	cmp	r2, r3
 8006e94:	dd00      	ble.n	8006e98 <_printf_float+0x318>
 8006e96:	930a      	str	r3, [sp, #40]	; 0x28
 8006e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	dc3c      	bgt.n	8006f18 <_printf_float+0x398>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	930d      	str	r3, [sp, #52]	; 0x34
 8006ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	17db      	asrs	r3, r3, #31
 8006ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006eac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	dc34      	bgt.n	8006f28 <_printf_float+0x3a8>
 8006ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ec0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	db3d      	blt.n	8006f42 <_printf_float+0x3c2>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	07db      	lsls	r3, r3, #31
 8006eca:	d43a      	bmi.n	8006f42 <_printf_float+0x3c2>
 8006ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	1a52      	subs	r2, r2, r1
 8006ed6:	920a      	str	r2, [sp, #40]	; 0x28
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	dd00      	ble.n	8006ede <_printf_float+0x35e>
 8006edc:	930a      	str	r3, [sp, #40]	; 0x28
 8006ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	dc36      	bgt.n	8006f52 <_printf_float+0x3d2>
 8006ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee6:	2500      	movs	r5, #0
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	17db      	asrs	r3, r3, #31
 8006eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ef8:	400a      	ands	r2, r1
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	42ab      	cmp	r3, r5
 8006efe:	dc00      	bgt.n	8006f02 <_printf_float+0x382>
 8006f00:	e772      	b.n	8006de8 <_printf_float+0x268>
 8006f02:	0022      	movs	r2, r4
 8006f04:	2301      	movs	r3, #1
 8006f06:	0038      	movs	r0, r7
 8006f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f0a:	321a      	adds	r2, #26
 8006f0c:	47b0      	blx	r6
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	d100      	bne.n	8006f14 <_printf_float+0x394>
 8006f12:	e693      	b.n	8006c3c <_printf_float+0xbc>
 8006f14:	3501      	adds	r5, #1
 8006f16:	e7ea      	b.n	8006eee <_printf_float+0x36e>
 8006f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1a:	002a      	movs	r2, r5
 8006f1c:	0038      	movs	r0, r7
 8006f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f20:	47b0      	blx	r6
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d1bb      	bne.n	8006e9e <_printf_float+0x31e>
 8006f26:	e689      	b.n	8006c3c <_printf_float+0xbc>
 8006f28:	0022      	movs	r2, r4
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	0038      	movs	r0, r7
 8006f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f30:	321a      	adds	r2, #26
 8006f32:	47b0      	blx	r6
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d100      	bne.n	8006f3a <_printf_float+0x3ba>
 8006f38:	e680      	b.n	8006c3c <_printf_float+0xbc>
 8006f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8006f40:	e7b3      	b.n	8006eaa <_printf_float+0x32a>
 8006f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f44:	0038      	movs	r0, r7
 8006f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f4a:	47b0      	blx	r6
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d1bd      	bne.n	8006ecc <_printf_float+0x34c>
 8006f50:	e674      	b.n	8006c3c <_printf_float+0xbc>
 8006f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f54:	0038      	movs	r0, r7
 8006f56:	18ea      	adds	r2, r5, r3
 8006f58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f5c:	47b0      	blx	r6
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d1c0      	bne.n	8006ee4 <_printf_float+0x364>
 8006f62:	e66b      	b.n	8006c3c <_printf_float+0xbc>
 8006f64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	dc02      	bgt.n	8006f70 <_printf_float+0x3f0>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	421a      	tst	r2, r3
 8006f6e:	d034      	beq.n	8006fda <_printf_float+0x45a>
 8006f70:	2301      	movs	r3, #1
 8006f72:	002a      	movs	r2, r5
 8006f74:	0038      	movs	r0, r7
 8006f76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f78:	47b0      	blx	r6
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	d100      	bne.n	8006f80 <_printf_float+0x400>
 8006f7e:	e65d      	b.n	8006c3c <_printf_float+0xbc>
 8006f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f82:	0038      	movs	r0, r7
 8006f84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f88:	47b0      	blx	r6
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	d100      	bne.n	8006f90 <_printf_float+0x410>
 8006f8e:	e655      	b.n	8006c3c <_printf_float+0xbc>
 8006f90:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006f92:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006f94:	2200      	movs	r2, #0
 8006f96:	2300      	movs	r3, #0
 8006f98:	f7f9 fa58 	bl	800044c <__aeabi_dcmpeq>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d11a      	bne.n	8006fd6 <_printf_float+0x456>
 8006fa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fa2:	1c6a      	adds	r2, r5, #1
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	0038      	movs	r0, r7
 8006fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006faa:	47b0      	blx	r6
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d10e      	bne.n	8006fce <_printf_float+0x44e>
 8006fb0:	e644      	b.n	8006c3c <_printf_float+0xbc>
 8006fb2:	0022      	movs	r2, r4
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	0038      	movs	r0, r7
 8006fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fba:	321a      	adds	r2, #26
 8006fbc:	47b0      	blx	r6
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	d100      	bne.n	8006fc4 <_printf_float+0x444>
 8006fc2:	e63b      	b.n	8006c3c <_printf_float+0xbc>
 8006fc4:	3501      	adds	r5, #1
 8006fc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	42ab      	cmp	r3, r5
 8006fcc:	dcf1      	bgt.n	8006fb2 <_printf_float+0x432>
 8006fce:	0022      	movs	r2, r4
 8006fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd2:	3250      	adds	r2, #80	; 0x50
 8006fd4:	e6da      	b.n	8006d8c <_printf_float+0x20c>
 8006fd6:	2500      	movs	r5, #0
 8006fd8:	e7f5      	b.n	8006fc6 <_printf_float+0x446>
 8006fda:	002a      	movs	r2, r5
 8006fdc:	e7e3      	b.n	8006fa6 <_printf_float+0x426>
 8006fde:	0022      	movs	r2, r4
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	0038      	movs	r0, r7
 8006fe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fe6:	3219      	adds	r2, #25
 8006fe8:	47b0      	blx	r6
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	d100      	bne.n	8006ff0 <_printf_float+0x470>
 8006fee:	e625      	b.n	8006c3c <_printf_float+0xbc>
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	68e3      	ldr	r3, [r4, #12]
 8006ff4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	42ab      	cmp	r3, r5
 8006ffa:	dcf0      	bgt.n	8006fde <_printf_float+0x45e>
 8006ffc:	e6f8      	b.n	8006df0 <_printf_float+0x270>
 8006ffe:	2500      	movs	r5, #0
 8007000:	e7f7      	b.n	8006ff2 <_printf_float+0x472>
 8007002:	46c0      	nop			; (mov r8, r8)

08007004 <_printf_common>:
 8007004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007006:	0015      	movs	r5, r2
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	688a      	ldr	r2, [r1, #8]
 800700c:	690b      	ldr	r3, [r1, #16]
 800700e:	000c      	movs	r4, r1
 8007010:	9000      	str	r0, [sp, #0]
 8007012:	4293      	cmp	r3, r2
 8007014:	da00      	bge.n	8007018 <_printf_common+0x14>
 8007016:	0013      	movs	r3, r2
 8007018:	0022      	movs	r2, r4
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	3243      	adds	r2, #67	; 0x43
 800701e:	7812      	ldrb	r2, [r2, #0]
 8007020:	2a00      	cmp	r2, #0
 8007022:	d001      	beq.n	8007028 <_printf_common+0x24>
 8007024:	3301      	adds	r3, #1
 8007026:	602b      	str	r3, [r5, #0]
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	069b      	lsls	r3, r3, #26
 800702c:	d502      	bpl.n	8007034 <_printf_common+0x30>
 800702e:	682b      	ldr	r3, [r5, #0]
 8007030:	3302      	adds	r3, #2
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	6822      	ldr	r2, [r4, #0]
 8007036:	2306      	movs	r3, #6
 8007038:	0017      	movs	r7, r2
 800703a:	401f      	ands	r7, r3
 800703c:	421a      	tst	r2, r3
 800703e:	d027      	beq.n	8007090 <_printf_common+0x8c>
 8007040:	0023      	movs	r3, r4
 8007042:	3343      	adds	r3, #67	; 0x43
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	1e5a      	subs	r2, r3, #1
 8007048:	4193      	sbcs	r3, r2
 800704a:	6822      	ldr	r2, [r4, #0]
 800704c:	0692      	lsls	r2, r2, #26
 800704e:	d430      	bmi.n	80070b2 <_printf_common+0xae>
 8007050:	0022      	movs	r2, r4
 8007052:	9901      	ldr	r1, [sp, #4]
 8007054:	9800      	ldr	r0, [sp, #0]
 8007056:	9e08      	ldr	r6, [sp, #32]
 8007058:	3243      	adds	r2, #67	; 0x43
 800705a:	47b0      	blx	r6
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d025      	beq.n	80070ac <_printf_common+0xa8>
 8007060:	2306      	movs	r3, #6
 8007062:	6820      	ldr	r0, [r4, #0]
 8007064:	682a      	ldr	r2, [r5, #0]
 8007066:	68e1      	ldr	r1, [r4, #12]
 8007068:	2500      	movs	r5, #0
 800706a:	4003      	ands	r3, r0
 800706c:	2b04      	cmp	r3, #4
 800706e:	d103      	bne.n	8007078 <_printf_common+0x74>
 8007070:	1a8d      	subs	r5, r1, r2
 8007072:	43eb      	mvns	r3, r5
 8007074:	17db      	asrs	r3, r3, #31
 8007076:	401d      	ands	r5, r3
 8007078:	68a3      	ldr	r3, [r4, #8]
 800707a:	6922      	ldr	r2, [r4, #16]
 800707c:	4293      	cmp	r3, r2
 800707e:	dd01      	ble.n	8007084 <_printf_common+0x80>
 8007080:	1a9b      	subs	r3, r3, r2
 8007082:	18ed      	adds	r5, r5, r3
 8007084:	2700      	movs	r7, #0
 8007086:	42bd      	cmp	r5, r7
 8007088:	d120      	bne.n	80070cc <_printf_common+0xc8>
 800708a:	2000      	movs	r0, #0
 800708c:	e010      	b.n	80070b0 <_printf_common+0xac>
 800708e:	3701      	adds	r7, #1
 8007090:	68e3      	ldr	r3, [r4, #12]
 8007092:	682a      	ldr	r2, [r5, #0]
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	42bb      	cmp	r3, r7
 8007098:	ddd2      	ble.n	8007040 <_printf_common+0x3c>
 800709a:	0022      	movs	r2, r4
 800709c:	2301      	movs	r3, #1
 800709e:	9901      	ldr	r1, [sp, #4]
 80070a0:	9800      	ldr	r0, [sp, #0]
 80070a2:	9e08      	ldr	r6, [sp, #32]
 80070a4:	3219      	adds	r2, #25
 80070a6:	47b0      	blx	r6
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d1f0      	bne.n	800708e <_printf_common+0x8a>
 80070ac:	2001      	movs	r0, #1
 80070ae:	4240      	negs	r0, r0
 80070b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070b2:	2030      	movs	r0, #48	; 0x30
 80070b4:	18e1      	adds	r1, r4, r3
 80070b6:	3143      	adds	r1, #67	; 0x43
 80070b8:	7008      	strb	r0, [r1, #0]
 80070ba:	0021      	movs	r1, r4
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	3145      	adds	r1, #69	; 0x45
 80070c0:	7809      	ldrb	r1, [r1, #0]
 80070c2:	18a2      	adds	r2, r4, r2
 80070c4:	3243      	adds	r2, #67	; 0x43
 80070c6:	3302      	adds	r3, #2
 80070c8:	7011      	strb	r1, [r2, #0]
 80070ca:	e7c1      	b.n	8007050 <_printf_common+0x4c>
 80070cc:	0022      	movs	r2, r4
 80070ce:	2301      	movs	r3, #1
 80070d0:	9901      	ldr	r1, [sp, #4]
 80070d2:	9800      	ldr	r0, [sp, #0]
 80070d4:	9e08      	ldr	r6, [sp, #32]
 80070d6:	321a      	adds	r2, #26
 80070d8:	47b0      	blx	r6
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	d0e6      	beq.n	80070ac <_printf_common+0xa8>
 80070de:	3701      	adds	r7, #1
 80070e0:	e7d1      	b.n	8007086 <_printf_common+0x82>
	...

080070e4 <_printf_i>:
 80070e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e6:	b08b      	sub	sp, #44	; 0x2c
 80070e8:	9206      	str	r2, [sp, #24]
 80070ea:	000a      	movs	r2, r1
 80070ec:	3243      	adds	r2, #67	; 0x43
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	9005      	str	r0, [sp, #20]
 80070f2:	9204      	str	r2, [sp, #16]
 80070f4:	7e0a      	ldrb	r2, [r1, #24]
 80070f6:	000c      	movs	r4, r1
 80070f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070fa:	2a78      	cmp	r2, #120	; 0x78
 80070fc:	d807      	bhi.n	800710e <_printf_i+0x2a>
 80070fe:	2a62      	cmp	r2, #98	; 0x62
 8007100:	d809      	bhi.n	8007116 <_printf_i+0x32>
 8007102:	2a00      	cmp	r2, #0
 8007104:	d100      	bne.n	8007108 <_printf_i+0x24>
 8007106:	e0c1      	b.n	800728c <_printf_i+0x1a8>
 8007108:	2a58      	cmp	r2, #88	; 0x58
 800710a:	d100      	bne.n	800710e <_printf_i+0x2a>
 800710c:	e08c      	b.n	8007228 <_printf_i+0x144>
 800710e:	0026      	movs	r6, r4
 8007110:	3642      	adds	r6, #66	; 0x42
 8007112:	7032      	strb	r2, [r6, #0]
 8007114:	e022      	b.n	800715c <_printf_i+0x78>
 8007116:	0010      	movs	r0, r2
 8007118:	3863      	subs	r0, #99	; 0x63
 800711a:	2815      	cmp	r0, #21
 800711c:	d8f7      	bhi.n	800710e <_printf_i+0x2a>
 800711e:	f7f9 f805 	bl	800012c <__gnu_thumb1_case_shi>
 8007122:	0016      	.short	0x0016
 8007124:	fff6001f 	.word	0xfff6001f
 8007128:	fff6fff6 	.word	0xfff6fff6
 800712c:	001ffff6 	.word	0x001ffff6
 8007130:	fff6fff6 	.word	0xfff6fff6
 8007134:	fff6fff6 	.word	0xfff6fff6
 8007138:	003600a8 	.word	0x003600a8
 800713c:	fff6009a 	.word	0xfff6009a
 8007140:	00b9fff6 	.word	0x00b9fff6
 8007144:	0036fff6 	.word	0x0036fff6
 8007148:	fff6fff6 	.word	0xfff6fff6
 800714c:	009e      	.short	0x009e
 800714e:	0026      	movs	r6, r4
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	3642      	adds	r6, #66	; 0x42
 8007154:	1d11      	adds	r1, r2, #4
 8007156:	6019      	str	r1, [r3, #0]
 8007158:	6813      	ldr	r3, [r2, #0]
 800715a:	7033      	strb	r3, [r6, #0]
 800715c:	2301      	movs	r3, #1
 800715e:	e0a7      	b.n	80072b0 <_printf_i+0x1cc>
 8007160:	6808      	ldr	r0, [r1, #0]
 8007162:	6819      	ldr	r1, [r3, #0]
 8007164:	1d0a      	adds	r2, r1, #4
 8007166:	0605      	lsls	r5, r0, #24
 8007168:	d50b      	bpl.n	8007182 <_printf_i+0x9e>
 800716a:	680d      	ldr	r5, [r1, #0]
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	2d00      	cmp	r5, #0
 8007170:	da03      	bge.n	800717a <_printf_i+0x96>
 8007172:	232d      	movs	r3, #45	; 0x2d
 8007174:	9a04      	ldr	r2, [sp, #16]
 8007176:	426d      	negs	r5, r5
 8007178:	7013      	strb	r3, [r2, #0]
 800717a:	4b61      	ldr	r3, [pc, #388]	; (8007300 <_printf_i+0x21c>)
 800717c:	270a      	movs	r7, #10
 800717e:	9303      	str	r3, [sp, #12]
 8007180:	e01b      	b.n	80071ba <_printf_i+0xd6>
 8007182:	680d      	ldr	r5, [r1, #0]
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	0641      	lsls	r1, r0, #25
 8007188:	d5f1      	bpl.n	800716e <_printf_i+0x8a>
 800718a:	b22d      	sxth	r5, r5
 800718c:	e7ef      	b.n	800716e <_printf_i+0x8a>
 800718e:	680d      	ldr	r5, [r1, #0]
 8007190:	6819      	ldr	r1, [r3, #0]
 8007192:	1d08      	adds	r0, r1, #4
 8007194:	6018      	str	r0, [r3, #0]
 8007196:	062e      	lsls	r6, r5, #24
 8007198:	d501      	bpl.n	800719e <_printf_i+0xba>
 800719a:	680d      	ldr	r5, [r1, #0]
 800719c:	e003      	b.n	80071a6 <_printf_i+0xc2>
 800719e:	066d      	lsls	r5, r5, #25
 80071a0:	d5fb      	bpl.n	800719a <_printf_i+0xb6>
 80071a2:	680d      	ldr	r5, [r1, #0]
 80071a4:	b2ad      	uxth	r5, r5
 80071a6:	4b56      	ldr	r3, [pc, #344]	; (8007300 <_printf_i+0x21c>)
 80071a8:	2708      	movs	r7, #8
 80071aa:	9303      	str	r3, [sp, #12]
 80071ac:	2a6f      	cmp	r2, #111	; 0x6f
 80071ae:	d000      	beq.n	80071b2 <_printf_i+0xce>
 80071b0:	3702      	adds	r7, #2
 80071b2:	0023      	movs	r3, r4
 80071b4:	2200      	movs	r2, #0
 80071b6:	3343      	adds	r3, #67	; 0x43
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	6863      	ldr	r3, [r4, #4]
 80071bc:	60a3      	str	r3, [r4, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	db03      	blt.n	80071ca <_printf_i+0xe6>
 80071c2:	2204      	movs	r2, #4
 80071c4:	6821      	ldr	r1, [r4, #0]
 80071c6:	4391      	bics	r1, r2
 80071c8:	6021      	str	r1, [r4, #0]
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	d102      	bne.n	80071d4 <_printf_i+0xf0>
 80071ce:	9e04      	ldr	r6, [sp, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00c      	beq.n	80071ee <_printf_i+0x10a>
 80071d4:	9e04      	ldr	r6, [sp, #16]
 80071d6:	0028      	movs	r0, r5
 80071d8:	0039      	movs	r1, r7
 80071da:	f7f9 f837 	bl	800024c <__aeabi_uidivmod>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	3e01      	subs	r6, #1
 80071e2:	5c5b      	ldrb	r3, [r3, r1]
 80071e4:	7033      	strb	r3, [r6, #0]
 80071e6:	002b      	movs	r3, r5
 80071e8:	0005      	movs	r5, r0
 80071ea:	429f      	cmp	r7, r3
 80071ec:	d9f3      	bls.n	80071d6 <_printf_i+0xf2>
 80071ee:	2f08      	cmp	r7, #8
 80071f0:	d109      	bne.n	8007206 <_printf_i+0x122>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	07db      	lsls	r3, r3, #31
 80071f6:	d506      	bpl.n	8007206 <_printf_i+0x122>
 80071f8:	6863      	ldr	r3, [r4, #4]
 80071fa:	6922      	ldr	r2, [r4, #16]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	dc02      	bgt.n	8007206 <_printf_i+0x122>
 8007200:	2330      	movs	r3, #48	; 0x30
 8007202:	3e01      	subs	r6, #1
 8007204:	7033      	strb	r3, [r6, #0]
 8007206:	9b04      	ldr	r3, [sp, #16]
 8007208:	1b9b      	subs	r3, r3, r6
 800720a:	6123      	str	r3, [r4, #16]
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	0021      	movs	r1, r4
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	9805      	ldr	r0, [sp, #20]
 8007214:	9b06      	ldr	r3, [sp, #24]
 8007216:	aa09      	add	r2, sp, #36	; 0x24
 8007218:	f7ff fef4 	bl	8007004 <_printf_common>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d14c      	bne.n	80072ba <_printf_i+0x1d6>
 8007220:	2001      	movs	r0, #1
 8007222:	4240      	negs	r0, r0
 8007224:	b00b      	add	sp, #44	; 0x2c
 8007226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007228:	3145      	adds	r1, #69	; 0x45
 800722a:	700a      	strb	r2, [r1, #0]
 800722c:	4a34      	ldr	r2, [pc, #208]	; (8007300 <_printf_i+0x21c>)
 800722e:	9203      	str	r2, [sp, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	6821      	ldr	r1, [r4, #0]
 8007234:	ca20      	ldmia	r2!, {r5}
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	0608      	lsls	r0, r1, #24
 800723a:	d516      	bpl.n	800726a <_printf_i+0x186>
 800723c:	07cb      	lsls	r3, r1, #31
 800723e:	d502      	bpl.n	8007246 <_printf_i+0x162>
 8007240:	2320      	movs	r3, #32
 8007242:	4319      	orrs	r1, r3
 8007244:	6021      	str	r1, [r4, #0]
 8007246:	2710      	movs	r7, #16
 8007248:	2d00      	cmp	r5, #0
 800724a:	d1b2      	bne.n	80071b2 <_printf_i+0xce>
 800724c:	2320      	movs	r3, #32
 800724e:	6822      	ldr	r2, [r4, #0]
 8007250:	439a      	bics	r2, r3
 8007252:	6022      	str	r2, [r4, #0]
 8007254:	e7ad      	b.n	80071b2 <_printf_i+0xce>
 8007256:	2220      	movs	r2, #32
 8007258:	6809      	ldr	r1, [r1, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	6022      	str	r2, [r4, #0]
 800725e:	0022      	movs	r2, r4
 8007260:	2178      	movs	r1, #120	; 0x78
 8007262:	3245      	adds	r2, #69	; 0x45
 8007264:	7011      	strb	r1, [r2, #0]
 8007266:	4a27      	ldr	r2, [pc, #156]	; (8007304 <_printf_i+0x220>)
 8007268:	e7e1      	b.n	800722e <_printf_i+0x14a>
 800726a:	0648      	lsls	r0, r1, #25
 800726c:	d5e6      	bpl.n	800723c <_printf_i+0x158>
 800726e:	b2ad      	uxth	r5, r5
 8007270:	e7e4      	b.n	800723c <_printf_i+0x158>
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	680d      	ldr	r5, [r1, #0]
 8007276:	1d10      	adds	r0, r2, #4
 8007278:	6949      	ldr	r1, [r1, #20]
 800727a:	6018      	str	r0, [r3, #0]
 800727c:	6813      	ldr	r3, [r2, #0]
 800727e:	062e      	lsls	r6, r5, #24
 8007280:	d501      	bpl.n	8007286 <_printf_i+0x1a2>
 8007282:	6019      	str	r1, [r3, #0]
 8007284:	e002      	b.n	800728c <_printf_i+0x1a8>
 8007286:	066d      	lsls	r5, r5, #25
 8007288:	d5fb      	bpl.n	8007282 <_printf_i+0x19e>
 800728a:	8019      	strh	r1, [r3, #0]
 800728c:	2300      	movs	r3, #0
 800728e:	9e04      	ldr	r6, [sp, #16]
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	e7bb      	b.n	800720c <_printf_i+0x128>
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	1d11      	adds	r1, r2, #4
 8007298:	6019      	str	r1, [r3, #0]
 800729a:	6816      	ldr	r6, [r2, #0]
 800729c:	2100      	movs	r1, #0
 800729e:	0030      	movs	r0, r6
 80072a0:	6862      	ldr	r2, [r4, #4]
 80072a2:	f000 ff05 	bl	80080b0 <memchr>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d001      	beq.n	80072ae <_printf_i+0x1ca>
 80072aa:	1b80      	subs	r0, r0, r6
 80072ac:	6060      	str	r0, [r4, #4]
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	2300      	movs	r3, #0
 80072b4:	9a04      	ldr	r2, [sp, #16]
 80072b6:	7013      	strb	r3, [r2, #0]
 80072b8:	e7a8      	b.n	800720c <_printf_i+0x128>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	0032      	movs	r2, r6
 80072be:	9906      	ldr	r1, [sp, #24]
 80072c0:	9805      	ldr	r0, [sp, #20]
 80072c2:	9d07      	ldr	r5, [sp, #28]
 80072c4:	47a8      	blx	r5
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	d0aa      	beq.n	8007220 <_printf_i+0x13c>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	079b      	lsls	r3, r3, #30
 80072ce:	d415      	bmi.n	80072fc <_printf_i+0x218>
 80072d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d2:	68e0      	ldr	r0, [r4, #12]
 80072d4:	4298      	cmp	r0, r3
 80072d6:	daa5      	bge.n	8007224 <_printf_i+0x140>
 80072d8:	0018      	movs	r0, r3
 80072da:	e7a3      	b.n	8007224 <_printf_i+0x140>
 80072dc:	0022      	movs	r2, r4
 80072de:	2301      	movs	r3, #1
 80072e0:	9906      	ldr	r1, [sp, #24]
 80072e2:	9805      	ldr	r0, [sp, #20]
 80072e4:	9e07      	ldr	r6, [sp, #28]
 80072e6:	3219      	adds	r2, #25
 80072e8:	47b0      	blx	r6
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	d098      	beq.n	8007220 <_printf_i+0x13c>
 80072ee:	3501      	adds	r5, #1
 80072f0:	68e3      	ldr	r3, [r4, #12]
 80072f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	42ab      	cmp	r3, r5
 80072f8:	dcf0      	bgt.n	80072dc <_printf_i+0x1f8>
 80072fa:	e7e9      	b.n	80072d0 <_printf_i+0x1ec>
 80072fc:	2500      	movs	r5, #0
 80072fe:	e7f7      	b.n	80072f0 <_printf_i+0x20c>
 8007300:	0800a03e 	.word	0x0800a03e
 8007304:	0800a04f 	.word	0x0800a04f

08007308 <siprintf>:
 8007308:	b40e      	push	{r1, r2, r3}
 800730a:	b500      	push	{lr}
 800730c:	490b      	ldr	r1, [pc, #44]	; (800733c <siprintf+0x34>)
 800730e:	b09c      	sub	sp, #112	; 0x70
 8007310:	ab1d      	add	r3, sp, #116	; 0x74
 8007312:	9002      	str	r0, [sp, #8]
 8007314:	9006      	str	r0, [sp, #24]
 8007316:	9107      	str	r1, [sp, #28]
 8007318:	9104      	str	r1, [sp, #16]
 800731a:	4809      	ldr	r0, [pc, #36]	; (8007340 <siprintf+0x38>)
 800731c:	4909      	ldr	r1, [pc, #36]	; (8007344 <siprintf+0x3c>)
 800731e:	cb04      	ldmia	r3!, {r2}
 8007320:	9105      	str	r1, [sp, #20]
 8007322:	6800      	ldr	r0, [r0, #0]
 8007324:	a902      	add	r1, sp, #8
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	f001 fbe2 	bl	8008af0 <_svfiprintf_r>
 800732c:	2300      	movs	r3, #0
 800732e:	9a02      	ldr	r2, [sp, #8]
 8007330:	7013      	strb	r3, [r2, #0]
 8007332:	b01c      	add	sp, #112	; 0x70
 8007334:	bc08      	pop	{r3}
 8007336:	b003      	add	sp, #12
 8007338:	4718      	bx	r3
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	7fffffff 	.word	0x7fffffff
 8007340:	2000000c 	.word	0x2000000c
 8007344:	ffff0208 	.word	0xffff0208

08007348 <quorem>:
 8007348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734a:	0006      	movs	r6, r0
 800734c:	690b      	ldr	r3, [r1, #16]
 800734e:	6932      	ldr	r2, [r6, #16]
 8007350:	b087      	sub	sp, #28
 8007352:	2000      	movs	r0, #0
 8007354:	9103      	str	r1, [sp, #12]
 8007356:	429a      	cmp	r2, r3
 8007358:	db65      	blt.n	8007426 <quorem+0xde>
 800735a:	3b01      	subs	r3, #1
 800735c:	009c      	lsls	r4, r3, #2
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	000b      	movs	r3, r1
 8007362:	3314      	adds	r3, #20
 8007364:	9305      	str	r3, [sp, #20]
 8007366:	191b      	adds	r3, r3, r4
 8007368:	9304      	str	r3, [sp, #16]
 800736a:	0033      	movs	r3, r6
 800736c:	3314      	adds	r3, #20
 800736e:	9302      	str	r3, [sp, #8]
 8007370:	191c      	adds	r4, r3, r4
 8007372:	9b04      	ldr	r3, [sp, #16]
 8007374:	6827      	ldr	r7, [r4, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	0038      	movs	r0, r7
 800737a:	1c5d      	adds	r5, r3, #1
 800737c:	0029      	movs	r1, r5
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	f7f8 fede 	bl	8000140 <__udivsi3>
 8007384:	9001      	str	r0, [sp, #4]
 8007386:	42af      	cmp	r7, r5
 8007388:	d324      	bcc.n	80073d4 <quorem+0x8c>
 800738a:	2500      	movs	r5, #0
 800738c:	46ac      	mov	ip, r5
 800738e:	9802      	ldr	r0, [sp, #8]
 8007390:	9f05      	ldr	r7, [sp, #20]
 8007392:	cf08      	ldmia	r7!, {r3}
 8007394:	9a01      	ldr	r2, [sp, #4]
 8007396:	b299      	uxth	r1, r3
 8007398:	4351      	muls	r1, r2
 800739a:	0c1b      	lsrs	r3, r3, #16
 800739c:	4353      	muls	r3, r2
 800739e:	1949      	adds	r1, r1, r5
 80073a0:	0c0a      	lsrs	r2, r1, #16
 80073a2:	189b      	adds	r3, r3, r2
 80073a4:	6802      	ldr	r2, [r0, #0]
 80073a6:	b289      	uxth	r1, r1
 80073a8:	b292      	uxth	r2, r2
 80073aa:	4462      	add	r2, ip
 80073ac:	1a52      	subs	r2, r2, r1
 80073ae:	6801      	ldr	r1, [r0, #0]
 80073b0:	0c1d      	lsrs	r5, r3, #16
 80073b2:	0c09      	lsrs	r1, r1, #16
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	1acb      	subs	r3, r1, r3
 80073b8:	1411      	asrs	r1, r2, #16
 80073ba:	185b      	adds	r3, r3, r1
 80073bc:	1419      	asrs	r1, r3, #16
 80073be:	b292      	uxth	r2, r2
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	431a      	orrs	r2, r3
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	468c      	mov	ip, r1
 80073c8:	c004      	stmia	r0!, {r2}
 80073ca:	42bb      	cmp	r3, r7
 80073cc:	d2e1      	bcs.n	8007392 <quorem+0x4a>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d030      	beq.n	8007436 <quorem+0xee>
 80073d4:	0030      	movs	r0, r6
 80073d6:	9903      	ldr	r1, [sp, #12]
 80073d8:	f001 f902 	bl	80085e0 <__mcmp>
 80073dc:	2800      	cmp	r0, #0
 80073de:	db21      	blt.n	8007424 <quorem+0xdc>
 80073e0:	0030      	movs	r0, r6
 80073e2:	2400      	movs	r4, #0
 80073e4:	9b01      	ldr	r3, [sp, #4]
 80073e6:	9903      	ldr	r1, [sp, #12]
 80073e8:	3301      	adds	r3, #1
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	3014      	adds	r0, #20
 80073ee:	3114      	adds	r1, #20
 80073f0:	6803      	ldr	r3, [r0, #0]
 80073f2:	c920      	ldmia	r1!, {r5}
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	1914      	adds	r4, r2, r4
 80073f8:	b2aa      	uxth	r2, r5
 80073fa:	1aa2      	subs	r2, r4, r2
 80073fc:	0c1b      	lsrs	r3, r3, #16
 80073fe:	0c2d      	lsrs	r5, r5, #16
 8007400:	1414      	asrs	r4, r2, #16
 8007402:	1b5b      	subs	r3, r3, r5
 8007404:	191b      	adds	r3, r3, r4
 8007406:	141c      	asrs	r4, r3, #16
 8007408:	b292      	uxth	r2, r2
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	4313      	orrs	r3, r2
 800740e:	c008      	stmia	r0!, {r3}
 8007410:	9b04      	ldr	r3, [sp, #16]
 8007412:	428b      	cmp	r3, r1
 8007414:	d2ec      	bcs.n	80073f0 <quorem+0xa8>
 8007416:	9b00      	ldr	r3, [sp, #0]
 8007418:	9a02      	ldr	r2, [sp, #8]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	18d3      	adds	r3, r2, r3
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	2a00      	cmp	r2, #0
 8007422:	d015      	beq.n	8007450 <quorem+0x108>
 8007424:	9801      	ldr	r0, [sp, #4]
 8007426:	b007      	add	sp, #28
 8007428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d106      	bne.n	800743e <quorem+0xf6>
 8007430:	9b00      	ldr	r3, [sp, #0]
 8007432:	3b01      	subs	r3, #1
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	9b02      	ldr	r3, [sp, #8]
 8007438:	3c04      	subs	r4, #4
 800743a:	42a3      	cmp	r3, r4
 800743c:	d3f5      	bcc.n	800742a <quorem+0xe2>
 800743e:	9b00      	ldr	r3, [sp, #0]
 8007440:	6133      	str	r3, [r6, #16]
 8007442:	e7c7      	b.n	80073d4 <quorem+0x8c>
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	2a00      	cmp	r2, #0
 8007448:	d106      	bne.n	8007458 <quorem+0x110>
 800744a:	9a00      	ldr	r2, [sp, #0]
 800744c:	3a01      	subs	r2, #1
 800744e:	9200      	str	r2, [sp, #0]
 8007450:	9a02      	ldr	r2, [sp, #8]
 8007452:	3b04      	subs	r3, #4
 8007454:	429a      	cmp	r2, r3
 8007456:	d3f5      	bcc.n	8007444 <quorem+0xfc>
 8007458:	9b00      	ldr	r3, [sp, #0]
 800745a:	6133      	str	r3, [r6, #16]
 800745c:	e7e2      	b.n	8007424 <quorem+0xdc>
	...

08007460 <_dtoa_r>:
 8007460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007462:	b09d      	sub	sp, #116	; 0x74
 8007464:	9202      	str	r2, [sp, #8]
 8007466:	9303      	str	r3, [sp, #12]
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	9c03      	ldr	r4, [sp, #12]
 800746c:	9308      	str	r3, [sp, #32]
 800746e:	9409      	str	r4, [sp, #36]	; 0x24
 8007470:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007472:	0007      	movs	r7, r0
 8007474:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007476:	2c00      	cmp	r4, #0
 8007478:	d10e      	bne.n	8007498 <_dtoa_r+0x38>
 800747a:	2010      	movs	r0, #16
 800747c:	f000 fe0e 	bl	800809c <malloc>
 8007480:	1e02      	subs	r2, r0, #0
 8007482:	6278      	str	r0, [r7, #36]	; 0x24
 8007484:	d104      	bne.n	8007490 <_dtoa_r+0x30>
 8007486:	21ea      	movs	r1, #234	; 0xea
 8007488:	4bc7      	ldr	r3, [pc, #796]	; (80077a8 <_dtoa_r+0x348>)
 800748a:	48c8      	ldr	r0, [pc, #800]	; (80077ac <_dtoa_r+0x34c>)
 800748c:	f001 fc42 	bl	8008d14 <__assert_func>
 8007490:	6044      	str	r4, [r0, #4]
 8007492:	6084      	str	r4, [r0, #8]
 8007494:	6004      	str	r4, [r0, #0]
 8007496:	60c4      	str	r4, [r0, #12]
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	6819      	ldr	r1, [r3, #0]
 800749c:	2900      	cmp	r1, #0
 800749e:	d00a      	beq.n	80074b6 <_dtoa_r+0x56>
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	2301      	movs	r3, #1
 80074a4:	4093      	lsls	r3, r2
 80074a6:	604a      	str	r2, [r1, #4]
 80074a8:	608b      	str	r3, [r1, #8]
 80074aa:	0038      	movs	r0, r7
 80074ac:	f000 fe58 	bl	8008160 <_Bfree>
 80074b0:	2200      	movs	r2, #0
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da20      	bge.n	80074fe <_dtoa_r+0x9e>
 80074bc:	2301      	movs	r3, #1
 80074be:	602b      	str	r3, [r5, #0]
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	9309      	str	r3, [sp, #36]	; 0x24
 80074c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80074ca:	4bb9      	ldr	r3, [pc, #740]	; (80077b0 <_dtoa_r+0x350>)
 80074cc:	4ab8      	ldr	r2, [pc, #736]	; (80077b0 <_dtoa_r+0x350>)
 80074ce:	402b      	ands	r3, r5
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d117      	bne.n	8007504 <_dtoa_r+0xa4>
 80074d4:	4bb7      	ldr	r3, [pc, #732]	; (80077b4 <_dtoa_r+0x354>)
 80074d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074d8:	0328      	lsls	r0, r5, #12
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	9b02      	ldr	r3, [sp, #8]
 80074de:	0b00      	lsrs	r0, r0, #12
 80074e0:	4318      	orrs	r0, r3
 80074e2:	d101      	bne.n	80074e8 <_dtoa_r+0x88>
 80074e4:	f000 fdbf 	bl	8008066 <_dtoa_r+0xc06>
 80074e8:	48b3      	ldr	r0, [pc, #716]	; (80077b8 <_dtoa_r+0x358>)
 80074ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074ec:	9006      	str	r0, [sp, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <_dtoa_r+0x98>
 80074f2:	4bb2      	ldr	r3, [pc, #712]	; (80077bc <_dtoa_r+0x35c>)
 80074f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	9806      	ldr	r0, [sp, #24]
 80074fa:	b01d      	add	sp, #116	; 0x74
 80074fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074fe:	2300      	movs	r3, #0
 8007500:	602b      	str	r3, [r5, #0]
 8007502:	e7e1      	b.n	80074c8 <_dtoa_r+0x68>
 8007504:	9b08      	ldr	r3, [sp, #32]
 8007506:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007508:	9312      	str	r3, [sp, #72]	; 0x48
 800750a:	9413      	str	r4, [sp, #76]	; 0x4c
 800750c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800750e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007510:	2200      	movs	r2, #0
 8007512:	2300      	movs	r3, #0
 8007514:	f7f8 ff9a 	bl	800044c <__aeabi_dcmpeq>
 8007518:	1e04      	subs	r4, r0, #0
 800751a:	d009      	beq.n	8007530 <_dtoa_r+0xd0>
 800751c:	2301      	movs	r3, #1
 800751e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	4ba7      	ldr	r3, [pc, #668]	; (80077c0 <_dtoa_r+0x360>)
 8007524:	9306      	str	r3, [sp, #24]
 8007526:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0e5      	beq.n	80074f8 <_dtoa_r+0x98>
 800752c:	4ba5      	ldr	r3, [pc, #660]	; (80077c4 <_dtoa_r+0x364>)
 800752e:	e7e1      	b.n	80074f4 <_dtoa_r+0x94>
 8007530:	ab1a      	add	r3, sp, #104	; 0x68
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	ab1b      	add	r3, sp, #108	; 0x6c
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	0038      	movs	r0, r7
 800753a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800753c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800753e:	f001 f903 	bl	8008748 <__d2b>
 8007542:	006e      	lsls	r6, r5, #1
 8007544:	9005      	str	r0, [sp, #20]
 8007546:	0d76      	lsrs	r6, r6, #21
 8007548:	d100      	bne.n	800754c <_dtoa_r+0xec>
 800754a:	e07c      	b.n	8007646 <_dtoa_r+0x1e6>
 800754c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800754e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007550:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007552:	4a9d      	ldr	r2, [pc, #628]	; (80077c8 <_dtoa_r+0x368>)
 8007554:	031b      	lsls	r3, r3, #12
 8007556:	0b1b      	lsrs	r3, r3, #12
 8007558:	431a      	orrs	r2, r3
 800755a:	0011      	movs	r1, r2
 800755c:	4b9b      	ldr	r3, [pc, #620]	; (80077cc <_dtoa_r+0x36c>)
 800755e:	9418      	str	r4, [sp, #96]	; 0x60
 8007560:	18f6      	adds	r6, r6, r3
 8007562:	2200      	movs	r2, #0
 8007564:	4b9a      	ldr	r3, [pc, #616]	; (80077d0 <_dtoa_r+0x370>)
 8007566:	f7fa fbff 	bl	8001d68 <__aeabi_dsub>
 800756a:	4a9a      	ldr	r2, [pc, #616]	; (80077d4 <_dtoa_r+0x374>)
 800756c:	4b9a      	ldr	r3, [pc, #616]	; (80077d8 <_dtoa_r+0x378>)
 800756e:	f7fa f98f 	bl	8001890 <__aeabi_dmul>
 8007572:	4a9a      	ldr	r2, [pc, #616]	; (80077dc <_dtoa_r+0x37c>)
 8007574:	4b9a      	ldr	r3, [pc, #616]	; (80077e0 <_dtoa_r+0x380>)
 8007576:	f7f9 fa4d 	bl	8000a14 <__aeabi_dadd>
 800757a:	0004      	movs	r4, r0
 800757c:	0030      	movs	r0, r6
 800757e:	000d      	movs	r5, r1
 8007580:	f7fa ffd8 	bl	8002534 <__aeabi_i2d>
 8007584:	4a97      	ldr	r2, [pc, #604]	; (80077e4 <_dtoa_r+0x384>)
 8007586:	4b98      	ldr	r3, [pc, #608]	; (80077e8 <_dtoa_r+0x388>)
 8007588:	f7fa f982 	bl	8001890 <__aeabi_dmul>
 800758c:	0002      	movs	r2, r0
 800758e:	000b      	movs	r3, r1
 8007590:	0020      	movs	r0, r4
 8007592:	0029      	movs	r1, r5
 8007594:	f7f9 fa3e 	bl	8000a14 <__aeabi_dadd>
 8007598:	0004      	movs	r4, r0
 800759a:	000d      	movs	r5, r1
 800759c:	f7fa ff94 	bl	80024c8 <__aeabi_d2iz>
 80075a0:	2200      	movs	r2, #0
 80075a2:	9002      	str	r0, [sp, #8]
 80075a4:	2300      	movs	r3, #0
 80075a6:	0020      	movs	r0, r4
 80075a8:	0029      	movs	r1, r5
 80075aa:	f7f8 ff55 	bl	8000458 <__aeabi_dcmplt>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d00b      	beq.n	80075ca <_dtoa_r+0x16a>
 80075b2:	9802      	ldr	r0, [sp, #8]
 80075b4:	f7fa ffbe 	bl	8002534 <__aeabi_i2d>
 80075b8:	002b      	movs	r3, r5
 80075ba:	0022      	movs	r2, r4
 80075bc:	f7f8 ff46 	bl	800044c <__aeabi_dcmpeq>
 80075c0:	4243      	negs	r3, r0
 80075c2:	4158      	adcs	r0, r3
 80075c4:	9b02      	ldr	r3, [sp, #8]
 80075c6:	1a1b      	subs	r3, r3, r0
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	2301      	movs	r3, #1
 80075cc:	9316      	str	r3, [sp, #88]	; 0x58
 80075ce:	9b02      	ldr	r3, [sp, #8]
 80075d0:	2b16      	cmp	r3, #22
 80075d2:	d80f      	bhi.n	80075f4 <_dtoa_r+0x194>
 80075d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80075d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80075d8:	00da      	lsls	r2, r3, #3
 80075da:	4b84      	ldr	r3, [pc, #528]	; (80077ec <_dtoa_r+0x38c>)
 80075dc:	189b      	adds	r3, r3, r2
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f7f8 ff39 	bl	8000458 <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d049      	beq.n	800767e <_dtoa_r+0x21e>
 80075ea:	9b02      	ldr	r3, [sp, #8]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	9302      	str	r3, [sp, #8]
 80075f0:	2300      	movs	r3, #0
 80075f2:	9316      	str	r3, [sp, #88]	; 0x58
 80075f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80075f6:	1b9e      	subs	r6, r3, r6
 80075f8:	2300      	movs	r3, #0
 80075fa:	930a      	str	r3, [sp, #40]	; 0x28
 80075fc:	0033      	movs	r3, r6
 80075fe:	3b01      	subs	r3, #1
 8007600:	930d      	str	r3, [sp, #52]	; 0x34
 8007602:	d504      	bpl.n	800760e <_dtoa_r+0x1ae>
 8007604:	2301      	movs	r3, #1
 8007606:	1b9b      	subs	r3, r3, r6
 8007608:	930a      	str	r3, [sp, #40]	; 0x28
 800760a:	2300      	movs	r3, #0
 800760c:	930d      	str	r3, [sp, #52]	; 0x34
 800760e:	9b02      	ldr	r3, [sp, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	db36      	blt.n	8007682 <_dtoa_r+0x222>
 8007614:	9a02      	ldr	r2, [sp, #8]
 8007616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007618:	4694      	mov	ip, r2
 800761a:	4463      	add	r3, ip
 800761c:	930d      	str	r3, [sp, #52]	; 0x34
 800761e:	2300      	movs	r3, #0
 8007620:	9215      	str	r2, [sp, #84]	; 0x54
 8007622:	930e      	str	r3, [sp, #56]	; 0x38
 8007624:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007626:	2401      	movs	r4, #1
 8007628:	2b09      	cmp	r3, #9
 800762a:	d864      	bhi.n	80076f6 <_dtoa_r+0x296>
 800762c:	2b05      	cmp	r3, #5
 800762e:	dd02      	ble.n	8007636 <_dtoa_r+0x1d6>
 8007630:	2400      	movs	r4, #0
 8007632:	3b04      	subs	r3, #4
 8007634:	9322      	str	r3, [sp, #136]	; 0x88
 8007636:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007638:	1e98      	subs	r0, r3, #2
 800763a:	2803      	cmp	r0, #3
 800763c:	d864      	bhi.n	8007708 <_dtoa_r+0x2a8>
 800763e:	f7f8 fd6b 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007642:	3829      	.short	0x3829
 8007644:	5836      	.short	0x5836
 8007646:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007648:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800764a:	189e      	adds	r6, r3, r2
 800764c:	4b68      	ldr	r3, [pc, #416]	; (80077f0 <_dtoa_r+0x390>)
 800764e:	18f2      	adds	r2, r6, r3
 8007650:	2a20      	cmp	r2, #32
 8007652:	dd0f      	ble.n	8007674 <_dtoa_r+0x214>
 8007654:	2340      	movs	r3, #64	; 0x40
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	409d      	lsls	r5, r3
 800765a:	4b66      	ldr	r3, [pc, #408]	; (80077f4 <_dtoa_r+0x394>)
 800765c:	9802      	ldr	r0, [sp, #8]
 800765e:	18f3      	adds	r3, r6, r3
 8007660:	40d8      	lsrs	r0, r3
 8007662:	4328      	orrs	r0, r5
 8007664:	f7fa ff96 	bl	8002594 <__aeabi_ui2d>
 8007668:	2301      	movs	r3, #1
 800766a:	4c63      	ldr	r4, [pc, #396]	; (80077f8 <_dtoa_r+0x398>)
 800766c:	3e01      	subs	r6, #1
 800766e:	1909      	adds	r1, r1, r4
 8007670:	9318      	str	r3, [sp, #96]	; 0x60
 8007672:	e776      	b.n	8007562 <_dtoa_r+0x102>
 8007674:	2320      	movs	r3, #32
 8007676:	9802      	ldr	r0, [sp, #8]
 8007678:	1a9b      	subs	r3, r3, r2
 800767a:	4098      	lsls	r0, r3
 800767c:	e7f2      	b.n	8007664 <_dtoa_r+0x204>
 800767e:	9016      	str	r0, [sp, #88]	; 0x58
 8007680:	e7b8      	b.n	80075f4 <_dtoa_r+0x194>
 8007682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007684:	9a02      	ldr	r2, [sp, #8]
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	930a      	str	r3, [sp, #40]	; 0x28
 800768a:	4253      	negs	r3, r2
 800768c:	930e      	str	r3, [sp, #56]	; 0x38
 800768e:	2300      	movs	r3, #0
 8007690:	9315      	str	r3, [sp, #84]	; 0x54
 8007692:	e7c7      	b.n	8007624 <_dtoa_r+0x1c4>
 8007694:	2300      	movs	r3, #0
 8007696:	930f      	str	r3, [sp, #60]	; 0x3c
 8007698:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800769a:	930c      	str	r3, [sp, #48]	; 0x30
 800769c:	9307      	str	r3, [sp, #28]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	dc13      	bgt.n	80076ca <_dtoa_r+0x26a>
 80076a2:	2301      	movs	r3, #1
 80076a4:	001a      	movs	r2, r3
 80076a6:	930c      	str	r3, [sp, #48]	; 0x30
 80076a8:	9307      	str	r3, [sp, #28]
 80076aa:	9223      	str	r2, [sp, #140]	; 0x8c
 80076ac:	e00d      	b.n	80076ca <_dtoa_r+0x26a>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e7f1      	b.n	8007696 <_dtoa_r+0x236>
 80076b2:	2300      	movs	r3, #0
 80076b4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80076b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076b8:	4694      	mov	ip, r2
 80076ba:	9b02      	ldr	r3, [sp, #8]
 80076bc:	4463      	add	r3, ip
 80076be:	930c      	str	r3, [sp, #48]	; 0x30
 80076c0:	3301      	adds	r3, #1
 80076c2:	9307      	str	r3, [sp, #28]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	dc00      	bgt.n	80076ca <_dtoa_r+0x26a>
 80076c8:	2301      	movs	r3, #1
 80076ca:	2200      	movs	r2, #0
 80076cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ce:	6042      	str	r2, [r0, #4]
 80076d0:	3204      	adds	r2, #4
 80076d2:	0015      	movs	r5, r2
 80076d4:	3514      	adds	r5, #20
 80076d6:	6841      	ldr	r1, [r0, #4]
 80076d8:	429d      	cmp	r5, r3
 80076da:	d919      	bls.n	8007710 <_dtoa_r+0x2b0>
 80076dc:	0038      	movs	r0, r7
 80076de:	f000 fcfb 	bl	80080d8 <_Balloc>
 80076e2:	9006      	str	r0, [sp, #24]
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d117      	bne.n	8007718 <_dtoa_r+0x2b8>
 80076e8:	21d5      	movs	r1, #213	; 0xd5
 80076ea:	0002      	movs	r2, r0
 80076ec:	4b43      	ldr	r3, [pc, #268]	; (80077fc <_dtoa_r+0x39c>)
 80076ee:	0049      	lsls	r1, r1, #1
 80076f0:	e6cb      	b.n	800748a <_dtoa_r+0x2a>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e7de      	b.n	80076b4 <_dtoa_r+0x254>
 80076f6:	2300      	movs	r3, #0
 80076f8:	940f      	str	r4, [sp, #60]	; 0x3c
 80076fa:	9322      	str	r3, [sp, #136]	; 0x88
 80076fc:	3b01      	subs	r3, #1
 80076fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007700:	9307      	str	r3, [sp, #28]
 8007702:	2200      	movs	r2, #0
 8007704:	3313      	adds	r3, #19
 8007706:	e7d0      	b.n	80076aa <_dtoa_r+0x24a>
 8007708:	2301      	movs	r3, #1
 800770a:	930f      	str	r3, [sp, #60]	; 0x3c
 800770c:	3b02      	subs	r3, #2
 800770e:	e7f6      	b.n	80076fe <_dtoa_r+0x29e>
 8007710:	3101      	adds	r1, #1
 8007712:	6041      	str	r1, [r0, #4]
 8007714:	0052      	lsls	r2, r2, #1
 8007716:	e7dc      	b.n	80076d2 <_dtoa_r+0x272>
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	9a06      	ldr	r2, [sp, #24]
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	9b07      	ldr	r3, [sp, #28]
 8007720:	2b0e      	cmp	r3, #14
 8007722:	d900      	bls.n	8007726 <_dtoa_r+0x2c6>
 8007724:	e0eb      	b.n	80078fe <_dtoa_r+0x49e>
 8007726:	2c00      	cmp	r4, #0
 8007728:	d100      	bne.n	800772c <_dtoa_r+0x2cc>
 800772a:	e0e8      	b.n	80078fe <_dtoa_r+0x49e>
 800772c:	9b02      	ldr	r3, [sp, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	dd68      	ble.n	8007804 <_dtoa_r+0x3a4>
 8007732:	001a      	movs	r2, r3
 8007734:	210f      	movs	r1, #15
 8007736:	4b2d      	ldr	r3, [pc, #180]	; (80077ec <_dtoa_r+0x38c>)
 8007738:	400a      	ands	r2, r1
 800773a:	00d2      	lsls	r2, r2, #3
 800773c:	189b      	adds	r3, r3, r2
 800773e:	681d      	ldr	r5, [r3, #0]
 8007740:	685e      	ldr	r6, [r3, #4]
 8007742:	9b02      	ldr	r3, [sp, #8]
 8007744:	111c      	asrs	r4, r3, #4
 8007746:	2302      	movs	r3, #2
 8007748:	9310      	str	r3, [sp, #64]	; 0x40
 800774a:	9b02      	ldr	r3, [sp, #8]
 800774c:	05db      	lsls	r3, r3, #23
 800774e:	d50b      	bpl.n	8007768 <_dtoa_r+0x308>
 8007750:	4b2b      	ldr	r3, [pc, #172]	; (8007800 <_dtoa_r+0x3a0>)
 8007752:	400c      	ands	r4, r1
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	9812      	ldr	r0, [sp, #72]	; 0x48
 800775a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800775c:	f7f9 fc96 	bl	800108c <__aeabi_ddiv>
 8007760:	2303      	movs	r3, #3
 8007762:	9008      	str	r0, [sp, #32]
 8007764:	9109      	str	r1, [sp, #36]	; 0x24
 8007766:	9310      	str	r3, [sp, #64]	; 0x40
 8007768:	4b25      	ldr	r3, [pc, #148]	; (8007800 <_dtoa_r+0x3a0>)
 800776a:	9314      	str	r3, [sp, #80]	; 0x50
 800776c:	2c00      	cmp	r4, #0
 800776e:	d108      	bne.n	8007782 <_dtoa_r+0x322>
 8007770:	9808      	ldr	r0, [sp, #32]
 8007772:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007774:	002a      	movs	r2, r5
 8007776:	0033      	movs	r3, r6
 8007778:	f7f9 fc88 	bl	800108c <__aeabi_ddiv>
 800777c:	9008      	str	r0, [sp, #32]
 800777e:	9109      	str	r1, [sp, #36]	; 0x24
 8007780:	e05c      	b.n	800783c <_dtoa_r+0x3dc>
 8007782:	2301      	movs	r3, #1
 8007784:	421c      	tst	r4, r3
 8007786:	d00b      	beq.n	80077a0 <_dtoa_r+0x340>
 8007788:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800778a:	0028      	movs	r0, r5
 800778c:	3301      	adds	r3, #1
 800778e:	9310      	str	r3, [sp, #64]	; 0x40
 8007790:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007792:	0031      	movs	r1, r6
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f7fa f87a 	bl	8001890 <__aeabi_dmul>
 800779c:	0005      	movs	r5, r0
 800779e:	000e      	movs	r6, r1
 80077a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077a2:	1064      	asrs	r4, r4, #1
 80077a4:	3308      	adds	r3, #8
 80077a6:	e7e0      	b.n	800776a <_dtoa_r+0x30a>
 80077a8:	0800a06d 	.word	0x0800a06d
 80077ac:	0800a084 	.word	0x0800a084
 80077b0:	7ff00000 	.word	0x7ff00000
 80077b4:	0000270f 	.word	0x0000270f
 80077b8:	0800a069 	.word	0x0800a069
 80077bc:	0800a06c 	.word	0x0800a06c
 80077c0:	0800a03c 	.word	0x0800a03c
 80077c4:	0800a03d 	.word	0x0800a03d
 80077c8:	3ff00000 	.word	0x3ff00000
 80077cc:	fffffc01 	.word	0xfffffc01
 80077d0:	3ff80000 	.word	0x3ff80000
 80077d4:	636f4361 	.word	0x636f4361
 80077d8:	3fd287a7 	.word	0x3fd287a7
 80077dc:	8b60c8b3 	.word	0x8b60c8b3
 80077e0:	3fc68a28 	.word	0x3fc68a28
 80077e4:	509f79fb 	.word	0x509f79fb
 80077e8:	3fd34413 	.word	0x3fd34413
 80077ec:	0800a178 	.word	0x0800a178
 80077f0:	00000432 	.word	0x00000432
 80077f4:	00000412 	.word	0x00000412
 80077f8:	fe100000 	.word	0xfe100000
 80077fc:	0800a0df 	.word	0x0800a0df
 8007800:	0800a150 	.word	0x0800a150
 8007804:	2302      	movs	r3, #2
 8007806:	9310      	str	r3, [sp, #64]	; 0x40
 8007808:	9b02      	ldr	r3, [sp, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d016      	beq.n	800783c <_dtoa_r+0x3dc>
 800780e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007810:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007812:	425c      	negs	r4, r3
 8007814:	230f      	movs	r3, #15
 8007816:	4ab6      	ldr	r2, [pc, #728]	; (8007af0 <_dtoa_r+0x690>)
 8007818:	4023      	ands	r3, r4
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	18d3      	adds	r3, r2, r3
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f7fa f835 	bl	8001890 <__aeabi_dmul>
 8007826:	2601      	movs	r6, #1
 8007828:	2300      	movs	r3, #0
 800782a:	9008      	str	r0, [sp, #32]
 800782c:	9109      	str	r1, [sp, #36]	; 0x24
 800782e:	4db1      	ldr	r5, [pc, #708]	; (8007af4 <_dtoa_r+0x694>)
 8007830:	1124      	asrs	r4, r4, #4
 8007832:	2c00      	cmp	r4, #0
 8007834:	d000      	beq.n	8007838 <_dtoa_r+0x3d8>
 8007836:	e094      	b.n	8007962 <_dtoa_r+0x502>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d19f      	bne.n	800777c <_dtoa_r+0x31c>
 800783c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800783e:	2b00      	cmp	r3, #0
 8007840:	d100      	bne.n	8007844 <_dtoa_r+0x3e4>
 8007842:	e09b      	b.n	800797c <_dtoa_r+0x51c>
 8007844:	9c08      	ldr	r4, [sp, #32]
 8007846:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007848:	2200      	movs	r2, #0
 800784a:	0020      	movs	r0, r4
 800784c:	0029      	movs	r1, r5
 800784e:	4baa      	ldr	r3, [pc, #680]	; (8007af8 <_dtoa_r+0x698>)
 8007850:	f7f8 fe02 	bl	8000458 <__aeabi_dcmplt>
 8007854:	2800      	cmp	r0, #0
 8007856:	d100      	bne.n	800785a <_dtoa_r+0x3fa>
 8007858:	e090      	b.n	800797c <_dtoa_r+0x51c>
 800785a:	9b07      	ldr	r3, [sp, #28]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d100      	bne.n	8007862 <_dtoa_r+0x402>
 8007860:	e08c      	b.n	800797c <_dtoa_r+0x51c>
 8007862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007864:	2b00      	cmp	r3, #0
 8007866:	dd46      	ble.n	80078f6 <_dtoa_r+0x496>
 8007868:	9b02      	ldr	r3, [sp, #8]
 800786a:	2200      	movs	r2, #0
 800786c:	0020      	movs	r0, r4
 800786e:	0029      	movs	r1, r5
 8007870:	1e5e      	subs	r6, r3, #1
 8007872:	4ba2      	ldr	r3, [pc, #648]	; (8007afc <_dtoa_r+0x69c>)
 8007874:	f7fa f80c 	bl	8001890 <__aeabi_dmul>
 8007878:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800787a:	9008      	str	r0, [sp, #32]
 800787c:	9109      	str	r1, [sp, #36]	; 0x24
 800787e:	3301      	adds	r3, #1
 8007880:	9310      	str	r3, [sp, #64]	; 0x40
 8007882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007884:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007886:	9c08      	ldr	r4, [sp, #32]
 8007888:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800788a:	9314      	str	r3, [sp, #80]	; 0x50
 800788c:	f7fa fe52 	bl	8002534 <__aeabi_i2d>
 8007890:	0022      	movs	r2, r4
 8007892:	002b      	movs	r3, r5
 8007894:	f7f9 fffc 	bl	8001890 <__aeabi_dmul>
 8007898:	2200      	movs	r2, #0
 800789a:	4b99      	ldr	r3, [pc, #612]	; (8007b00 <_dtoa_r+0x6a0>)
 800789c:	f7f9 f8ba 	bl	8000a14 <__aeabi_dadd>
 80078a0:	9010      	str	r0, [sp, #64]	; 0x40
 80078a2:	9111      	str	r1, [sp, #68]	; 0x44
 80078a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078a8:	9208      	str	r2, [sp, #32]
 80078aa:	9309      	str	r3, [sp, #36]	; 0x24
 80078ac:	4a95      	ldr	r2, [pc, #596]	; (8007b04 <_dtoa_r+0x6a4>)
 80078ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078b0:	4694      	mov	ip, r2
 80078b2:	4463      	add	r3, ip
 80078b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80078b6:	9309      	str	r3, [sp, #36]	; 0x24
 80078b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d161      	bne.n	8007982 <_dtoa_r+0x522>
 80078be:	2200      	movs	r2, #0
 80078c0:	0020      	movs	r0, r4
 80078c2:	0029      	movs	r1, r5
 80078c4:	4b90      	ldr	r3, [pc, #576]	; (8007b08 <_dtoa_r+0x6a8>)
 80078c6:	f7fa fa4f 	bl	8001d68 <__aeabi_dsub>
 80078ca:	9a08      	ldr	r2, [sp, #32]
 80078cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ce:	0004      	movs	r4, r0
 80078d0:	000d      	movs	r5, r1
 80078d2:	f7f8 fdd5 	bl	8000480 <__aeabi_dcmpgt>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d000      	beq.n	80078dc <_dtoa_r+0x47c>
 80078da:	e2af      	b.n	8007e3c <_dtoa_r+0x9dc>
 80078dc:	488b      	ldr	r0, [pc, #556]	; (8007b0c <_dtoa_r+0x6ac>)
 80078de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80078e0:	4684      	mov	ip, r0
 80078e2:	4461      	add	r1, ip
 80078e4:	000b      	movs	r3, r1
 80078e6:	0020      	movs	r0, r4
 80078e8:	0029      	movs	r1, r5
 80078ea:	9a08      	ldr	r2, [sp, #32]
 80078ec:	f7f8 fdb4 	bl	8000458 <__aeabi_dcmplt>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d000      	beq.n	80078f6 <_dtoa_r+0x496>
 80078f4:	e29f      	b.n	8007e36 <_dtoa_r+0x9d6>
 80078f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80078fa:	9308      	str	r3, [sp, #32]
 80078fc:	9409      	str	r4, [sp, #36]	; 0x24
 80078fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007900:	2b00      	cmp	r3, #0
 8007902:	da00      	bge.n	8007906 <_dtoa_r+0x4a6>
 8007904:	e172      	b.n	8007bec <_dtoa_r+0x78c>
 8007906:	9a02      	ldr	r2, [sp, #8]
 8007908:	2a0e      	cmp	r2, #14
 800790a:	dd00      	ble.n	800790e <_dtoa_r+0x4ae>
 800790c:	e16e      	b.n	8007bec <_dtoa_r+0x78c>
 800790e:	4b78      	ldr	r3, [pc, #480]	; (8007af0 <_dtoa_r+0x690>)
 8007910:	00d2      	lsls	r2, r2, #3
 8007912:	189b      	adds	r3, r3, r2
 8007914:	685c      	ldr	r4, [r3, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	930a      	str	r3, [sp, #40]	; 0x28
 800791a:	940b      	str	r4, [sp, #44]	; 0x2c
 800791c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800791e:	2b00      	cmp	r3, #0
 8007920:	db00      	blt.n	8007924 <_dtoa_r+0x4c4>
 8007922:	e0f7      	b.n	8007b14 <_dtoa_r+0x6b4>
 8007924:	9b07      	ldr	r3, [sp, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	dd00      	ble.n	800792c <_dtoa_r+0x4cc>
 800792a:	e0f3      	b.n	8007b14 <_dtoa_r+0x6b4>
 800792c:	d000      	beq.n	8007930 <_dtoa_r+0x4d0>
 800792e:	e282      	b.n	8007e36 <_dtoa_r+0x9d6>
 8007930:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007934:	2200      	movs	r2, #0
 8007936:	4b74      	ldr	r3, [pc, #464]	; (8007b08 <_dtoa_r+0x6a8>)
 8007938:	f7f9 ffaa 	bl	8001890 <__aeabi_dmul>
 800793c:	9a08      	ldr	r2, [sp, #32]
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	f7f8 fda8 	bl	8000494 <__aeabi_dcmpge>
 8007944:	9e07      	ldr	r6, [sp, #28]
 8007946:	0035      	movs	r5, r6
 8007948:	2800      	cmp	r0, #0
 800794a:	d000      	beq.n	800794e <_dtoa_r+0x4ee>
 800794c:	e259      	b.n	8007e02 <_dtoa_r+0x9a2>
 800794e:	9b06      	ldr	r3, [sp, #24]
 8007950:	9a06      	ldr	r2, [sp, #24]
 8007952:	3301      	adds	r3, #1
 8007954:	9308      	str	r3, [sp, #32]
 8007956:	2331      	movs	r3, #49	; 0x31
 8007958:	7013      	strb	r3, [r2, #0]
 800795a:	9b02      	ldr	r3, [sp, #8]
 800795c:	3301      	adds	r3, #1
 800795e:	9302      	str	r3, [sp, #8]
 8007960:	e254      	b.n	8007e0c <_dtoa_r+0x9ac>
 8007962:	4234      	tst	r4, r6
 8007964:	d007      	beq.n	8007976 <_dtoa_r+0x516>
 8007966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007968:	3301      	adds	r3, #1
 800796a:	9310      	str	r3, [sp, #64]	; 0x40
 800796c:	682a      	ldr	r2, [r5, #0]
 800796e:	686b      	ldr	r3, [r5, #4]
 8007970:	f7f9 ff8e 	bl	8001890 <__aeabi_dmul>
 8007974:	0033      	movs	r3, r6
 8007976:	1064      	asrs	r4, r4, #1
 8007978:	3508      	adds	r5, #8
 800797a:	e75a      	b.n	8007832 <_dtoa_r+0x3d2>
 800797c:	9e02      	ldr	r6, [sp, #8]
 800797e:	9b07      	ldr	r3, [sp, #28]
 8007980:	e780      	b.n	8007884 <_dtoa_r+0x424>
 8007982:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007984:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007986:	1e5a      	subs	r2, r3, #1
 8007988:	4b59      	ldr	r3, [pc, #356]	; (8007af0 <_dtoa_r+0x690>)
 800798a:	00d2      	lsls	r2, r2, #3
 800798c:	189b      	adds	r3, r3, r2
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2900      	cmp	r1, #0
 8007994:	d051      	beq.n	8007a3a <_dtoa_r+0x5da>
 8007996:	2000      	movs	r0, #0
 8007998:	495d      	ldr	r1, [pc, #372]	; (8007b10 <_dtoa_r+0x6b0>)
 800799a:	f7f9 fb77 	bl	800108c <__aeabi_ddiv>
 800799e:	9a08      	ldr	r2, [sp, #32]
 80079a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a2:	f7fa f9e1 	bl	8001d68 <__aeabi_dsub>
 80079a6:	9a06      	ldr	r2, [sp, #24]
 80079a8:	9b06      	ldr	r3, [sp, #24]
 80079aa:	4694      	mov	ip, r2
 80079ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80079ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079b0:	9010      	str	r0, [sp, #64]	; 0x40
 80079b2:	9111      	str	r1, [sp, #68]	; 0x44
 80079b4:	4463      	add	r3, ip
 80079b6:	9319      	str	r3, [sp, #100]	; 0x64
 80079b8:	0029      	movs	r1, r5
 80079ba:	0020      	movs	r0, r4
 80079bc:	f7fa fd84 	bl	80024c8 <__aeabi_d2iz>
 80079c0:	9014      	str	r0, [sp, #80]	; 0x50
 80079c2:	f7fa fdb7 	bl	8002534 <__aeabi_i2d>
 80079c6:	0002      	movs	r2, r0
 80079c8:	000b      	movs	r3, r1
 80079ca:	0020      	movs	r0, r4
 80079cc:	0029      	movs	r1, r5
 80079ce:	f7fa f9cb 	bl	8001d68 <__aeabi_dsub>
 80079d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80079d6:	3301      	adds	r3, #1
 80079d8:	9308      	str	r3, [sp, #32]
 80079da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079dc:	0004      	movs	r4, r0
 80079de:	3330      	adds	r3, #48	; 0x30
 80079e0:	7013      	strb	r3, [r2, #0]
 80079e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079e6:	000d      	movs	r5, r1
 80079e8:	f7f8 fd36 	bl	8000458 <__aeabi_dcmplt>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d175      	bne.n	8007adc <_dtoa_r+0x67c>
 80079f0:	0022      	movs	r2, r4
 80079f2:	002b      	movs	r3, r5
 80079f4:	2000      	movs	r0, #0
 80079f6:	4940      	ldr	r1, [pc, #256]	; (8007af8 <_dtoa_r+0x698>)
 80079f8:	f7fa f9b6 	bl	8001d68 <__aeabi_dsub>
 80079fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a00:	f7f8 fd2a 	bl	8000458 <__aeabi_dcmplt>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d000      	beq.n	8007a0a <_dtoa_r+0x5aa>
 8007a08:	e0d2      	b.n	8007bb0 <_dtoa_r+0x750>
 8007a0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a0c:	9a08      	ldr	r2, [sp, #32]
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d100      	bne.n	8007a14 <_dtoa_r+0x5b4>
 8007a12:	e770      	b.n	80078f6 <_dtoa_r+0x496>
 8007a14:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007a16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007a18:	2200      	movs	r2, #0
 8007a1a:	4b38      	ldr	r3, [pc, #224]	; (8007afc <_dtoa_r+0x69c>)
 8007a1c:	f7f9 ff38 	bl	8001890 <__aeabi_dmul>
 8007a20:	4b36      	ldr	r3, [pc, #216]	; (8007afc <_dtoa_r+0x69c>)
 8007a22:	9010      	str	r0, [sp, #64]	; 0x40
 8007a24:	9111      	str	r1, [sp, #68]	; 0x44
 8007a26:	2200      	movs	r2, #0
 8007a28:	0020      	movs	r0, r4
 8007a2a:	0029      	movs	r1, r5
 8007a2c:	f7f9 ff30 	bl	8001890 <__aeabi_dmul>
 8007a30:	9b08      	ldr	r3, [sp, #32]
 8007a32:	0004      	movs	r4, r0
 8007a34:	000d      	movs	r5, r1
 8007a36:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a38:	e7be      	b.n	80079b8 <_dtoa_r+0x558>
 8007a3a:	9808      	ldr	r0, [sp, #32]
 8007a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a3e:	f7f9 ff27 	bl	8001890 <__aeabi_dmul>
 8007a42:	9a06      	ldr	r2, [sp, #24]
 8007a44:	9b06      	ldr	r3, [sp, #24]
 8007a46:	4694      	mov	ip, r2
 8007a48:	9308      	str	r3, [sp, #32]
 8007a4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a4c:	9010      	str	r0, [sp, #64]	; 0x40
 8007a4e:	9111      	str	r1, [sp, #68]	; 0x44
 8007a50:	4463      	add	r3, ip
 8007a52:	9319      	str	r3, [sp, #100]	; 0x64
 8007a54:	0029      	movs	r1, r5
 8007a56:	0020      	movs	r0, r4
 8007a58:	f7fa fd36 	bl	80024c8 <__aeabi_d2iz>
 8007a5c:	9017      	str	r0, [sp, #92]	; 0x5c
 8007a5e:	f7fa fd69 	bl	8002534 <__aeabi_i2d>
 8007a62:	0002      	movs	r2, r0
 8007a64:	000b      	movs	r3, r1
 8007a66:	0020      	movs	r0, r4
 8007a68:	0029      	movs	r1, r5
 8007a6a:	f7fa f97d 	bl	8001d68 <__aeabi_dsub>
 8007a6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a70:	9a08      	ldr	r2, [sp, #32]
 8007a72:	3330      	adds	r3, #48	; 0x30
 8007a74:	7013      	strb	r3, [r2, #0]
 8007a76:	0013      	movs	r3, r2
 8007a78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	0004      	movs	r4, r0
 8007a7e:	000d      	movs	r5, r1
 8007a80:	9308      	str	r3, [sp, #32]
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d12c      	bne.n	8007ae0 <_dtoa_r+0x680>
 8007a86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007a88:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007a8a:	9a06      	ldr	r2, [sp, #24]
 8007a8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a8e:	4694      	mov	ip, r2
 8007a90:	4463      	add	r3, ip
 8007a92:	2200      	movs	r2, #0
 8007a94:	9308      	str	r3, [sp, #32]
 8007a96:	4b1e      	ldr	r3, [pc, #120]	; (8007b10 <_dtoa_r+0x6b0>)
 8007a98:	f7f8 ffbc 	bl	8000a14 <__aeabi_dadd>
 8007a9c:	0002      	movs	r2, r0
 8007a9e:	000b      	movs	r3, r1
 8007aa0:	0020      	movs	r0, r4
 8007aa2:	0029      	movs	r1, r5
 8007aa4:	f7f8 fcec 	bl	8000480 <__aeabi_dcmpgt>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d000      	beq.n	8007aae <_dtoa_r+0x64e>
 8007aac:	e080      	b.n	8007bb0 <_dtoa_r+0x750>
 8007aae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	4916      	ldr	r1, [pc, #88]	; (8007b10 <_dtoa_r+0x6b0>)
 8007ab6:	f7fa f957 	bl	8001d68 <__aeabi_dsub>
 8007aba:	0002      	movs	r2, r0
 8007abc:	000b      	movs	r3, r1
 8007abe:	0020      	movs	r0, r4
 8007ac0:	0029      	movs	r1, r5
 8007ac2:	f7f8 fcc9 	bl	8000458 <__aeabi_dcmplt>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d100      	bne.n	8007acc <_dtoa_r+0x66c>
 8007aca:	e714      	b.n	80078f6 <_dtoa_r+0x496>
 8007acc:	9b08      	ldr	r3, [sp, #32]
 8007ace:	001a      	movs	r2, r3
 8007ad0:	3a01      	subs	r2, #1
 8007ad2:	9208      	str	r2, [sp, #32]
 8007ad4:	7812      	ldrb	r2, [r2, #0]
 8007ad6:	2a30      	cmp	r2, #48	; 0x30
 8007ad8:	d0f8      	beq.n	8007acc <_dtoa_r+0x66c>
 8007ada:	9308      	str	r3, [sp, #32]
 8007adc:	9602      	str	r6, [sp, #8]
 8007ade:	e055      	b.n	8007b8c <_dtoa_r+0x72c>
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4b06      	ldr	r3, [pc, #24]	; (8007afc <_dtoa_r+0x69c>)
 8007ae4:	f7f9 fed4 	bl	8001890 <__aeabi_dmul>
 8007ae8:	0004      	movs	r4, r0
 8007aea:	000d      	movs	r5, r1
 8007aec:	e7b2      	b.n	8007a54 <_dtoa_r+0x5f4>
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	0800a178 	.word	0x0800a178
 8007af4:	0800a150 	.word	0x0800a150
 8007af8:	3ff00000 	.word	0x3ff00000
 8007afc:	40240000 	.word	0x40240000
 8007b00:	401c0000 	.word	0x401c0000
 8007b04:	fcc00000 	.word	0xfcc00000
 8007b08:	40140000 	.word	0x40140000
 8007b0c:	7cc00000 	.word	0x7cc00000
 8007b10:	3fe00000 	.word	0x3fe00000
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	9e06      	ldr	r6, [sp, #24]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	199b      	adds	r3, r3, r6
 8007b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b1e:	9c08      	ldr	r4, [sp, #32]
 8007b20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b26:	0020      	movs	r0, r4
 8007b28:	0029      	movs	r1, r5
 8007b2a:	f7f9 faaf 	bl	800108c <__aeabi_ddiv>
 8007b2e:	f7fa fccb 	bl	80024c8 <__aeabi_d2iz>
 8007b32:	9007      	str	r0, [sp, #28]
 8007b34:	f7fa fcfe 	bl	8002534 <__aeabi_i2d>
 8007b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b3c:	f7f9 fea8 	bl	8001890 <__aeabi_dmul>
 8007b40:	0002      	movs	r2, r0
 8007b42:	000b      	movs	r3, r1
 8007b44:	0020      	movs	r0, r4
 8007b46:	0029      	movs	r1, r5
 8007b48:	f7fa f90e 	bl	8001d68 <__aeabi_dsub>
 8007b4c:	0033      	movs	r3, r6
 8007b4e:	9a07      	ldr	r2, [sp, #28]
 8007b50:	3601      	adds	r6, #1
 8007b52:	3230      	adds	r2, #48	; 0x30
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b58:	9608      	str	r6, [sp, #32]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d139      	bne.n	8007bd2 <_dtoa_r+0x772>
 8007b5e:	0002      	movs	r2, r0
 8007b60:	000b      	movs	r3, r1
 8007b62:	f7f8 ff57 	bl	8000a14 <__aeabi_dadd>
 8007b66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b6a:	0004      	movs	r4, r0
 8007b6c:	000d      	movs	r5, r1
 8007b6e:	f7f8 fc87 	bl	8000480 <__aeabi_dcmpgt>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d11b      	bne.n	8007bae <_dtoa_r+0x74e>
 8007b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b7a:	0020      	movs	r0, r4
 8007b7c:	0029      	movs	r1, r5
 8007b7e:	f7f8 fc65 	bl	800044c <__aeabi_dcmpeq>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d002      	beq.n	8007b8c <_dtoa_r+0x72c>
 8007b86:	9b07      	ldr	r3, [sp, #28]
 8007b88:	07db      	lsls	r3, r3, #31
 8007b8a:	d410      	bmi.n	8007bae <_dtoa_r+0x74e>
 8007b8c:	0038      	movs	r0, r7
 8007b8e:	9905      	ldr	r1, [sp, #20]
 8007b90:	f000 fae6 	bl	8008160 <_Bfree>
 8007b94:	2300      	movs	r3, #0
 8007b96:	9a08      	ldr	r2, [sp, #32]
 8007b98:	9802      	ldr	r0, [sp, #8]
 8007b9a:	7013      	strb	r3, [r2, #0]
 8007b9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	6018      	str	r0, [r3, #0]
 8007ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d100      	bne.n	8007baa <_dtoa_r+0x74a>
 8007ba8:	e4a6      	b.n	80074f8 <_dtoa_r+0x98>
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	e4a4      	b.n	80074f8 <_dtoa_r+0x98>
 8007bae:	9e02      	ldr	r6, [sp, #8]
 8007bb0:	9b08      	ldr	r3, [sp, #32]
 8007bb2:	9308      	str	r3, [sp, #32]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	781a      	ldrb	r2, [r3, #0]
 8007bb8:	2a39      	cmp	r2, #57	; 0x39
 8007bba:	d106      	bne.n	8007bca <_dtoa_r+0x76a>
 8007bbc:	9a06      	ldr	r2, [sp, #24]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d1f7      	bne.n	8007bb2 <_dtoa_r+0x752>
 8007bc2:	2230      	movs	r2, #48	; 0x30
 8007bc4:	9906      	ldr	r1, [sp, #24]
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	700a      	strb	r2, [r1, #0]
 8007bca:	781a      	ldrb	r2, [r3, #0]
 8007bcc:	3201      	adds	r2, #1
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	e784      	b.n	8007adc <_dtoa_r+0x67c>
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	4baa      	ldr	r3, [pc, #680]	; (8007e80 <_dtoa_r+0xa20>)
 8007bd6:	f7f9 fe5b 	bl	8001890 <__aeabi_dmul>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2300      	movs	r3, #0
 8007bde:	0004      	movs	r4, r0
 8007be0:	000d      	movs	r5, r1
 8007be2:	f7f8 fc33 	bl	800044c <__aeabi_dcmpeq>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d09b      	beq.n	8007b22 <_dtoa_r+0x6c2>
 8007bea:	e7cf      	b.n	8007b8c <_dtoa_r+0x72c>
 8007bec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007bee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007bf0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bf2:	2d00      	cmp	r5, #0
 8007bf4:	d012      	beq.n	8007c1c <_dtoa_r+0x7bc>
 8007bf6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007bf8:	2a01      	cmp	r2, #1
 8007bfa:	dc66      	bgt.n	8007cca <_dtoa_r+0x86a>
 8007bfc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	d05d      	beq.n	8007cbe <_dtoa_r+0x85e>
 8007c02:	4aa0      	ldr	r2, [pc, #640]	; (8007e84 <_dtoa_r+0xa24>)
 8007c04:	189b      	adds	r3, r3, r2
 8007c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c08:	2101      	movs	r1, #1
 8007c0a:	18d2      	adds	r2, r2, r3
 8007c0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007c0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c10:	0038      	movs	r0, r7
 8007c12:	18d3      	adds	r3, r2, r3
 8007c14:	930d      	str	r3, [sp, #52]	; 0x34
 8007c16:	f000 fb53 	bl	80082c0 <__i2b>
 8007c1a:	0005      	movs	r5, r0
 8007c1c:	2c00      	cmp	r4, #0
 8007c1e:	dd0e      	ble.n	8007c3e <_dtoa_r+0x7de>
 8007c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	dd0b      	ble.n	8007c3e <_dtoa_r+0x7de>
 8007c26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c28:	0023      	movs	r3, r4
 8007c2a:	4294      	cmp	r4, r2
 8007c2c:	dd00      	ble.n	8007c30 <_dtoa_r+0x7d0>
 8007c2e:	0013      	movs	r3, r2
 8007c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c32:	1ae4      	subs	r4, r4, r3
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	920a      	str	r2, [sp, #40]	; 0x28
 8007c38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	930d      	str	r3, [sp, #52]	; 0x34
 8007c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01f      	beq.n	8007c84 <_dtoa_r+0x824>
 8007c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d054      	beq.n	8007cf4 <_dtoa_r+0x894>
 8007c4a:	2e00      	cmp	r6, #0
 8007c4c:	dd11      	ble.n	8007c72 <_dtoa_r+0x812>
 8007c4e:	0029      	movs	r1, r5
 8007c50:	0032      	movs	r2, r6
 8007c52:	0038      	movs	r0, r7
 8007c54:	f000 fbfa 	bl	800844c <__pow5mult>
 8007c58:	9a05      	ldr	r2, [sp, #20]
 8007c5a:	0001      	movs	r1, r0
 8007c5c:	0005      	movs	r5, r0
 8007c5e:	0038      	movs	r0, r7
 8007c60:	f000 fb44 	bl	80082ec <__multiply>
 8007c64:	9905      	ldr	r1, [sp, #20]
 8007c66:	9014      	str	r0, [sp, #80]	; 0x50
 8007c68:	0038      	movs	r0, r7
 8007c6a:	f000 fa79 	bl	8008160 <_Bfree>
 8007c6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c70:	9305      	str	r3, [sp, #20]
 8007c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c74:	1b9a      	subs	r2, r3, r6
 8007c76:	42b3      	cmp	r3, r6
 8007c78:	d004      	beq.n	8007c84 <_dtoa_r+0x824>
 8007c7a:	0038      	movs	r0, r7
 8007c7c:	9905      	ldr	r1, [sp, #20]
 8007c7e:	f000 fbe5 	bl	800844c <__pow5mult>
 8007c82:	9005      	str	r0, [sp, #20]
 8007c84:	2101      	movs	r1, #1
 8007c86:	0038      	movs	r0, r7
 8007c88:	f000 fb1a 	bl	80082c0 <__i2b>
 8007c8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c8e:	0006      	movs	r6, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dd31      	ble.n	8007cf8 <_dtoa_r+0x898>
 8007c94:	001a      	movs	r2, r3
 8007c96:	0001      	movs	r1, r0
 8007c98:	0038      	movs	r0, r7
 8007c9a:	f000 fbd7 	bl	800844c <__pow5mult>
 8007c9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ca0:	0006      	movs	r6, r0
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	dd2d      	ble.n	8007d02 <_dtoa_r+0x8a2>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	930e      	str	r3, [sp, #56]	; 0x38
 8007caa:	6933      	ldr	r3, [r6, #16]
 8007cac:	3303      	adds	r3, #3
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	18f3      	adds	r3, r6, r3
 8007cb2:	6858      	ldr	r0, [r3, #4]
 8007cb4:	f000 fabc 	bl	8008230 <__hi0bits>
 8007cb8:	2320      	movs	r3, #32
 8007cba:	1a18      	subs	r0, r3, r0
 8007cbc:	e039      	b.n	8007d32 <_dtoa_r+0x8d2>
 8007cbe:	2336      	movs	r3, #54	; 0x36
 8007cc0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007cc2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007cc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	e79d      	b.n	8007c06 <_dtoa_r+0x7a6>
 8007cca:	9b07      	ldr	r3, [sp, #28]
 8007ccc:	1e5e      	subs	r6, r3, #1
 8007cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cd0:	42b3      	cmp	r3, r6
 8007cd2:	db07      	blt.n	8007ce4 <_dtoa_r+0x884>
 8007cd4:	1b9e      	subs	r6, r3, r6
 8007cd6:	9b07      	ldr	r3, [sp, #28]
 8007cd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	da93      	bge.n	8007c06 <_dtoa_r+0x7a6>
 8007cde:	1ae4      	subs	r4, r4, r3
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e790      	b.n	8007c06 <_dtoa_r+0x7a6>
 8007ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ce6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007ce8:	1af3      	subs	r3, r6, r3
 8007cea:	18d3      	adds	r3, r2, r3
 8007cec:	960e      	str	r6, [sp, #56]	; 0x38
 8007cee:	9315      	str	r3, [sp, #84]	; 0x54
 8007cf0:	2600      	movs	r6, #0
 8007cf2:	e7f0      	b.n	8007cd6 <_dtoa_r+0x876>
 8007cf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cf6:	e7c0      	b.n	8007c7a <_dtoa_r+0x81a>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	930e      	str	r3, [sp, #56]	; 0x38
 8007cfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	dc13      	bgt.n	8007d2a <_dtoa_r+0x8ca>
 8007d02:	2300      	movs	r3, #0
 8007d04:	930e      	str	r3, [sp, #56]	; 0x38
 8007d06:	9b08      	ldr	r3, [sp, #32]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10e      	bne.n	8007d2a <_dtoa_r+0x8ca>
 8007d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0e:	031b      	lsls	r3, r3, #12
 8007d10:	d10b      	bne.n	8007d2a <_dtoa_r+0x8ca>
 8007d12:	4b5d      	ldr	r3, [pc, #372]	; (8007e88 <_dtoa_r+0xa28>)
 8007d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d16:	4213      	tst	r3, r2
 8007d18:	d007      	beq.n	8007d2a <_dtoa_r+0x8ca>
 8007d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d22:	3301      	adds	r3, #1
 8007d24:	930d      	str	r3, [sp, #52]	; 0x34
 8007d26:	2301      	movs	r3, #1
 8007d28:	930e      	str	r3, [sp, #56]	; 0x38
 8007d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1bb      	bne.n	8007caa <_dtoa_r+0x84a>
 8007d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d34:	221f      	movs	r2, #31
 8007d36:	1818      	adds	r0, r3, r0
 8007d38:	0003      	movs	r3, r0
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	4210      	tst	r0, r2
 8007d3e:	d046      	beq.n	8007dce <_dtoa_r+0x96e>
 8007d40:	3201      	adds	r2, #1
 8007d42:	1ad2      	subs	r2, r2, r3
 8007d44:	2a04      	cmp	r2, #4
 8007d46:	dd3f      	ble.n	8007dc8 <_dtoa_r+0x968>
 8007d48:	221c      	movs	r2, #28
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d4e:	18e4      	adds	r4, r4, r3
 8007d50:	18d2      	adds	r2, r2, r3
 8007d52:	920a      	str	r2, [sp, #40]	; 0x28
 8007d54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d56:	18d3      	adds	r3, r2, r3
 8007d58:	930d      	str	r3, [sp, #52]	; 0x34
 8007d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dd05      	ble.n	8007d6c <_dtoa_r+0x90c>
 8007d60:	001a      	movs	r2, r3
 8007d62:	0038      	movs	r0, r7
 8007d64:	9905      	ldr	r1, [sp, #20]
 8007d66:	f000 fbcd 	bl	8008504 <__lshift>
 8007d6a:	9005      	str	r0, [sp, #20]
 8007d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dd05      	ble.n	8007d7e <_dtoa_r+0x91e>
 8007d72:	0031      	movs	r1, r6
 8007d74:	001a      	movs	r2, r3
 8007d76:	0038      	movs	r0, r7
 8007d78:	f000 fbc4 	bl	8008504 <__lshift>
 8007d7c:	0006      	movs	r6, r0
 8007d7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d026      	beq.n	8007dd2 <_dtoa_r+0x972>
 8007d84:	0031      	movs	r1, r6
 8007d86:	9805      	ldr	r0, [sp, #20]
 8007d88:	f000 fc2a 	bl	80085e0 <__mcmp>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	da20      	bge.n	8007dd2 <_dtoa_r+0x972>
 8007d90:	9b02      	ldr	r3, [sp, #8]
 8007d92:	220a      	movs	r2, #10
 8007d94:	3b01      	subs	r3, #1
 8007d96:	9302      	str	r3, [sp, #8]
 8007d98:	0038      	movs	r0, r7
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9905      	ldr	r1, [sp, #20]
 8007d9e:	f000 fa03 	bl	80081a8 <__multadd>
 8007da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007da4:	9005      	str	r0, [sp, #20]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d100      	bne.n	8007dac <_dtoa_r+0x94c>
 8007daa:	e166      	b.n	800807a <_dtoa_r+0xc1a>
 8007dac:	2300      	movs	r3, #0
 8007dae:	0029      	movs	r1, r5
 8007db0:	220a      	movs	r2, #10
 8007db2:	0038      	movs	r0, r7
 8007db4:	f000 f9f8 	bl	80081a8 <__multadd>
 8007db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dba:	0005      	movs	r5, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dc47      	bgt.n	8007e50 <_dtoa_r+0x9f0>
 8007dc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	dc0d      	bgt.n	8007de2 <_dtoa_r+0x982>
 8007dc6:	e043      	b.n	8007e50 <_dtoa_r+0x9f0>
 8007dc8:	2a04      	cmp	r2, #4
 8007dca:	d0c6      	beq.n	8007d5a <_dtoa_r+0x8fa>
 8007dcc:	0013      	movs	r3, r2
 8007dce:	331c      	adds	r3, #28
 8007dd0:	e7bc      	b.n	8007d4c <_dtoa_r+0x8ec>
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dc35      	bgt.n	8007e44 <_dtoa_r+0x9e4>
 8007dd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	dd32      	ble.n	8007e44 <_dtoa_r+0x9e4>
 8007dde:	9b07      	ldr	r3, [sp, #28]
 8007de0:	930c      	str	r3, [sp, #48]	; 0x30
 8007de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10c      	bne.n	8007e02 <_dtoa_r+0x9a2>
 8007de8:	0031      	movs	r1, r6
 8007dea:	2205      	movs	r2, #5
 8007dec:	0038      	movs	r0, r7
 8007dee:	f000 f9db 	bl	80081a8 <__multadd>
 8007df2:	0006      	movs	r6, r0
 8007df4:	0001      	movs	r1, r0
 8007df6:	9805      	ldr	r0, [sp, #20]
 8007df8:	f000 fbf2 	bl	80085e0 <__mcmp>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	dd00      	ble.n	8007e02 <_dtoa_r+0x9a2>
 8007e00:	e5a5      	b.n	800794e <_dtoa_r+0x4ee>
 8007e02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e04:	43db      	mvns	r3, r3
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	9b06      	ldr	r3, [sp, #24]
 8007e0a:	9308      	str	r3, [sp, #32]
 8007e0c:	2400      	movs	r4, #0
 8007e0e:	0031      	movs	r1, r6
 8007e10:	0038      	movs	r0, r7
 8007e12:	f000 f9a5 	bl	8008160 <_Bfree>
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	d100      	bne.n	8007e1c <_dtoa_r+0x9bc>
 8007e1a:	e6b7      	b.n	8007b8c <_dtoa_r+0x72c>
 8007e1c:	2c00      	cmp	r4, #0
 8007e1e:	d005      	beq.n	8007e2c <_dtoa_r+0x9cc>
 8007e20:	42ac      	cmp	r4, r5
 8007e22:	d003      	beq.n	8007e2c <_dtoa_r+0x9cc>
 8007e24:	0021      	movs	r1, r4
 8007e26:	0038      	movs	r0, r7
 8007e28:	f000 f99a 	bl	8008160 <_Bfree>
 8007e2c:	0029      	movs	r1, r5
 8007e2e:	0038      	movs	r0, r7
 8007e30:	f000 f996 	bl	8008160 <_Bfree>
 8007e34:	e6aa      	b.n	8007b8c <_dtoa_r+0x72c>
 8007e36:	2600      	movs	r6, #0
 8007e38:	0035      	movs	r5, r6
 8007e3a:	e7e2      	b.n	8007e02 <_dtoa_r+0x9a2>
 8007e3c:	9602      	str	r6, [sp, #8]
 8007e3e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007e40:	0035      	movs	r5, r6
 8007e42:	e584      	b.n	800794e <_dtoa_r+0x4ee>
 8007e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d100      	bne.n	8007e4c <_dtoa_r+0x9ec>
 8007e4a:	e0ce      	b.n	8007fea <_dtoa_r+0xb8a>
 8007e4c:	9b07      	ldr	r3, [sp, #28]
 8007e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e50:	2c00      	cmp	r4, #0
 8007e52:	dd05      	ble.n	8007e60 <_dtoa_r+0xa00>
 8007e54:	0029      	movs	r1, r5
 8007e56:	0022      	movs	r2, r4
 8007e58:	0038      	movs	r0, r7
 8007e5a:	f000 fb53 	bl	8008504 <__lshift>
 8007e5e:	0005      	movs	r5, r0
 8007e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e62:	0028      	movs	r0, r5
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d022      	beq.n	8007eae <_dtoa_r+0xa4e>
 8007e68:	0038      	movs	r0, r7
 8007e6a:	6869      	ldr	r1, [r5, #4]
 8007e6c:	f000 f934 	bl	80080d8 <_Balloc>
 8007e70:	1e04      	subs	r4, r0, #0
 8007e72:	d10f      	bne.n	8007e94 <_dtoa_r+0xa34>
 8007e74:	0002      	movs	r2, r0
 8007e76:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <_dtoa_r+0xa2c>)
 8007e78:	4905      	ldr	r1, [pc, #20]	; (8007e90 <_dtoa_r+0xa30>)
 8007e7a:	f7ff fb06 	bl	800748a <_dtoa_r+0x2a>
 8007e7e:	46c0      	nop			; (mov r8, r8)
 8007e80:	40240000 	.word	0x40240000
 8007e84:	00000433 	.word	0x00000433
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	0800a0df 	.word	0x0800a0df
 8007e90:	000002ea 	.word	0x000002ea
 8007e94:	0029      	movs	r1, r5
 8007e96:	692b      	ldr	r3, [r5, #16]
 8007e98:	310c      	adds	r1, #12
 8007e9a:	1c9a      	adds	r2, r3, #2
 8007e9c:	0092      	lsls	r2, r2, #2
 8007e9e:	300c      	adds	r0, #12
 8007ea0:	f000 f911 	bl	80080c6 <memcpy>
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	0021      	movs	r1, r4
 8007ea8:	0038      	movs	r0, r7
 8007eaa:	f000 fb2b 	bl	8008504 <__lshift>
 8007eae:	9b06      	ldr	r3, [sp, #24]
 8007eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	189b      	adds	r3, r3, r2
 8007eb8:	2201      	movs	r2, #1
 8007eba:	002c      	movs	r4, r5
 8007ebc:	0005      	movs	r5, r0
 8007ebe:	9314      	str	r3, [sp, #80]	; 0x50
 8007ec0:	9b08      	ldr	r3, [sp, #32]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec6:	0031      	movs	r1, r6
 8007ec8:	9805      	ldr	r0, [sp, #20]
 8007eca:	f7ff fa3d 	bl	8007348 <quorem>
 8007ece:	0003      	movs	r3, r0
 8007ed0:	0021      	movs	r1, r4
 8007ed2:	3330      	adds	r3, #48	; 0x30
 8007ed4:	900d      	str	r0, [sp, #52]	; 0x34
 8007ed6:	9805      	ldr	r0, [sp, #20]
 8007ed8:	9307      	str	r3, [sp, #28]
 8007eda:	f000 fb81 	bl	80085e0 <__mcmp>
 8007ede:	002a      	movs	r2, r5
 8007ee0:	900e      	str	r0, [sp, #56]	; 0x38
 8007ee2:	0031      	movs	r1, r6
 8007ee4:	0038      	movs	r0, r7
 8007ee6:	f000 fb97 	bl	8008618 <__mdiff>
 8007eea:	68c3      	ldr	r3, [r0, #12]
 8007eec:	9008      	str	r0, [sp, #32]
 8007eee:	9310      	str	r3, [sp, #64]	; 0x40
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d104      	bne.n	8007f04 <_dtoa_r+0xaa4>
 8007efa:	0001      	movs	r1, r0
 8007efc:	9805      	ldr	r0, [sp, #20]
 8007efe:	f000 fb6f 	bl	80085e0 <__mcmp>
 8007f02:	900c      	str	r0, [sp, #48]	; 0x30
 8007f04:	0038      	movs	r0, r7
 8007f06:	9908      	ldr	r1, [sp, #32]
 8007f08:	f000 f92a 	bl	8008160 <_Bfree>
 8007f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f10:	3301      	adds	r3, #1
 8007f12:	9308      	str	r3, [sp, #32]
 8007f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f16:	4313      	orrs	r3, r2
 8007f18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	d10c      	bne.n	8007f38 <_dtoa_r+0xad8>
 8007f1e:	9b07      	ldr	r3, [sp, #28]
 8007f20:	2b39      	cmp	r3, #57	; 0x39
 8007f22:	d026      	beq.n	8007f72 <_dtoa_r+0xb12>
 8007f24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dd02      	ble.n	8007f30 <_dtoa_r+0xad0>
 8007f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f2c:	3331      	adds	r3, #49	; 0x31
 8007f2e:	9307      	str	r3, [sp, #28]
 8007f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f32:	9a07      	ldr	r2, [sp, #28]
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	e76a      	b.n	8007e0e <_dtoa_r+0x9ae>
 8007f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	db04      	blt.n	8007f48 <_dtoa_r+0xae8>
 8007f3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f40:	4313      	orrs	r3, r2
 8007f42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f44:	4313      	orrs	r3, r2
 8007f46:	d11f      	bne.n	8007f88 <_dtoa_r+0xb28>
 8007f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	ddf0      	ble.n	8007f30 <_dtoa_r+0xad0>
 8007f4e:	9905      	ldr	r1, [sp, #20]
 8007f50:	2201      	movs	r2, #1
 8007f52:	0038      	movs	r0, r7
 8007f54:	f000 fad6 	bl	8008504 <__lshift>
 8007f58:	0031      	movs	r1, r6
 8007f5a:	9005      	str	r0, [sp, #20]
 8007f5c:	f000 fb40 	bl	80085e0 <__mcmp>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	dc03      	bgt.n	8007f6c <_dtoa_r+0xb0c>
 8007f64:	d1e4      	bne.n	8007f30 <_dtoa_r+0xad0>
 8007f66:	9b07      	ldr	r3, [sp, #28]
 8007f68:	07db      	lsls	r3, r3, #31
 8007f6a:	d5e1      	bpl.n	8007f30 <_dtoa_r+0xad0>
 8007f6c:	9b07      	ldr	r3, [sp, #28]
 8007f6e:	2b39      	cmp	r3, #57	; 0x39
 8007f70:	d1db      	bne.n	8007f2a <_dtoa_r+0xaca>
 8007f72:	2339      	movs	r3, #57	; 0x39
 8007f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f76:	7013      	strb	r3, [r2, #0]
 8007f78:	9b08      	ldr	r3, [sp, #32]
 8007f7a:	9308      	str	r3, [sp, #32]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	781a      	ldrb	r2, [r3, #0]
 8007f80:	2a39      	cmp	r2, #57	; 0x39
 8007f82:	d068      	beq.n	8008056 <_dtoa_r+0xbf6>
 8007f84:	3201      	adds	r2, #1
 8007f86:	e7d5      	b.n	8007f34 <_dtoa_r+0xad4>
 8007f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dd07      	ble.n	8007f9e <_dtoa_r+0xb3e>
 8007f8e:	9b07      	ldr	r3, [sp, #28]
 8007f90:	2b39      	cmp	r3, #57	; 0x39
 8007f92:	d0ee      	beq.n	8007f72 <_dtoa_r+0xb12>
 8007f94:	9b07      	ldr	r3, [sp, #28]
 8007f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f98:	3301      	adds	r3, #1
 8007f9a:	7013      	strb	r3, [r2, #0]
 8007f9c:	e737      	b.n	8007e0e <_dtoa_r+0x9ae>
 8007f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa0:	9a07      	ldr	r2, [sp, #28]
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d03e      	beq.n	800802a <_dtoa_r+0xbca>
 8007fac:	2300      	movs	r3, #0
 8007fae:	220a      	movs	r2, #10
 8007fb0:	9905      	ldr	r1, [sp, #20]
 8007fb2:	0038      	movs	r0, r7
 8007fb4:	f000 f8f8 	bl	80081a8 <__multadd>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9005      	str	r0, [sp, #20]
 8007fbc:	220a      	movs	r2, #10
 8007fbe:	0021      	movs	r1, r4
 8007fc0:	0038      	movs	r0, r7
 8007fc2:	42ac      	cmp	r4, r5
 8007fc4:	d106      	bne.n	8007fd4 <_dtoa_r+0xb74>
 8007fc6:	f000 f8ef 	bl	80081a8 <__multadd>
 8007fca:	0004      	movs	r4, r0
 8007fcc:	0005      	movs	r5, r0
 8007fce:	9b08      	ldr	r3, [sp, #32]
 8007fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd2:	e778      	b.n	8007ec6 <_dtoa_r+0xa66>
 8007fd4:	f000 f8e8 	bl	80081a8 <__multadd>
 8007fd8:	0029      	movs	r1, r5
 8007fda:	0004      	movs	r4, r0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	220a      	movs	r2, #10
 8007fe0:	0038      	movs	r0, r7
 8007fe2:	f000 f8e1 	bl	80081a8 <__multadd>
 8007fe6:	0005      	movs	r5, r0
 8007fe8:	e7f1      	b.n	8007fce <_dtoa_r+0xb6e>
 8007fea:	9b07      	ldr	r3, [sp, #28]
 8007fec:	930c      	str	r3, [sp, #48]	; 0x30
 8007fee:	2400      	movs	r4, #0
 8007ff0:	0031      	movs	r1, r6
 8007ff2:	9805      	ldr	r0, [sp, #20]
 8007ff4:	f7ff f9a8 	bl	8007348 <quorem>
 8007ff8:	9b06      	ldr	r3, [sp, #24]
 8007ffa:	3030      	adds	r0, #48	; 0x30
 8007ffc:	5518      	strb	r0, [r3, r4]
 8007ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008000:	3401      	adds	r4, #1
 8008002:	9007      	str	r0, [sp, #28]
 8008004:	42a3      	cmp	r3, r4
 8008006:	dd07      	ble.n	8008018 <_dtoa_r+0xbb8>
 8008008:	2300      	movs	r3, #0
 800800a:	220a      	movs	r2, #10
 800800c:	0038      	movs	r0, r7
 800800e:	9905      	ldr	r1, [sp, #20]
 8008010:	f000 f8ca 	bl	80081a8 <__multadd>
 8008014:	9005      	str	r0, [sp, #20]
 8008016:	e7eb      	b.n	8007ff0 <_dtoa_r+0xb90>
 8008018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800801a:	2001      	movs	r0, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	dd00      	ble.n	8008022 <_dtoa_r+0xbc2>
 8008020:	0018      	movs	r0, r3
 8008022:	2400      	movs	r4, #0
 8008024:	9b06      	ldr	r3, [sp, #24]
 8008026:	181b      	adds	r3, r3, r0
 8008028:	9308      	str	r3, [sp, #32]
 800802a:	9905      	ldr	r1, [sp, #20]
 800802c:	2201      	movs	r2, #1
 800802e:	0038      	movs	r0, r7
 8008030:	f000 fa68 	bl	8008504 <__lshift>
 8008034:	0031      	movs	r1, r6
 8008036:	9005      	str	r0, [sp, #20]
 8008038:	f000 fad2 	bl	80085e0 <__mcmp>
 800803c:	2800      	cmp	r0, #0
 800803e:	dc9b      	bgt.n	8007f78 <_dtoa_r+0xb18>
 8008040:	d102      	bne.n	8008048 <_dtoa_r+0xbe8>
 8008042:	9b07      	ldr	r3, [sp, #28]
 8008044:	07db      	lsls	r3, r3, #31
 8008046:	d497      	bmi.n	8007f78 <_dtoa_r+0xb18>
 8008048:	9b08      	ldr	r3, [sp, #32]
 800804a:	9308      	str	r3, [sp, #32]
 800804c:	3b01      	subs	r3, #1
 800804e:	781a      	ldrb	r2, [r3, #0]
 8008050:	2a30      	cmp	r2, #48	; 0x30
 8008052:	d0fa      	beq.n	800804a <_dtoa_r+0xbea>
 8008054:	e6db      	b.n	8007e0e <_dtoa_r+0x9ae>
 8008056:	9a06      	ldr	r2, [sp, #24]
 8008058:	429a      	cmp	r2, r3
 800805a:	d18e      	bne.n	8007f7a <_dtoa_r+0xb1a>
 800805c:	9b02      	ldr	r3, [sp, #8]
 800805e:	3301      	adds	r3, #1
 8008060:	9302      	str	r3, [sp, #8]
 8008062:	2331      	movs	r3, #49	; 0x31
 8008064:	e799      	b.n	8007f9a <_dtoa_r+0xb3a>
 8008066:	4b09      	ldr	r3, [pc, #36]	; (800808c <_dtoa_r+0xc2c>)
 8008068:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800806a:	9306      	str	r3, [sp, #24]
 800806c:	4b08      	ldr	r3, [pc, #32]	; (8008090 <_dtoa_r+0xc30>)
 800806e:	2a00      	cmp	r2, #0
 8008070:	d001      	beq.n	8008076 <_dtoa_r+0xc16>
 8008072:	f7ff fa3f 	bl	80074f4 <_dtoa_r+0x94>
 8008076:	f7ff fa3f 	bl	80074f8 <_dtoa_r+0x98>
 800807a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800807c:	2b00      	cmp	r3, #0
 800807e:	dcb6      	bgt.n	8007fee <_dtoa_r+0xb8e>
 8008080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008082:	2b02      	cmp	r3, #2
 8008084:	dd00      	ble.n	8008088 <_dtoa_r+0xc28>
 8008086:	e6ac      	b.n	8007de2 <_dtoa_r+0x982>
 8008088:	e7b1      	b.n	8007fee <_dtoa_r+0xb8e>
 800808a:	46c0      	nop			; (mov r8, r8)
 800808c:	0800a060 	.word	0x0800a060
 8008090:	0800a068 	.word	0x0800a068

08008094 <_localeconv_r>:
 8008094:	4800      	ldr	r0, [pc, #0]	; (8008098 <_localeconv_r+0x4>)
 8008096:	4770      	bx	lr
 8008098:	20000160 	.word	0x20000160

0800809c <malloc>:
 800809c:	b510      	push	{r4, lr}
 800809e:	4b03      	ldr	r3, [pc, #12]	; (80080ac <malloc+0x10>)
 80080a0:	0001      	movs	r1, r0
 80080a2:	6818      	ldr	r0, [r3, #0]
 80080a4:	f000 fc4c 	bl	8008940 <_malloc_r>
 80080a8:	bd10      	pop	{r4, pc}
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	2000000c 	.word	0x2000000c

080080b0 <memchr>:
 80080b0:	b2c9      	uxtb	r1, r1
 80080b2:	1882      	adds	r2, r0, r2
 80080b4:	4290      	cmp	r0, r2
 80080b6:	d101      	bne.n	80080bc <memchr+0xc>
 80080b8:	2000      	movs	r0, #0
 80080ba:	4770      	bx	lr
 80080bc:	7803      	ldrb	r3, [r0, #0]
 80080be:	428b      	cmp	r3, r1
 80080c0:	d0fb      	beq.n	80080ba <memchr+0xa>
 80080c2:	3001      	adds	r0, #1
 80080c4:	e7f6      	b.n	80080b4 <memchr+0x4>

080080c6 <memcpy>:
 80080c6:	2300      	movs	r3, #0
 80080c8:	b510      	push	{r4, lr}
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d100      	bne.n	80080d0 <memcpy+0xa>
 80080ce:	bd10      	pop	{r4, pc}
 80080d0:	5ccc      	ldrb	r4, [r1, r3]
 80080d2:	54c4      	strb	r4, [r0, r3]
 80080d4:	3301      	adds	r3, #1
 80080d6:	e7f8      	b.n	80080ca <memcpy+0x4>

080080d8 <_Balloc>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080dc:	0006      	movs	r6, r0
 80080de:	000c      	movs	r4, r1
 80080e0:	2d00      	cmp	r5, #0
 80080e2:	d10e      	bne.n	8008102 <_Balloc+0x2a>
 80080e4:	2010      	movs	r0, #16
 80080e6:	f7ff ffd9 	bl	800809c <malloc>
 80080ea:	1e02      	subs	r2, r0, #0
 80080ec:	6270      	str	r0, [r6, #36]	; 0x24
 80080ee:	d104      	bne.n	80080fa <_Balloc+0x22>
 80080f0:	2166      	movs	r1, #102	; 0x66
 80080f2:	4b19      	ldr	r3, [pc, #100]	; (8008158 <_Balloc+0x80>)
 80080f4:	4819      	ldr	r0, [pc, #100]	; (800815c <_Balloc+0x84>)
 80080f6:	f000 fe0d 	bl	8008d14 <__assert_func>
 80080fa:	6045      	str	r5, [r0, #4]
 80080fc:	6085      	str	r5, [r0, #8]
 80080fe:	6005      	str	r5, [r0, #0]
 8008100:	60c5      	str	r5, [r0, #12]
 8008102:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008104:	68eb      	ldr	r3, [r5, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d013      	beq.n	8008132 <_Balloc+0x5a>
 800810a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800810c:	00a2      	lsls	r2, r4, #2
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	189b      	adds	r3, r3, r2
 8008112:	6818      	ldr	r0, [r3, #0]
 8008114:	2800      	cmp	r0, #0
 8008116:	d118      	bne.n	800814a <_Balloc+0x72>
 8008118:	2101      	movs	r1, #1
 800811a:	000d      	movs	r5, r1
 800811c:	40a5      	lsls	r5, r4
 800811e:	1d6a      	adds	r2, r5, #5
 8008120:	0030      	movs	r0, r6
 8008122:	0092      	lsls	r2, r2, #2
 8008124:	f000 fb74 	bl	8008810 <_calloc_r>
 8008128:	2800      	cmp	r0, #0
 800812a:	d00c      	beq.n	8008146 <_Balloc+0x6e>
 800812c:	6044      	str	r4, [r0, #4]
 800812e:	6085      	str	r5, [r0, #8]
 8008130:	e00d      	b.n	800814e <_Balloc+0x76>
 8008132:	2221      	movs	r2, #33	; 0x21
 8008134:	2104      	movs	r1, #4
 8008136:	0030      	movs	r0, r6
 8008138:	f000 fb6a 	bl	8008810 <_calloc_r>
 800813c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800813e:	60e8      	str	r0, [r5, #12]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e1      	bne.n	800810a <_Balloc+0x32>
 8008146:	2000      	movs	r0, #0
 8008148:	bd70      	pop	{r4, r5, r6, pc}
 800814a:	6802      	ldr	r2, [r0, #0]
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	2300      	movs	r3, #0
 8008150:	6103      	str	r3, [r0, #16]
 8008152:	60c3      	str	r3, [r0, #12]
 8008154:	e7f8      	b.n	8008148 <_Balloc+0x70>
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	0800a06d 	.word	0x0800a06d
 800815c:	0800a0f0 	.word	0x0800a0f0

08008160 <_Bfree>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008164:	0005      	movs	r5, r0
 8008166:	000c      	movs	r4, r1
 8008168:	2e00      	cmp	r6, #0
 800816a:	d10e      	bne.n	800818a <_Bfree+0x2a>
 800816c:	2010      	movs	r0, #16
 800816e:	f7ff ff95 	bl	800809c <malloc>
 8008172:	1e02      	subs	r2, r0, #0
 8008174:	6268      	str	r0, [r5, #36]	; 0x24
 8008176:	d104      	bne.n	8008182 <_Bfree+0x22>
 8008178:	218a      	movs	r1, #138	; 0x8a
 800817a:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <_Bfree+0x40>)
 800817c:	4809      	ldr	r0, [pc, #36]	; (80081a4 <_Bfree+0x44>)
 800817e:	f000 fdc9 	bl	8008d14 <__assert_func>
 8008182:	6046      	str	r6, [r0, #4]
 8008184:	6086      	str	r6, [r0, #8]
 8008186:	6006      	str	r6, [r0, #0]
 8008188:	60c6      	str	r6, [r0, #12]
 800818a:	2c00      	cmp	r4, #0
 800818c:	d007      	beq.n	800819e <_Bfree+0x3e>
 800818e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008190:	6862      	ldr	r2, [r4, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	0092      	lsls	r2, r2, #2
 8008196:	189b      	adds	r3, r3, r2
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	6022      	str	r2, [r4, #0]
 800819c:	601c      	str	r4, [r3, #0]
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	0800a06d 	.word	0x0800a06d
 80081a4:	0800a0f0 	.word	0x0800a0f0

080081a8 <__multadd>:
 80081a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081aa:	000e      	movs	r6, r1
 80081ac:	9001      	str	r0, [sp, #4]
 80081ae:	000c      	movs	r4, r1
 80081b0:	001d      	movs	r5, r3
 80081b2:	2000      	movs	r0, #0
 80081b4:	690f      	ldr	r7, [r1, #16]
 80081b6:	3614      	adds	r6, #20
 80081b8:	6833      	ldr	r3, [r6, #0]
 80081ba:	3001      	adds	r0, #1
 80081bc:	b299      	uxth	r1, r3
 80081be:	4351      	muls	r1, r2
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	4353      	muls	r3, r2
 80081c4:	1949      	adds	r1, r1, r5
 80081c6:	0c0d      	lsrs	r5, r1, #16
 80081c8:	195b      	adds	r3, r3, r5
 80081ca:	0c1d      	lsrs	r5, r3, #16
 80081cc:	b289      	uxth	r1, r1
 80081ce:	041b      	lsls	r3, r3, #16
 80081d0:	185b      	adds	r3, r3, r1
 80081d2:	c608      	stmia	r6!, {r3}
 80081d4:	4287      	cmp	r7, r0
 80081d6:	dcef      	bgt.n	80081b8 <__multadd+0x10>
 80081d8:	2d00      	cmp	r5, #0
 80081da:	d022      	beq.n	8008222 <__multadd+0x7a>
 80081dc:	68a3      	ldr	r3, [r4, #8]
 80081de:	42bb      	cmp	r3, r7
 80081e0:	dc19      	bgt.n	8008216 <__multadd+0x6e>
 80081e2:	6863      	ldr	r3, [r4, #4]
 80081e4:	9801      	ldr	r0, [sp, #4]
 80081e6:	1c59      	adds	r1, r3, #1
 80081e8:	f7ff ff76 	bl	80080d8 <_Balloc>
 80081ec:	1e06      	subs	r6, r0, #0
 80081ee:	d105      	bne.n	80081fc <__multadd+0x54>
 80081f0:	0002      	movs	r2, r0
 80081f2:	21b5      	movs	r1, #181	; 0xb5
 80081f4:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <__multadd+0x80>)
 80081f6:	480d      	ldr	r0, [pc, #52]	; (800822c <__multadd+0x84>)
 80081f8:	f000 fd8c 	bl	8008d14 <__assert_func>
 80081fc:	0021      	movs	r1, r4
 80081fe:	6923      	ldr	r3, [r4, #16]
 8008200:	310c      	adds	r1, #12
 8008202:	1c9a      	adds	r2, r3, #2
 8008204:	0092      	lsls	r2, r2, #2
 8008206:	300c      	adds	r0, #12
 8008208:	f7ff ff5d 	bl	80080c6 <memcpy>
 800820c:	0021      	movs	r1, r4
 800820e:	9801      	ldr	r0, [sp, #4]
 8008210:	f7ff ffa6 	bl	8008160 <_Bfree>
 8008214:	0034      	movs	r4, r6
 8008216:	1d3b      	adds	r3, r7, #4
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	18e3      	adds	r3, r4, r3
 800821c:	605d      	str	r5, [r3, #4]
 800821e:	1c7b      	adds	r3, r7, #1
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	0020      	movs	r0, r4
 8008224:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008226:	46c0      	nop			; (mov r8, r8)
 8008228:	0800a0df 	.word	0x0800a0df
 800822c:	0800a0f0 	.word	0x0800a0f0

08008230 <__hi0bits>:
 8008230:	0003      	movs	r3, r0
 8008232:	0c02      	lsrs	r2, r0, #16
 8008234:	2000      	movs	r0, #0
 8008236:	4282      	cmp	r2, r0
 8008238:	d101      	bne.n	800823e <__hi0bits+0xe>
 800823a:	041b      	lsls	r3, r3, #16
 800823c:	3010      	adds	r0, #16
 800823e:	0e1a      	lsrs	r2, r3, #24
 8008240:	d101      	bne.n	8008246 <__hi0bits+0x16>
 8008242:	3008      	adds	r0, #8
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	0f1a      	lsrs	r2, r3, #28
 8008248:	d101      	bne.n	800824e <__hi0bits+0x1e>
 800824a:	3004      	adds	r0, #4
 800824c:	011b      	lsls	r3, r3, #4
 800824e:	0f9a      	lsrs	r2, r3, #30
 8008250:	d101      	bne.n	8008256 <__hi0bits+0x26>
 8008252:	3002      	adds	r0, #2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	db03      	blt.n	8008262 <__hi0bits+0x32>
 800825a:	3001      	adds	r0, #1
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	d400      	bmi.n	8008262 <__hi0bits+0x32>
 8008260:	2020      	movs	r0, #32
 8008262:	4770      	bx	lr

08008264 <__lo0bits>:
 8008264:	6803      	ldr	r3, [r0, #0]
 8008266:	0002      	movs	r2, r0
 8008268:	2107      	movs	r1, #7
 800826a:	0018      	movs	r0, r3
 800826c:	4008      	ands	r0, r1
 800826e:	420b      	tst	r3, r1
 8008270:	d00d      	beq.n	800828e <__lo0bits+0x2a>
 8008272:	3906      	subs	r1, #6
 8008274:	2000      	movs	r0, #0
 8008276:	420b      	tst	r3, r1
 8008278:	d105      	bne.n	8008286 <__lo0bits+0x22>
 800827a:	3002      	adds	r0, #2
 800827c:	4203      	tst	r3, r0
 800827e:	d003      	beq.n	8008288 <__lo0bits+0x24>
 8008280:	40cb      	lsrs	r3, r1
 8008282:	0008      	movs	r0, r1
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	4770      	bx	lr
 8008288:	089b      	lsrs	r3, r3, #2
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e7fb      	b.n	8008286 <__lo0bits+0x22>
 800828e:	b299      	uxth	r1, r3
 8008290:	2900      	cmp	r1, #0
 8008292:	d101      	bne.n	8008298 <__lo0bits+0x34>
 8008294:	2010      	movs	r0, #16
 8008296:	0c1b      	lsrs	r3, r3, #16
 8008298:	b2d9      	uxtb	r1, r3
 800829a:	2900      	cmp	r1, #0
 800829c:	d101      	bne.n	80082a2 <__lo0bits+0x3e>
 800829e:	3008      	adds	r0, #8
 80082a0:	0a1b      	lsrs	r3, r3, #8
 80082a2:	0719      	lsls	r1, r3, #28
 80082a4:	d101      	bne.n	80082aa <__lo0bits+0x46>
 80082a6:	3004      	adds	r0, #4
 80082a8:	091b      	lsrs	r3, r3, #4
 80082aa:	0799      	lsls	r1, r3, #30
 80082ac:	d101      	bne.n	80082b2 <__lo0bits+0x4e>
 80082ae:	3002      	adds	r0, #2
 80082b0:	089b      	lsrs	r3, r3, #2
 80082b2:	07d9      	lsls	r1, r3, #31
 80082b4:	d4e9      	bmi.n	800828a <__lo0bits+0x26>
 80082b6:	3001      	adds	r0, #1
 80082b8:	085b      	lsrs	r3, r3, #1
 80082ba:	d1e6      	bne.n	800828a <__lo0bits+0x26>
 80082bc:	2020      	movs	r0, #32
 80082be:	e7e2      	b.n	8008286 <__lo0bits+0x22>

080082c0 <__i2b>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	000c      	movs	r4, r1
 80082c4:	2101      	movs	r1, #1
 80082c6:	f7ff ff07 	bl	80080d8 <_Balloc>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d106      	bne.n	80082dc <__i2b+0x1c>
 80082ce:	21a0      	movs	r1, #160	; 0xa0
 80082d0:	0002      	movs	r2, r0
 80082d2:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <__i2b+0x24>)
 80082d4:	4804      	ldr	r0, [pc, #16]	; (80082e8 <__i2b+0x28>)
 80082d6:	0049      	lsls	r1, r1, #1
 80082d8:	f000 fd1c 	bl	8008d14 <__assert_func>
 80082dc:	2301      	movs	r3, #1
 80082de:	6144      	str	r4, [r0, #20]
 80082e0:	6103      	str	r3, [r0, #16]
 80082e2:	bd10      	pop	{r4, pc}
 80082e4:	0800a0df 	.word	0x0800a0df
 80082e8:	0800a0f0 	.word	0x0800a0f0

080082ec <__multiply>:
 80082ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ee:	690b      	ldr	r3, [r1, #16]
 80082f0:	0014      	movs	r4, r2
 80082f2:	6912      	ldr	r2, [r2, #16]
 80082f4:	000d      	movs	r5, r1
 80082f6:	b089      	sub	sp, #36	; 0x24
 80082f8:	4293      	cmp	r3, r2
 80082fa:	da01      	bge.n	8008300 <__multiply+0x14>
 80082fc:	0025      	movs	r5, r4
 80082fe:	000c      	movs	r4, r1
 8008300:	692f      	ldr	r7, [r5, #16]
 8008302:	6926      	ldr	r6, [r4, #16]
 8008304:	6869      	ldr	r1, [r5, #4]
 8008306:	19bb      	adds	r3, r7, r6
 8008308:	9302      	str	r3, [sp, #8]
 800830a:	68ab      	ldr	r3, [r5, #8]
 800830c:	19ba      	adds	r2, r7, r6
 800830e:	4293      	cmp	r3, r2
 8008310:	da00      	bge.n	8008314 <__multiply+0x28>
 8008312:	3101      	adds	r1, #1
 8008314:	f7ff fee0 	bl	80080d8 <_Balloc>
 8008318:	9001      	str	r0, [sp, #4]
 800831a:	2800      	cmp	r0, #0
 800831c:	d106      	bne.n	800832c <__multiply+0x40>
 800831e:	215e      	movs	r1, #94	; 0x5e
 8008320:	0002      	movs	r2, r0
 8008322:	4b48      	ldr	r3, [pc, #288]	; (8008444 <__multiply+0x158>)
 8008324:	4848      	ldr	r0, [pc, #288]	; (8008448 <__multiply+0x15c>)
 8008326:	31ff      	adds	r1, #255	; 0xff
 8008328:	f000 fcf4 	bl	8008d14 <__assert_func>
 800832c:	9b01      	ldr	r3, [sp, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	3314      	adds	r3, #20
 8008332:	469c      	mov	ip, r3
 8008334:	19bb      	adds	r3, r7, r6
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4463      	add	r3, ip
 800833a:	9303      	str	r3, [sp, #12]
 800833c:	4663      	mov	r3, ip
 800833e:	9903      	ldr	r1, [sp, #12]
 8008340:	428b      	cmp	r3, r1
 8008342:	d32c      	bcc.n	800839e <__multiply+0xb2>
 8008344:	002b      	movs	r3, r5
 8008346:	0022      	movs	r2, r4
 8008348:	3314      	adds	r3, #20
 800834a:	00bf      	lsls	r7, r7, #2
 800834c:	3214      	adds	r2, #20
 800834e:	9306      	str	r3, [sp, #24]
 8008350:	00b6      	lsls	r6, r6, #2
 8008352:	19db      	adds	r3, r3, r7
 8008354:	9304      	str	r3, [sp, #16]
 8008356:	1993      	adds	r3, r2, r6
 8008358:	9307      	str	r3, [sp, #28]
 800835a:	2304      	movs	r3, #4
 800835c:	9305      	str	r3, [sp, #20]
 800835e:	002b      	movs	r3, r5
 8008360:	9904      	ldr	r1, [sp, #16]
 8008362:	3315      	adds	r3, #21
 8008364:	9200      	str	r2, [sp, #0]
 8008366:	4299      	cmp	r1, r3
 8008368:	d305      	bcc.n	8008376 <__multiply+0x8a>
 800836a:	1b4b      	subs	r3, r1, r5
 800836c:	3b15      	subs	r3, #21
 800836e:	089b      	lsrs	r3, r3, #2
 8008370:	3301      	adds	r3, #1
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	9b07      	ldr	r3, [sp, #28]
 8008378:	9a00      	ldr	r2, [sp, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d311      	bcc.n	80083a2 <__multiply+0xb6>
 800837e:	9b02      	ldr	r3, [sp, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	dd06      	ble.n	8008392 <__multiply+0xa6>
 8008384:	9b03      	ldr	r3, [sp, #12]
 8008386:	3b04      	subs	r3, #4
 8008388:	9303      	str	r3, [sp, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d053      	beq.n	800843a <__multiply+0x14e>
 8008392:	9b01      	ldr	r3, [sp, #4]
 8008394:	9a02      	ldr	r2, [sp, #8]
 8008396:	0018      	movs	r0, r3
 8008398:	611a      	str	r2, [r3, #16]
 800839a:	b009      	add	sp, #36	; 0x24
 800839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839e:	c304      	stmia	r3!, {r2}
 80083a0:	e7cd      	b.n	800833e <__multiply+0x52>
 80083a2:	9b00      	ldr	r3, [sp, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	b298      	uxth	r0, r3
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d01b      	beq.n	80083e4 <__multiply+0xf8>
 80083ac:	4667      	mov	r7, ip
 80083ae:	2400      	movs	r4, #0
 80083b0:	9e06      	ldr	r6, [sp, #24]
 80083b2:	ce02      	ldmia	r6!, {r1}
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	b28b      	uxth	r3, r1
 80083b8:	4343      	muls	r3, r0
 80083ba:	b292      	uxth	r2, r2
 80083bc:	189b      	adds	r3, r3, r2
 80083be:	191b      	adds	r3, r3, r4
 80083c0:	0c0c      	lsrs	r4, r1, #16
 80083c2:	4344      	muls	r4, r0
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	0c11      	lsrs	r1, r2, #16
 80083c8:	1861      	adds	r1, r4, r1
 80083ca:	0c1c      	lsrs	r4, r3, #16
 80083cc:	1909      	adds	r1, r1, r4
 80083ce:	0c0c      	lsrs	r4, r1, #16
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	0409      	lsls	r1, r1, #16
 80083d4:	430b      	orrs	r3, r1
 80083d6:	c708      	stmia	r7!, {r3}
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	42b3      	cmp	r3, r6
 80083dc:	d8e9      	bhi.n	80083b2 <__multiply+0xc6>
 80083de:	4663      	mov	r3, ip
 80083e0:	9a05      	ldr	r2, [sp, #20]
 80083e2:	509c      	str	r4, [r3, r2]
 80083e4:	9b00      	ldr	r3, [sp, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	0c1e      	lsrs	r6, r3, #16
 80083ea:	d020      	beq.n	800842e <__multiply+0x142>
 80083ec:	4663      	mov	r3, ip
 80083ee:	002c      	movs	r4, r5
 80083f0:	4660      	mov	r0, ip
 80083f2:	2700      	movs	r7, #0
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3414      	adds	r4, #20
 80083f8:	6822      	ldr	r2, [r4, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	b291      	uxth	r1, r2
 80083fe:	4371      	muls	r1, r6
 8008400:	6802      	ldr	r2, [r0, #0]
 8008402:	0c12      	lsrs	r2, r2, #16
 8008404:	1889      	adds	r1, r1, r2
 8008406:	19cf      	adds	r7, r1, r7
 8008408:	0439      	lsls	r1, r7, #16
 800840a:	430b      	orrs	r3, r1
 800840c:	6003      	str	r3, [r0, #0]
 800840e:	cc02      	ldmia	r4!, {r1}
 8008410:	6843      	ldr	r3, [r0, #4]
 8008412:	0c09      	lsrs	r1, r1, #16
 8008414:	4371      	muls	r1, r6
 8008416:	b29b      	uxth	r3, r3
 8008418:	0c3f      	lsrs	r7, r7, #16
 800841a:	18cb      	adds	r3, r1, r3
 800841c:	9a04      	ldr	r2, [sp, #16]
 800841e:	19db      	adds	r3, r3, r7
 8008420:	0c1f      	lsrs	r7, r3, #16
 8008422:	3004      	adds	r0, #4
 8008424:	42a2      	cmp	r2, r4
 8008426:	d8e7      	bhi.n	80083f8 <__multiply+0x10c>
 8008428:	4662      	mov	r2, ip
 800842a:	9905      	ldr	r1, [sp, #20]
 800842c:	5053      	str	r3, [r2, r1]
 800842e:	9b00      	ldr	r3, [sp, #0]
 8008430:	3304      	adds	r3, #4
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	2304      	movs	r3, #4
 8008436:	449c      	add	ip, r3
 8008438:	e79d      	b.n	8008376 <__multiply+0x8a>
 800843a:	9b02      	ldr	r3, [sp, #8]
 800843c:	3b01      	subs	r3, #1
 800843e:	9302      	str	r3, [sp, #8]
 8008440:	e79d      	b.n	800837e <__multiply+0x92>
 8008442:	46c0      	nop			; (mov r8, r8)
 8008444:	0800a0df 	.word	0x0800a0df
 8008448:	0800a0f0 	.word	0x0800a0f0

0800844c <__pow5mult>:
 800844c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800844e:	2303      	movs	r3, #3
 8008450:	0015      	movs	r5, r2
 8008452:	0007      	movs	r7, r0
 8008454:	000e      	movs	r6, r1
 8008456:	401a      	ands	r2, r3
 8008458:	421d      	tst	r5, r3
 800845a:	d008      	beq.n	800846e <__pow5mult+0x22>
 800845c:	4925      	ldr	r1, [pc, #148]	; (80084f4 <__pow5mult+0xa8>)
 800845e:	3a01      	subs	r2, #1
 8008460:	0092      	lsls	r2, r2, #2
 8008462:	5852      	ldr	r2, [r2, r1]
 8008464:	2300      	movs	r3, #0
 8008466:	0031      	movs	r1, r6
 8008468:	f7ff fe9e 	bl	80081a8 <__multadd>
 800846c:	0006      	movs	r6, r0
 800846e:	10ad      	asrs	r5, r5, #2
 8008470:	d03d      	beq.n	80084ee <__pow5mult+0xa2>
 8008472:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008474:	2c00      	cmp	r4, #0
 8008476:	d10f      	bne.n	8008498 <__pow5mult+0x4c>
 8008478:	2010      	movs	r0, #16
 800847a:	f7ff fe0f 	bl	800809c <malloc>
 800847e:	1e02      	subs	r2, r0, #0
 8008480:	6278      	str	r0, [r7, #36]	; 0x24
 8008482:	d105      	bne.n	8008490 <__pow5mult+0x44>
 8008484:	21d7      	movs	r1, #215	; 0xd7
 8008486:	4b1c      	ldr	r3, [pc, #112]	; (80084f8 <__pow5mult+0xac>)
 8008488:	481c      	ldr	r0, [pc, #112]	; (80084fc <__pow5mult+0xb0>)
 800848a:	0049      	lsls	r1, r1, #1
 800848c:	f000 fc42 	bl	8008d14 <__assert_func>
 8008490:	6044      	str	r4, [r0, #4]
 8008492:	6084      	str	r4, [r0, #8]
 8008494:	6004      	str	r4, [r0, #0]
 8008496:	60c4      	str	r4, [r0, #12]
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	689c      	ldr	r4, [r3, #8]
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d108      	bne.n	80084b4 <__pow5mult+0x68>
 80084a2:	0038      	movs	r0, r7
 80084a4:	4916      	ldr	r1, [pc, #88]	; (8008500 <__pow5mult+0xb4>)
 80084a6:	f7ff ff0b 	bl	80082c0 <__i2b>
 80084aa:	9b01      	ldr	r3, [sp, #4]
 80084ac:	0004      	movs	r4, r0
 80084ae:	6098      	str	r0, [r3, #8]
 80084b0:	2300      	movs	r3, #0
 80084b2:	6003      	str	r3, [r0, #0]
 80084b4:	2301      	movs	r3, #1
 80084b6:	421d      	tst	r5, r3
 80084b8:	d00a      	beq.n	80084d0 <__pow5mult+0x84>
 80084ba:	0031      	movs	r1, r6
 80084bc:	0022      	movs	r2, r4
 80084be:	0038      	movs	r0, r7
 80084c0:	f7ff ff14 	bl	80082ec <__multiply>
 80084c4:	0031      	movs	r1, r6
 80084c6:	9001      	str	r0, [sp, #4]
 80084c8:	0038      	movs	r0, r7
 80084ca:	f7ff fe49 	bl	8008160 <_Bfree>
 80084ce:	9e01      	ldr	r6, [sp, #4]
 80084d0:	106d      	asrs	r5, r5, #1
 80084d2:	d00c      	beq.n	80084ee <__pow5mult+0xa2>
 80084d4:	6820      	ldr	r0, [r4, #0]
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d107      	bne.n	80084ea <__pow5mult+0x9e>
 80084da:	0022      	movs	r2, r4
 80084dc:	0021      	movs	r1, r4
 80084de:	0038      	movs	r0, r7
 80084e0:	f7ff ff04 	bl	80082ec <__multiply>
 80084e4:	2300      	movs	r3, #0
 80084e6:	6020      	str	r0, [r4, #0]
 80084e8:	6003      	str	r3, [r0, #0]
 80084ea:	0004      	movs	r4, r0
 80084ec:	e7e2      	b.n	80084b4 <__pow5mult+0x68>
 80084ee:	0030      	movs	r0, r6
 80084f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084f2:	46c0      	nop			; (mov r8, r8)
 80084f4:	0800a240 	.word	0x0800a240
 80084f8:	0800a06d 	.word	0x0800a06d
 80084fc:	0800a0f0 	.word	0x0800a0f0
 8008500:	00000271 	.word	0x00000271

08008504 <__lshift>:
 8008504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008506:	000c      	movs	r4, r1
 8008508:	0017      	movs	r7, r2
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	1155      	asrs	r5, r2, #5
 800850e:	b087      	sub	sp, #28
 8008510:	18eb      	adds	r3, r5, r3
 8008512:	9302      	str	r3, [sp, #8]
 8008514:	3301      	adds	r3, #1
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	6849      	ldr	r1, [r1, #4]
 800851a:	68a3      	ldr	r3, [r4, #8]
 800851c:	9004      	str	r0, [sp, #16]
 800851e:	9a01      	ldr	r2, [sp, #4]
 8008520:	4293      	cmp	r3, r2
 8008522:	db10      	blt.n	8008546 <__lshift+0x42>
 8008524:	9804      	ldr	r0, [sp, #16]
 8008526:	f7ff fdd7 	bl	80080d8 <_Balloc>
 800852a:	2300      	movs	r3, #0
 800852c:	0002      	movs	r2, r0
 800852e:	0006      	movs	r6, r0
 8008530:	0019      	movs	r1, r3
 8008532:	3214      	adds	r2, #20
 8008534:	4298      	cmp	r0, r3
 8008536:	d10c      	bne.n	8008552 <__lshift+0x4e>
 8008538:	21da      	movs	r1, #218	; 0xda
 800853a:	0002      	movs	r2, r0
 800853c:	4b26      	ldr	r3, [pc, #152]	; (80085d8 <__lshift+0xd4>)
 800853e:	4827      	ldr	r0, [pc, #156]	; (80085dc <__lshift+0xd8>)
 8008540:	31ff      	adds	r1, #255	; 0xff
 8008542:	f000 fbe7 	bl	8008d14 <__assert_func>
 8008546:	3101      	adds	r1, #1
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	e7e8      	b.n	800851e <__lshift+0x1a>
 800854c:	0098      	lsls	r0, r3, #2
 800854e:	5011      	str	r1, [r2, r0]
 8008550:	3301      	adds	r3, #1
 8008552:	42ab      	cmp	r3, r5
 8008554:	dbfa      	blt.n	800854c <__lshift+0x48>
 8008556:	43eb      	mvns	r3, r5
 8008558:	17db      	asrs	r3, r3, #31
 800855a:	401d      	ands	r5, r3
 800855c:	211f      	movs	r1, #31
 800855e:	0023      	movs	r3, r4
 8008560:	0038      	movs	r0, r7
 8008562:	00ad      	lsls	r5, r5, #2
 8008564:	1955      	adds	r5, r2, r5
 8008566:	6922      	ldr	r2, [r4, #16]
 8008568:	3314      	adds	r3, #20
 800856a:	0092      	lsls	r2, r2, #2
 800856c:	4008      	ands	r0, r1
 800856e:	4684      	mov	ip, r0
 8008570:	189a      	adds	r2, r3, r2
 8008572:	420f      	tst	r7, r1
 8008574:	d02a      	beq.n	80085cc <__lshift+0xc8>
 8008576:	3101      	adds	r1, #1
 8008578:	1a09      	subs	r1, r1, r0
 800857a:	9105      	str	r1, [sp, #20]
 800857c:	2100      	movs	r1, #0
 800857e:	9503      	str	r5, [sp, #12]
 8008580:	4667      	mov	r7, ip
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	40b8      	lsls	r0, r7
 8008586:	4301      	orrs	r1, r0
 8008588:	9803      	ldr	r0, [sp, #12]
 800858a:	c002      	stmia	r0!, {r1}
 800858c:	cb02      	ldmia	r3!, {r1}
 800858e:	9003      	str	r0, [sp, #12]
 8008590:	9805      	ldr	r0, [sp, #20]
 8008592:	40c1      	lsrs	r1, r0
 8008594:	429a      	cmp	r2, r3
 8008596:	d8f3      	bhi.n	8008580 <__lshift+0x7c>
 8008598:	0020      	movs	r0, r4
 800859a:	3015      	adds	r0, #21
 800859c:	2304      	movs	r3, #4
 800859e:	4282      	cmp	r2, r0
 80085a0:	d304      	bcc.n	80085ac <__lshift+0xa8>
 80085a2:	1b13      	subs	r3, r2, r4
 80085a4:	3b15      	subs	r3, #21
 80085a6:	089b      	lsrs	r3, r3, #2
 80085a8:	3301      	adds	r3, #1
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	50e9      	str	r1, [r5, r3]
 80085ae:	2900      	cmp	r1, #0
 80085b0:	d002      	beq.n	80085b8 <__lshift+0xb4>
 80085b2:	9b02      	ldr	r3, [sp, #8]
 80085b4:	3302      	adds	r3, #2
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	9804      	ldr	r0, [sp, #16]
 80085bc:	3b01      	subs	r3, #1
 80085be:	0021      	movs	r1, r4
 80085c0:	6133      	str	r3, [r6, #16]
 80085c2:	f7ff fdcd 	bl	8008160 <_Bfree>
 80085c6:	0030      	movs	r0, r6
 80085c8:	b007      	add	sp, #28
 80085ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085cc:	cb02      	ldmia	r3!, {r1}
 80085ce:	c502      	stmia	r5!, {r1}
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d8fb      	bhi.n	80085cc <__lshift+0xc8>
 80085d4:	e7f0      	b.n	80085b8 <__lshift+0xb4>
 80085d6:	46c0      	nop			; (mov r8, r8)
 80085d8:	0800a0df 	.word	0x0800a0df
 80085dc:	0800a0f0 	.word	0x0800a0f0

080085e0 <__mcmp>:
 80085e0:	6902      	ldr	r2, [r0, #16]
 80085e2:	690b      	ldr	r3, [r1, #16]
 80085e4:	b530      	push	{r4, r5, lr}
 80085e6:	0004      	movs	r4, r0
 80085e8:	1ad0      	subs	r0, r2, r3
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d10d      	bne.n	800860a <__mcmp+0x2a>
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	3414      	adds	r4, #20
 80085f2:	3114      	adds	r1, #20
 80085f4:	18e2      	adds	r2, r4, r3
 80085f6:	18c9      	adds	r1, r1, r3
 80085f8:	3a04      	subs	r2, #4
 80085fa:	3904      	subs	r1, #4
 80085fc:	6815      	ldr	r5, [r2, #0]
 80085fe:	680b      	ldr	r3, [r1, #0]
 8008600:	429d      	cmp	r5, r3
 8008602:	d003      	beq.n	800860c <__mcmp+0x2c>
 8008604:	2001      	movs	r0, #1
 8008606:	429d      	cmp	r5, r3
 8008608:	d303      	bcc.n	8008612 <__mcmp+0x32>
 800860a:	bd30      	pop	{r4, r5, pc}
 800860c:	4294      	cmp	r4, r2
 800860e:	d3f3      	bcc.n	80085f8 <__mcmp+0x18>
 8008610:	e7fb      	b.n	800860a <__mcmp+0x2a>
 8008612:	4240      	negs	r0, r0
 8008614:	e7f9      	b.n	800860a <__mcmp+0x2a>
	...

08008618 <__mdiff>:
 8008618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800861a:	000e      	movs	r6, r1
 800861c:	0007      	movs	r7, r0
 800861e:	0011      	movs	r1, r2
 8008620:	0030      	movs	r0, r6
 8008622:	b087      	sub	sp, #28
 8008624:	0014      	movs	r4, r2
 8008626:	f7ff ffdb 	bl	80085e0 <__mcmp>
 800862a:	1e05      	subs	r5, r0, #0
 800862c:	d110      	bne.n	8008650 <__mdiff+0x38>
 800862e:	0001      	movs	r1, r0
 8008630:	0038      	movs	r0, r7
 8008632:	f7ff fd51 	bl	80080d8 <_Balloc>
 8008636:	1e02      	subs	r2, r0, #0
 8008638:	d104      	bne.n	8008644 <__mdiff+0x2c>
 800863a:	4b40      	ldr	r3, [pc, #256]	; (800873c <__mdiff+0x124>)
 800863c:	4940      	ldr	r1, [pc, #256]	; (8008740 <__mdiff+0x128>)
 800863e:	4841      	ldr	r0, [pc, #260]	; (8008744 <__mdiff+0x12c>)
 8008640:	f000 fb68 	bl	8008d14 <__assert_func>
 8008644:	2301      	movs	r3, #1
 8008646:	6145      	str	r5, [r0, #20]
 8008648:	6103      	str	r3, [r0, #16]
 800864a:	0010      	movs	r0, r2
 800864c:	b007      	add	sp, #28
 800864e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008650:	2301      	movs	r3, #1
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	2800      	cmp	r0, #0
 8008656:	db04      	blt.n	8008662 <__mdiff+0x4a>
 8008658:	0023      	movs	r3, r4
 800865a:	0034      	movs	r4, r6
 800865c:	001e      	movs	r6, r3
 800865e:	2300      	movs	r3, #0
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	0038      	movs	r0, r7
 8008664:	6861      	ldr	r1, [r4, #4]
 8008666:	f7ff fd37 	bl	80080d8 <_Balloc>
 800866a:	1e02      	subs	r2, r0, #0
 800866c:	d103      	bne.n	8008676 <__mdiff+0x5e>
 800866e:	2190      	movs	r1, #144	; 0x90
 8008670:	4b32      	ldr	r3, [pc, #200]	; (800873c <__mdiff+0x124>)
 8008672:	0089      	lsls	r1, r1, #2
 8008674:	e7e3      	b.n	800863e <__mdiff+0x26>
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	2700      	movs	r7, #0
 800867a:	60c3      	str	r3, [r0, #12]
 800867c:	6920      	ldr	r0, [r4, #16]
 800867e:	3414      	adds	r4, #20
 8008680:	9401      	str	r4, [sp, #4]
 8008682:	9b01      	ldr	r3, [sp, #4]
 8008684:	0084      	lsls	r4, r0, #2
 8008686:	191b      	adds	r3, r3, r4
 8008688:	0034      	movs	r4, r6
 800868a:	9302      	str	r3, [sp, #8]
 800868c:	6933      	ldr	r3, [r6, #16]
 800868e:	3414      	adds	r4, #20
 8008690:	0099      	lsls	r1, r3, #2
 8008692:	1863      	adds	r3, r4, r1
 8008694:	9303      	str	r3, [sp, #12]
 8008696:	0013      	movs	r3, r2
 8008698:	3314      	adds	r3, #20
 800869a:	469c      	mov	ip, r3
 800869c:	9305      	str	r3, [sp, #20]
 800869e:	9b01      	ldr	r3, [sp, #4]
 80086a0:	9304      	str	r3, [sp, #16]
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	cc02      	ldmia	r4!, {r1}
 80086a6:	cb20      	ldmia	r3!, {r5}
 80086a8:	9304      	str	r3, [sp, #16]
 80086aa:	b2ab      	uxth	r3, r5
 80086ac:	19df      	adds	r7, r3, r7
 80086ae:	b28b      	uxth	r3, r1
 80086b0:	1afb      	subs	r3, r7, r3
 80086b2:	0c09      	lsrs	r1, r1, #16
 80086b4:	0c2d      	lsrs	r5, r5, #16
 80086b6:	1a6d      	subs	r5, r5, r1
 80086b8:	1419      	asrs	r1, r3, #16
 80086ba:	186d      	adds	r5, r5, r1
 80086bc:	4661      	mov	r1, ip
 80086be:	142f      	asrs	r7, r5, #16
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	042d      	lsls	r5, r5, #16
 80086c4:	432b      	orrs	r3, r5
 80086c6:	c108      	stmia	r1!, {r3}
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	468c      	mov	ip, r1
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	d8e8      	bhi.n	80086a2 <__mdiff+0x8a>
 80086d0:	0031      	movs	r1, r6
 80086d2:	9c03      	ldr	r4, [sp, #12]
 80086d4:	3115      	adds	r1, #21
 80086d6:	2304      	movs	r3, #4
 80086d8:	428c      	cmp	r4, r1
 80086da:	d304      	bcc.n	80086e6 <__mdiff+0xce>
 80086dc:	1ba3      	subs	r3, r4, r6
 80086de:	3b15      	subs	r3, #21
 80086e0:	089b      	lsrs	r3, r3, #2
 80086e2:	3301      	adds	r3, #1
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	9901      	ldr	r1, [sp, #4]
 80086e8:	18cc      	adds	r4, r1, r3
 80086ea:	9905      	ldr	r1, [sp, #20]
 80086ec:	0026      	movs	r6, r4
 80086ee:	18cb      	adds	r3, r1, r3
 80086f0:	469c      	mov	ip, r3
 80086f2:	9902      	ldr	r1, [sp, #8]
 80086f4:	428e      	cmp	r6, r1
 80086f6:	d310      	bcc.n	800871a <__mdiff+0x102>
 80086f8:	9e02      	ldr	r6, [sp, #8]
 80086fa:	1ee1      	subs	r1, r4, #3
 80086fc:	2500      	movs	r5, #0
 80086fe:	428e      	cmp	r6, r1
 8008700:	d304      	bcc.n	800870c <__mdiff+0xf4>
 8008702:	0031      	movs	r1, r6
 8008704:	3103      	adds	r1, #3
 8008706:	1b0c      	subs	r4, r1, r4
 8008708:	08a4      	lsrs	r4, r4, #2
 800870a:	00a5      	lsls	r5, r4, #2
 800870c:	195b      	adds	r3, r3, r5
 800870e:	3b04      	subs	r3, #4
 8008710:	6819      	ldr	r1, [r3, #0]
 8008712:	2900      	cmp	r1, #0
 8008714:	d00f      	beq.n	8008736 <__mdiff+0x11e>
 8008716:	6110      	str	r0, [r2, #16]
 8008718:	e797      	b.n	800864a <__mdiff+0x32>
 800871a:	ce02      	ldmia	r6!, {r1}
 800871c:	b28d      	uxth	r5, r1
 800871e:	19ed      	adds	r5, r5, r7
 8008720:	0c0f      	lsrs	r7, r1, #16
 8008722:	1429      	asrs	r1, r5, #16
 8008724:	1879      	adds	r1, r7, r1
 8008726:	140f      	asrs	r7, r1, #16
 8008728:	b2ad      	uxth	r5, r5
 800872a:	0409      	lsls	r1, r1, #16
 800872c:	430d      	orrs	r5, r1
 800872e:	4661      	mov	r1, ip
 8008730:	c120      	stmia	r1!, {r5}
 8008732:	468c      	mov	ip, r1
 8008734:	e7dd      	b.n	80086f2 <__mdiff+0xda>
 8008736:	3801      	subs	r0, #1
 8008738:	e7e9      	b.n	800870e <__mdiff+0xf6>
 800873a:	46c0      	nop			; (mov r8, r8)
 800873c:	0800a0df 	.word	0x0800a0df
 8008740:	00000232 	.word	0x00000232
 8008744:	0800a0f0 	.word	0x0800a0f0

08008748 <__d2b>:
 8008748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800874a:	2101      	movs	r1, #1
 800874c:	0014      	movs	r4, r2
 800874e:	001e      	movs	r6, r3
 8008750:	9f08      	ldr	r7, [sp, #32]
 8008752:	f7ff fcc1 	bl	80080d8 <_Balloc>
 8008756:	1e05      	subs	r5, r0, #0
 8008758:	d105      	bne.n	8008766 <__d2b+0x1e>
 800875a:	0002      	movs	r2, r0
 800875c:	4b26      	ldr	r3, [pc, #152]	; (80087f8 <__d2b+0xb0>)
 800875e:	4927      	ldr	r1, [pc, #156]	; (80087fc <__d2b+0xb4>)
 8008760:	4827      	ldr	r0, [pc, #156]	; (8008800 <__d2b+0xb8>)
 8008762:	f000 fad7 	bl	8008d14 <__assert_func>
 8008766:	0333      	lsls	r3, r6, #12
 8008768:	0076      	lsls	r6, r6, #1
 800876a:	0b1b      	lsrs	r3, r3, #12
 800876c:	0d76      	lsrs	r6, r6, #21
 800876e:	d124      	bne.n	80087ba <__d2b+0x72>
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	2c00      	cmp	r4, #0
 8008774:	d027      	beq.n	80087c6 <__d2b+0x7e>
 8008776:	4668      	mov	r0, sp
 8008778:	9400      	str	r4, [sp, #0]
 800877a:	f7ff fd73 	bl	8008264 <__lo0bits>
 800877e:	9c00      	ldr	r4, [sp, #0]
 8008780:	2800      	cmp	r0, #0
 8008782:	d01e      	beq.n	80087c2 <__d2b+0x7a>
 8008784:	9b01      	ldr	r3, [sp, #4]
 8008786:	2120      	movs	r1, #32
 8008788:	001a      	movs	r2, r3
 800878a:	1a09      	subs	r1, r1, r0
 800878c:	408a      	lsls	r2, r1
 800878e:	40c3      	lsrs	r3, r0
 8008790:	4322      	orrs	r2, r4
 8008792:	616a      	str	r2, [r5, #20]
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	9c01      	ldr	r4, [sp, #4]
 8008798:	61ac      	str	r4, [r5, #24]
 800879a:	1e63      	subs	r3, r4, #1
 800879c:	419c      	sbcs	r4, r3
 800879e:	3401      	adds	r4, #1
 80087a0:	612c      	str	r4, [r5, #16]
 80087a2:	2e00      	cmp	r6, #0
 80087a4:	d018      	beq.n	80087d8 <__d2b+0x90>
 80087a6:	4b17      	ldr	r3, [pc, #92]	; (8008804 <__d2b+0xbc>)
 80087a8:	18f6      	adds	r6, r6, r3
 80087aa:	2335      	movs	r3, #53	; 0x35
 80087ac:	1836      	adds	r6, r6, r0
 80087ae:	1a18      	subs	r0, r3, r0
 80087b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b2:	603e      	str	r6, [r7, #0]
 80087b4:	6018      	str	r0, [r3, #0]
 80087b6:	0028      	movs	r0, r5
 80087b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087ba:	2280      	movs	r2, #128	; 0x80
 80087bc:	0352      	lsls	r2, r2, #13
 80087be:	4313      	orrs	r3, r2
 80087c0:	e7d6      	b.n	8008770 <__d2b+0x28>
 80087c2:	616c      	str	r4, [r5, #20]
 80087c4:	e7e7      	b.n	8008796 <__d2b+0x4e>
 80087c6:	a801      	add	r0, sp, #4
 80087c8:	f7ff fd4c 	bl	8008264 <__lo0bits>
 80087cc:	2401      	movs	r4, #1
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	612c      	str	r4, [r5, #16]
 80087d2:	616b      	str	r3, [r5, #20]
 80087d4:	3020      	adds	r0, #32
 80087d6:	e7e4      	b.n	80087a2 <__d2b+0x5a>
 80087d8:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <__d2b+0xc0>)
 80087da:	18c0      	adds	r0, r0, r3
 80087dc:	4b0b      	ldr	r3, [pc, #44]	; (800880c <__d2b+0xc4>)
 80087de:	6038      	str	r0, [r7, #0]
 80087e0:	18e3      	adds	r3, r4, r3
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	18eb      	adds	r3, r5, r3
 80087e6:	6958      	ldr	r0, [r3, #20]
 80087e8:	f7ff fd22 	bl	8008230 <__hi0bits>
 80087ec:	0164      	lsls	r4, r4, #5
 80087ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f0:	1a24      	subs	r4, r4, r0
 80087f2:	601c      	str	r4, [r3, #0]
 80087f4:	e7df      	b.n	80087b6 <__d2b+0x6e>
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	0800a0df 	.word	0x0800a0df
 80087fc:	0000030a 	.word	0x0000030a
 8008800:	0800a0f0 	.word	0x0800a0f0
 8008804:	fffffbcd 	.word	0xfffffbcd
 8008808:	fffffbce 	.word	0xfffffbce
 800880c:	3fffffff 	.word	0x3fffffff

08008810 <_calloc_r>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	0c13      	lsrs	r3, r2, #16
 8008814:	0c0d      	lsrs	r5, r1, #16
 8008816:	d11e      	bne.n	8008856 <_calloc_r+0x46>
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10c      	bne.n	8008836 <_calloc_r+0x26>
 800881c:	b289      	uxth	r1, r1
 800881e:	b294      	uxth	r4, r2
 8008820:	434c      	muls	r4, r1
 8008822:	0021      	movs	r1, r4
 8008824:	f000 f88c 	bl	8008940 <_malloc_r>
 8008828:	1e05      	subs	r5, r0, #0
 800882a:	d01b      	beq.n	8008864 <_calloc_r+0x54>
 800882c:	0022      	movs	r2, r4
 800882e:	2100      	movs	r1, #0
 8008830:	f7fe f8f4 	bl	8006a1c <memset>
 8008834:	e016      	b.n	8008864 <_calloc_r+0x54>
 8008836:	1c1d      	adds	r5, r3, #0
 8008838:	1c0b      	adds	r3, r1, #0
 800883a:	b292      	uxth	r2, r2
 800883c:	b289      	uxth	r1, r1
 800883e:	b29c      	uxth	r4, r3
 8008840:	4351      	muls	r1, r2
 8008842:	b2ab      	uxth	r3, r5
 8008844:	4363      	muls	r3, r4
 8008846:	0c0c      	lsrs	r4, r1, #16
 8008848:	191c      	adds	r4, r3, r4
 800884a:	0c22      	lsrs	r2, r4, #16
 800884c:	d107      	bne.n	800885e <_calloc_r+0x4e>
 800884e:	0424      	lsls	r4, r4, #16
 8008850:	b289      	uxth	r1, r1
 8008852:	430c      	orrs	r4, r1
 8008854:	e7e5      	b.n	8008822 <_calloc_r+0x12>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <_calloc_r+0x4e>
 800885a:	1c13      	adds	r3, r2, #0
 800885c:	e7ed      	b.n	800883a <_calloc_r+0x2a>
 800885e:	230c      	movs	r3, #12
 8008860:	2500      	movs	r5, #0
 8008862:	6003      	str	r3, [r0, #0]
 8008864:	0028      	movs	r0, r5
 8008866:	bd70      	pop	{r4, r5, r6, pc}

08008868 <_free_r>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	0005      	movs	r5, r0
 800886c:	2900      	cmp	r1, #0
 800886e:	d010      	beq.n	8008892 <_free_r+0x2a>
 8008870:	1f0c      	subs	r4, r1, #4
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	da00      	bge.n	800887a <_free_r+0x12>
 8008878:	18e4      	adds	r4, r4, r3
 800887a:	0028      	movs	r0, r5
 800887c:	f000 fa9e 	bl	8008dbc <__malloc_lock>
 8008880:	4a1d      	ldr	r2, [pc, #116]	; (80088f8 <_free_r+0x90>)
 8008882:	6813      	ldr	r3, [r2, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d105      	bne.n	8008894 <_free_r+0x2c>
 8008888:	6063      	str	r3, [r4, #4]
 800888a:	6014      	str	r4, [r2, #0]
 800888c:	0028      	movs	r0, r5
 800888e:	f000 fa9d 	bl	8008dcc <__malloc_unlock>
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	42a3      	cmp	r3, r4
 8008896:	d908      	bls.n	80088aa <_free_r+0x42>
 8008898:	6821      	ldr	r1, [r4, #0]
 800889a:	1860      	adds	r0, r4, r1
 800889c:	4283      	cmp	r3, r0
 800889e:	d1f3      	bne.n	8008888 <_free_r+0x20>
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	1841      	adds	r1, r0, r1
 80088a6:	6021      	str	r1, [r4, #0]
 80088a8:	e7ee      	b.n	8008888 <_free_r+0x20>
 80088aa:	001a      	movs	r2, r3
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <_free_r+0x4e>
 80088b2:	42a3      	cmp	r3, r4
 80088b4:	d9f9      	bls.n	80088aa <_free_r+0x42>
 80088b6:	6811      	ldr	r1, [r2, #0]
 80088b8:	1850      	adds	r0, r2, r1
 80088ba:	42a0      	cmp	r0, r4
 80088bc:	d10b      	bne.n	80088d6 <_free_r+0x6e>
 80088be:	6820      	ldr	r0, [r4, #0]
 80088c0:	1809      	adds	r1, r1, r0
 80088c2:	1850      	adds	r0, r2, r1
 80088c4:	6011      	str	r1, [r2, #0]
 80088c6:	4283      	cmp	r3, r0
 80088c8:	d1e0      	bne.n	800888c <_free_r+0x24>
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	1841      	adds	r1, r0, r1
 80088d0:	6011      	str	r1, [r2, #0]
 80088d2:	6053      	str	r3, [r2, #4]
 80088d4:	e7da      	b.n	800888c <_free_r+0x24>
 80088d6:	42a0      	cmp	r0, r4
 80088d8:	d902      	bls.n	80088e0 <_free_r+0x78>
 80088da:	230c      	movs	r3, #12
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	e7d5      	b.n	800888c <_free_r+0x24>
 80088e0:	6821      	ldr	r1, [r4, #0]
 80088e2:	1860      	adds	r0, r4, r1
 80088e4:	4283      	cmp	r3, r0
 80088e6:	d103      	bne.n	80088f0 <_free_r+0x88>
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	1841      	adds	r1, r0, r1
 80088ee:	6021      	str	r1, [r4, #0]
 80088f0:	6063      	str	r3, [r4, #4]
 80088f2:	6054      	str	r4, [r2, #4]
 80088f4:	e7ca      	b.n	800888c <_free_r+0x24>
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	20000368 	.word	0x20000368

080088fc <sbrk_aligned>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	4e0f      	ldr	r6, [pc, #60]	; (800893c <sbrk_aligned+0x40>)
 8008900:	000d      	movs	r5, r1
 8008902:	6831      	ldr	r1, [r6, #0]
 8008904:	0004      	movs	r4, r0
 8008906:	2900      	cmp	r1, #0
 8008908:	d102      	bne.n	8008910 <sbrk_aligned+0x14>
 800890a:	f000 f9f1 	bl	8008cf0 <_sbrk_r>
 800890e:	6030      	str	r0, [r6, #0]
 8008910:	0029      	movs	r1, r5
 8008912:	0020      	movs	r0, r4
 8008914:	f000 f9ec 	bl	8008cf0 <_sbrk_r>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d00a      	beq.n	8008932 <sbrk_aligned+0x36>
 800891c:	2303      	movs	r3, #3
 800891e:	1cc5      	adds	r5, r0, #3
 8008920:	439d      	bics	r5, r3
 8008922:	42a8      	cmp	r0, r5
 8008924:	d007      	beq.n	8008936 <sbrk_aligned+0x3a>
 8008926:	1a29      	subs	r1, r5, r0
 8008928:	0020      	movs	r0, r4
 800892a:	f000 f9e1 	bl	8008cf0 <_sbrk_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d101      	bne.n	8008936 <sbrk_aligned+0x3a>
 8008932:	2501      	movs	r5, #1
 8008934:	426d      	negs	r5, r5
 8008936:	0028      	movs	r0, r5
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	46c0      	nop			; (mov r8, r8)
 800893c:	2000036c 	.word	0x2000036c

08008940 <_malloc_r>:
 8008940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008942:	2203      	movs	r2, #3
 8008944:	1ccb      	adds	r3, r1, #3
 8008946:	4393      	bics	r3, r2
 8008948:	3308      	adds	r3, #8
 800894a:	0006      	movs	r6, r0
 800894c:	001f      	movs	r7, r3
 800894e:	2b0c      	cmp	r3, #12
 8008950:	d232      	bcs.n	80089b8 <_malloc_r+0x78>
 8008952:	270c      	movs	r7, #12
 8008954:	42b9      	cmp	r1, r7
 8008956:	d831      	bhi.n	80089bc <_malloc_r+0x7c>
 8008958:	0030      	movs	r0, r6
 800895a:	f000 fa2f 	bl	8008dbc <__malloc_lock>
 800895e:	4d32      	ldr	r5, [pc, #200]	; (8008a28 <_malloc_r+0xe8>)
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	001c      	movs	r4, r3
 8008964:	2c00      	cmp	r4, #0
 8008966:	d12e      	bne.n	80089c6 <_malloc_r+0x86>
 8008968:	0039      	movs	r1, r7
 800896a:	0030      	movs	r0, r6
 800896c:	f7ff ffc6 	bl	80088fc <sbrk_aligned>
 8008970:	0004      	movs	r4, r0
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	d11e      	bne.n	80089b4 <_malloc_r+0x74>
 8008976:	682c      	ldr	r4, [r5, #0]
 8008978:	0025      	movs	r5, r4
 800897a:	2d00      	cmp	r5, #0
 800897c:	d14a      	bne.n	8008a14 <_malloc_r+0xd4>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	0029      	movs	r1, r5
 8008982:	18e3      	adds	r3, r4, r3
 8008984:	0030      	movs	r0, r6
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	f000 f9b2 	bl	8008cf0 <_sbrk_r>
 800898c:	9b01      	ldr	r3, [sp, #4]
 800898e:	4283      	cmp	r3, r0
 8008990:	d143      	bne.n	8008a1a <_malloc_r+0xda>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	3703      	adds	r7, #3
 8008996:	1aff      	subs	r7, r7, r3
 8008998:	2303      	movs	r3, #3
 800899a:	439f      	bics	r7, r3
 800899c:	3708      	adds	r7, #8
 800899e:	2f0c      	cmp	r7, #12
 80089a0:	d200      	bcs.n	80089a4 <_malloc_r+0x64>
 80089a2:	270c      	movs	r7, #12
 80089a4:	0039      	movs	r1, r7
 80089a6:	0030      	movs	r0, r6
 80089a8:	f7ff ffa8 	bl	80088fc <sbrk_aligned>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d034      	beq.n	8008a1a <_malloc_r+0xda>
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	19df      	adds	r7, r3, r7
 80089b4:	6027      	str	r7, [r4, #0]
 80089b6:	e013      	b.n	80089e0 <_malloc_r+0xa0>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dacb      	bge.n	8008954 <_malloc_r+0x14>
 80089bc:	230c      	movs	r3, #12
 80089be:	2500      	movs	r5, #0
 80089c0:	6033      	str	r3, [r6, #0]
 80089c2:	0028      	movs	r0, r5
 80089c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	1bd1      	subs	r1, r2, r7
 80089ca:	d420      	bmi.n	8008a0e <_malloc_r+0xce>
 80089cc:	290b      	cmp	r1, #11
 80089ce:	d917      	bls.n	8008a00 <_malloc_r+0xc0>
 80089d0:	19e2      	adds	r2, r4, r7
 80089d2:	6027      	str	r7, [r4, #0]
 80089d4:	42a3      	cmp	r3, r4
 80089d6:	d111      	bne.n	80089fc <_malloc_r+0xbc>
 80089d8:	602a      	str	r2, [r5, #0]
 80089da:	6863      	ldr	r3, [r4, #4]
 80089dc:	6011      	str	r1, [r2, #0]
 80089de:	6053      	str	r3, [r2, #4]
 80089e0:	0030      	movs	r0, r6
 80089e2:	0025      	movs	r5, r4
 80089e4:	f000 f9f2 	bl	8008dcc <__malloc_unlock>
 80089e8:	2207      	movs	r2, #7
 80089ea:	350b      	adds	r5, #11
 80089ec:	1d23      	adds	r3, r4, #4
 80089ee:	4395      	bics	r5, r2
 80089f0:	1aea      	subs	r2, r5, r3
 80089f2:	429d      	cmp	r5, r3
 80089f4:	d0e5      	beq.n	80089c2 <_malloc_r+0x82>
 80089f6:	1b5b      	subs	r3, r3, r5
 80089f8:	50a3      	str	r3, [r4, r2]
 80089fa:	e7e2      	b.n	80089c2 <_malloc_r+0x82>
 80089fc:	605a      	str	r2, [r3, #4]
 80089fe:	e7ec      	b.n	80089da <_malloc_r+0x9a>
 8008a00:	6862      	ldr	r2, [r4, #4]
 8008a02:	42a3      	cmp	r3, r4
 8008a04:	d101      	bne.n	8008a0a <_malloc_r+0xca>
 8008a06:	602a      	str	r2, [r5, #0]
 8008a08:	e7ea      	b.n	80089e0 <_malloc_r+0xa0>
 8008a0a:	605a      	str	r2, [r3, #4]
 8008a0c:	e7e8      	b.n	80089e0 <_malloc_r+0xa0>
 8008a0e:	0023      	movs	r3, r4
 8008a10:	6864      	ldr	r4, [r4, #4]
 8008a12:	e7a7      	b.n	8008964 <_malloc_r+0x24>
 8008a14:	002c      	movs	r4, r5
 8008a16:	686d      	ldr	r5, [r5, #4]
 8008a18:	e7af      	b.n	800897a <_malloc_r+0x3a>
 8008a1a:	230c      	movs	r3, #12
 8008a1c:	0030      	movs	r0, r6
 8008a1e:	6033      	str	r3, [r6, #0]
 8008a20:	f000 f9d4 	bl	8008dcc <__malloc_unlock>
 8008a24:	e7cd      	b.n	80089c2 <_malloc_r+0x82>
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	20000368 	.word	0x20000368

08008a2c <__ssputs_r>:
 8008a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a2e:	688e      	ldr	r6, [r1, #8]
 8008a30:	b085      	sub	sp, #20
 8008a32:	0007      	movs	r7, r0
 8008a34:	000c      	movs	r4, r1
 8008a36:	9203      	str	r2, [sp, #12]
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	429e      	cmp	r6, r3
 8008a3c:	d83c      	bhi.n	8008ab8 <__ssputs_r+0x8c>
 8008a3e:	2390      	movs	r3, #144	; 0x90
 8008a40:	898a      	ldrh	r2, [r1, #12]
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	421a      	tst	r2, r3
 8008a46:	d034      	beq.n	8008ab2 <__ssputs_r+0x86>
 8008a48:	6909      	ldr	r1, [r1, #16]
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	6960      	ldr	r0, [r4, #20]
 8008a4e:	1a5b      	subs	r3, r3, r1
 8008a50:	9302      	str	r3, [sp, #8]
 8008a52:	2303      	movs	r3, #3
 8008a54:	4343      	muls	r3, r0
 8008a56:	0fdd      	lsrs	r5, r3, #31
 8008a58:	18ed      	adds	r5, r5, r3
 8008a5a:	9b01      	ldr	r3, [sp, #4]
 8008a5c:	9802      	ldr	r0, [sp, #8]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	181b      	adds	r3, r3, r0
 8008a62:	106d      	asrs	r5, r5, #1
 8008a64:	42ab      	cmp	r3, r5
 8008a66:	d900      	bls.n	8008a6a <__ssputs_r+0x3e>
 8008a68:	001d      	movs	r5, r3
 8008a6a:	0553      	lsls	r3, r2, #21
 8008a6c:	d532      	bpl.n	8008ad4 <__ssputs_r+0xa8>
 8008a6e:	0029      	movs	r1, r5
 8008a70:	0038      	movs	r0, r7
 8008a72:	f7ff ff65 	bl	8008940 <_malloc_r>
 8008a76:	1e06      	subs	r6, r0, #0
 8008a78:	d109      	bne.n	8008a8e <__ssputs_r+0x62>
 8008a7a:	230c      	movs	r3, #12
 8008a7c:	603b      	str	r3, [r7, #0]
 8008a7e:	2340      	movs	r3, #64	; 0x40
 8008a80:	2001      	movs	r0, #1
 8008a82:	89a2      	ldrh	r2, [r4, #12]
 8008a84:	4240      	negs	r0, r0
 8008a86:	4313      	orrs	r3, r2
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	b005      	add	sp, #20
 8008a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a8e:	9a02      	ldr	r2, [sp, #8]
 8008a90:	6921      	ldr	r1, [r4, #16]
 8008a92:	f7ff fb18 	bl	80080c6 <memcpy>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	4a14      	ldr	r2, [pc, #80]	; (8008aec <__ssputs_r+0xc0>)
 8008a9a:	401a      	ands	r2, r3
 8008a9c:	2380      	movs	r3, #128	; 0x80
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	9b02      	ldr	r3, [sp, #8]
 8008aa4:	6126      	str	r6, [r4, #16]
 8008aa6:	18f6      	adds	r6, r6, r3
 8008aa8:	6026      	str	r6, [r4, #0]
 8008aaa:	6165      	str	r5, [r4, #20]
 8008aac:	9e01      	ldr	r6, [sp, #4]
 8008aae:	1aed      	subs	r5, r5, r3
 8008ab0:	60a5      	str	r5, [r4, #8]
 8008ab2:	9b01      	ldr	r3, [sp, #4]
 8008ab4:	429e      	cmp	r6, r3
 8008ab6:	d900      	bls.n	8008aba <__ssputs_r+0x8e>
 8008ab8:	9e01      	ldr	r6, [sp, #4]
 8008aba:	0032      	movs	r2, r6
 8008abc:	9903      	ldr	r1, [sp, #12]
 8008abe:	6820      	ldr	r0, [r4, #0]
 8008ac0:	f000 f968 	bl	8008d94 <memmove>
 8008ac4:	68a3      	ldr	r3, [r4, #8]
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	1b9b      	subs	r3, r3, r6
 8008aca:	60a3      	str	r3, [r4, #8]
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	199e      	adds	r6, r3, r6
 8008ad0:	6026      	str	r6, [r4, #0]
 8008ad2:	e7da      	b.n	8008a8a <__ssputs_r+0x5e>
 8008ad4:	002a      	movs	r2, r5
 8008ad6:	0038      	movs	r0, r7
 8008ad8:	f000 f980 	bl	8008ddc <_realloc_r>
 8008adc:	1e06      	subs	r6, r0, #0
 8008ade:	d1e0      	bne.n	8008aa2 <__ssputs_r+0x76>
 8008ae0:	0038      	movs	r0, r7
 8008ae2:	6921      	ldr	r1, [r4, #16]
 8008ae4:	f7ff fec0 	bl	8008868 <_free_r>
 8008ae8:	e7c7      	b.n	8008a7a <__ssputs_r+0x4e>
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	fffffb7f 	.word	0xfffffb7f

08008af0 <_svfiprintf_r>:
 8008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af2:	b0a1      	sub	sp, #132	; 0x84
 8008af4:	9003      	str	r0, [sp, #12]
 8008af6:	001d      	movs	r5, r3
 8008af8:	898b      	ldrh	r3, [r1, #12]
 8008afa:	000f      	movs	r7, r1
 8008afc:	0016      	movs	r6, r2
 8008afe:	061b      	lsls	r3, r3, #24
 8008b00:	d511      	bpl.n	8008b26 <_svfiprintf_r+0x36>
 8008b02:	690b      	ldr	r3, [r1, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10e      	bne.n	8008b26 <_svfiprintf_r+0x36>
 8008b08:	2140      	movs	r1, #64	; 0x40
 8008b0a:	f7ff ff19 	bl	8008940 <_malloc_r>
 8008b0e:	6038      	str	r0, [r7, #0]
 8008b10:	6138      	str	r0, [r7, #16]
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d105      	bne.n	8008b22 <_svfiprintf_r+0x32>
 8008b16:	230c      	movs	r3, #12
 8008b18:	9a03      	ldr	r2, [sp, #12]
 8008b1a:	3801      	subs	r0, #1
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	b021      	add	sp, #132	; 0x84
 8008b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b22:	2340      	movs	r3, #64	; 0x40
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	2300      	movs	r3, #0
 8008b28:	ac08      	add	r4, sp, #32
 8008b2a:	6163      	str	r3, [r4, #20]
 8008b2c:	3320      	adds	r3, #32
 8008b2e:	7663      	strb	r3, [r4, #25]
 8008b30:	3310      	adds	r3, #16
 8008b32:	76a3      	strb	r3, [r4, #26]
 8008b34:	9507      	str	r5, [sp, #28]
 8008b36:	0035      	movs	r5, r6
 8008b38:	782b      	ldrb	r3, [r5, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <_svfiprintf_r+0x52>
 8008b3e:	2b25      	cmp	r3, #37	; 0x25
 8008b40:	d147      	bne.n	8008bd2 <_svfiprintf_r+0xe2>
 8008b42:	1bab      	subs	r3, r5, r6
 8008b44:	9305      	str	r3, [sp, #20]
 8008b46:	42b5      	cmp	r5, r6
 8008b48:	d00c      	beq.n	8008b64 <_svfiprintf_r+0x74>
 8008b4a:	0032      	movs	r2, r6
 8008b4c:	0039      	movs	r1, r7
 8008b4e:	9803      	ldr	r0, [sp, #12]
 8008b50:	f7ff ff6c 	bl	8008a2c <__ssputs_r>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d100      	bne.n	8008b5a <_svfiprintf_r+0x6a>
 8008b58:	e0ae      	b.n	8008cb8 <_svfiprintf_r+0x1c8>
 8008b5a:	6962      	ldr	r2, [r4, #20]
 8008b5c:	9b05      	ldr	r3, [sp, #20]
 8008b5e:	4694      	mov	ip, r2
 8008b60:	4463      	add	r3, ip
 8008b62:	6163      	str	r3, [r4, #20]
 8008b64:	782b      	ldrb	r3, [r5, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d100      	bne.n	8008b6c <_svfiprintf_r+0x7c>
 8008b6a:	e0a5      	b.n	8008cb8 <_svfiprintf_r+0x1c8>
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	2300      	movs	r3, #0
 8008b70:	4252      	negs	r2, r2
 8008b72:	6062      	str	r2, [r4, #4]
 8008b74:	a904      	add	r1, sp, #16
 8008b76:	3254      	adds	r2, #84	; 0x54
 8008b78:	1852      	adds	r2, r2, r1
 8008b7a:	1c6e      	adds	r6, r5, #1
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	60e3      	str	r3, [r4, #12]
 8008b80:	60a3      	str	r3, [r4, #8]
 8008b82:	7013      	strb	r3, [r2, #0]
 8008b84:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b86:	2205      	movs	r2, #5
 8008b88:	7831      	ldrb	r1, [r6, #0]
 8008b8a:	4854      	ldr	r0, [pc, #336]	; (8008cdc <_svfiprintf_r+0x1ec>)
 8008b8c:	f7ff fa90 	bl	80080b0 <memchr>
 8008b90:	1c75      	adds	r5, r6, #1
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d11f      	bne.n	8008bd6 <_svfiprintf_r+0xe6>
 8008b96:	6822      	ldr	r2, [r4, #0]
 8008b98:	06d3      	lsls	r3, r2, #27
 8008b9a:	d504      	bpl.n	8008ba6 <_svfiprintf_r+0xb6>
 8008b9c:	2353      	movs	r3, #83	; 0x53
 8008b9e:	a904      	add	r1, sp, #16
 8008ba0:	185b      	adds	r3, r3, r1
 8008ba2:	2120      	movs	r1, #32
 8008ba4:	7019      	strb	r1, [r3, #0]
 8008ba6:	0713      	lsls	r3, r2, #28
 8008ba8:	d504      	bpl.n	8008bb4 <_svfiprintf_r+0xc4>
 8008baa:	2353      	movs	r3, #83	; 0x53
 8008bac:	a904      	add	r1, sp, #16
 8008bae:	185b      	adds	r3, r3, r1
 8008bb0:	212b      	movs	r1, #43	; 0x2b
 8008bb2:	7019      	strb	r1, [r3, #0]
 8008bb4:	7833      	ldrb	r3, [r6, #0]
 8008bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb8:	d016      	beq.n	8008be8 <_svfiprintf_r+0xf8>
 8008bba:	0035      	movs	r5, r6
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	200a      	movs	r0, #10
 8008bc0:	68e3      	ldr	r3, [r4, #12]
 8008bc2:	782a      	ldrb	r2, [r5, #0]
 8008bc4:	1c6e      	adds	r6, r5, #1
 8008bc6:	3a30      	subs	r2, #48	; 0x30
 8008bc8:	2a09      	cmp	r2, #9
 8008bca:	d94e      	bls.n	8008c6a <_svfiprintf_r+0x17a>
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	d111      	bne.n	8008bf4 <_svfiprintf_r+0x104>
 8008bd0:	e017      	b.n	8008c02 <_svfiprintf_r+0x112>
 8008bd2:	3501      	adds	r5, #1
 8008bd4:	e7b0      	b.n	8008b38 <_svfiprintf_r+0x48>
 8008bd6:	4b41      	ldr	r3, [pc, #260]	; (8008cdc <_svfiprintf_r+0x1ec>)
 8008bd8:	6822      	ldr	r2, [r4, #0]
 8008bda:	1ac0      	subs	r0, r0, r3
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4083      	lsls	r3, r0
 8008be0:	4313      	orrs	r3, r2
 8008be2:	002e      	movs	r6, r5
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	e7ce      	b.n	8008b86 <_svfiprintf_r+0x96>
 8008be8:	9b07      	ldr	r3, [sp, #28]
 8008bea:	1d19      	adds	r1, r3, #4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	9107      	str	r1, [sp, #28]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	db01      	blt.n	8008bf8 <_svfiprintf_r+0x108>
 8008bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bf6:	e004      	b.n	8008c02 <_svfiprintf_r+0x112>
 8008bf8:	425b      	negs	r3, r3
 8008bfa:	60e3      	str	r3, [r4, #12]
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	782b      	ldrb	r3, [r5, #0]
 8008c04:	2b2e      	cmp	r3, #46	; 0x2e
 8008c06:	d10a      	bne.n	8008c1e <_svfiprintf_r+0x12e>
 8008c08:	786b      	ldrb	r3, [r5, #1]
 8008c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0c:	d135      	bne.n	8008c7a <_svfiprintf_r+0x18a>
 8008c0e:	9b07      	ldr	r3, [sp, #28]
 8008c10:	3502      	adds	r5, #2
 8008c12:	1d1a      	adds	r2, r3, #4
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	9207      	str	r2, [sp, #28]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	db2b      	blt.n	8008c74 <_svfiprintf_r+0x184>
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1e:	4e30      	ldr	r6, [pc, #192]	; (8008ce0 <_svfiprintf_r+0x1f0>)
 8008c20:	2203      	movs	r2, #3
 8008c22:	0030      	movs	r0, r6
 8008c24:	7829      	ldrb	r1, [r5, #0]
 8008c26:	f7ff fa43 	bl	80080b0 <memchr>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d006      	beq.n	8008c3c <_svfiprintf_r+0x14c>
 8008c2e:	2340      	movs	r3, #64	; 0x40
 8008c30:	1b80      	subs	r0, r0, r6
 8008c32:	4083      	lsls	r3, r0
 8008c34:	6822      	ldr	r2, [r4, #0]
 8008c36:	3501      	adds	r5, #1
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	7829      	ldrb	r1, [r5, #0]
 8008c3e:	2206      	movs	r2, #6
 8008c40:	4828      	ldr	r0, [pc, #160]	; (8008ce4 <_svfiprintf_r+0x1f4>)
 8008c42:	1c6e      	adds	r6, r5, #1
 8008c44:	7621      	strb	r1, [r4, #24]
 8008c46:	f7ff fa33 	bl	80080b0 <memchr>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d03c      	beq.n	8008cc8 <_svfiprintf_r+0x1d8>
 8008c4e:	4b26      	ldr	r3, [pc, #152]	; (8008ce8 <_svfiprintf_r+0x1f8>)
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d125      	bne.n	8008ca0 <_svfiprintf_r+0x1b0>
 8008c54:	2207      	movs	r2, #7
 8008c56:	9b07      	ldr	r3, [sp, #28]
 8008c58:	3307      	adds	r3, #7
 8008c5a:	4393      	bics	r3, r2
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	6963      	ldr	r3, [r4, #20]
 8008c62:	9a04      	ldr	r2, [sp, #16]
 8008c64:	189b      	adds	r3, r3, r2
 8008c66:	6163      	str	r3, [r4, #20]
 8008c68:	e765      	b.n	8008b36 <_svfiprintf_r+0x46>
 8008c6a:	4343      	muls	r3, r0
 8008c6c:	0035      	movs	r5, r6
 8008c6e:	2101      	movs	r1, #1
 8008c70:	189b      	adds	r3, r3, r2
 8008c72:	e7a6      	b.n	8008bc2 <_svfiprintf_r+0xd2>
 8008c74:	2301      	movs	r3, #1
 8008c76:	425b      	negs	r3, r3
 8008c78:	e7d0      	b.n	8008c1c <_svfiprintf_r+0x12c>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	200a      	movs	r0, #10
 8008c7e:	001a      	movs	r2, r3
 8008c80:	3501      	adds	r5, #1
 8008c82:	6063      	str	r3, [r4, #4]
 8008c84:	7829      	ldrb	r1, [r5, #0]
 8008c86:	1c6e      	adds	r6, r5, #1
 8008c88:	3930      	subs	r1, #48	; 0x30
 8008c8a:	2909      	cmp	r1, #9
 8008c8c:	d903      	bls.n	8008c96 <_svfiprintf_r+0x1a6>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0c5      	beq.n	8008c1e <_svfiprintf_r+0x12e>
 8008c92:	9209      	str	r2, [sp, #36]	; 0x24
 8008c94:	e7c3      	b.n	8008c1e <_svfiprintf_r+0x12e>
 8008c96:	4342      	muls	r2, r0
 8008c98:	0035      	movs	r5, r6
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	1852      	adds	r2, r2, r1
 8008c9e:	e7f1      	b.n	8008c84 <_svfiprintf_r+0x194>
 8008ca0:	ab07      	add	r3, sp, #28
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	003a      	movs	r2, r7
 8008ca6:	0021      	movs	r1, r4
 8008ca8:	4b10      	ldr	r3, [pc, #64]	; (8008cec <_svfiprintf_r+0x1fc>)
 8008caa:	9803      	ldr	r0, [sp, #12]
 8008cac:	f7fd ff68 	bl	8006b80 <_printf_float>
 8008cb0:	9004      	str	r0, [sp, #16]
 8008cb2:	9b04      	ldr	r3, [sp, #16]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	d1d3      	bne.n	8008c60 <_svfiprintf_r+0x170>
 8008cb8:	89bb      	ldrh	r3, [r7, #12]
 8008cba:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008cbc:	065b      	lsls	r3, r3, #25
 8008cbe:	d400      	bmi.n	8008cc2 <_svfiprintf_r+0x1d2>
 8008cc0:	e72d      	b.n	8008b1e <_svfiprintf_r+0x2e>
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	4240      	negs	r0, r0
 8008cc6:	e72a      	b.n	8008b1e <_svfiprintf_r+0x2e>
 8008cc8:	ab07      	add	r3, sp, #28
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	003a      	movs	r2, r7
 8008cce:	0021      	movs	r1, r4
 8008cd0:	4b06      	ldr	r3, [pc, #24]	; (8008cec <_svfiprintf_r+0x1fc>)
 8008cd2:	9803      	ldr	r0, [sp, #12]
 8008cd4:	f7fe fa06 	bl	80070e4 <_printf_i>
 8008cd8:	e7ea      	b.n	8008cb0 <_svfiprintf_r+0x1c0>
 8008cda:	46c0      	nop			; (mov r8, r8)
 8008cdc:	0800a24c 	.word	0x0800a24c
 8008ce0:	0800a252 	.word	0x0800a252
 8008ce4:	0800a256 	.word	0x0800a256
 8008ce8:	08006b81 	.word	0x08006b81
 8008cec:	08008a2d 	.word	0x08008a2d

08008cf0 <_sbrk_r>:
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	b570      	push	{r4, r5, r6, lr}
 8008cf4:	4d06      	ldr	r5, [pc, #24]	; (8008d10 <_sbrk_r+0x20>)
 8008cf6:	0004      	movs	r4, r0
 8008cf8:	0008      	movs	r0, r1
 8008cfa:	602b      	str	r3, [r5, #0]
 8008cfc:	f7fa fd02 	bl	8003704 <_sbrk>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d103      	bne.n	8008d0c <_sbrk_r+0x1c>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d000      	beq.n	8008d0c <_sbrk_r+0x1c>
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	bd70      	pop	{r4, r5, r6, pc}
 8008d0e:	46c0      	nop			; (mov r8, r8)
 8008d10:	20000370 	.word	0x20000370

08008d14 <__assert_func>:
 8008d14:	b530      	push	{r4, r5, lr}
 8008d16:	0014      	movs	r4, r2
 8008d18:	001a      	movs	r2, r3
 8008d1a:	4b09      	ldr	r3, [pc, #36]	; (8008d40 <__assert_func+0x2c>)
 8008d1c:	0005      	movs	r5, r0
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	b085      	sub	sp, #20
 8008d22:	68d8      	ldr	r0, [r3, #12]
 8008d24:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <__assert_func+0x30>)
 8008d26:	2c00      	cmp	r4, #0
 8008d28:	d101      	bne.n	8008d2e <__assert_func+0x1a>
 8008d2a:	4b07      	ldr	r3, [pc, #28]	; (8008d48 <__assert_func+0x34>)
 8008d2c:	001c      	movs	r4, r3
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	9100      	str	r1, [sp, #0]
 8008d32:	002b      	movs	r3, r5
 8008d34:	4905      	ldr	r1, [pc, #20]	; (8008d4c <__assert_func+0x38>)
 8008d36:	9402      	str	r4, [sp, #8]
 8008d38:	f000 f80a 	bl	8008d50 <fiprintf>
 8008d3c:	f000 faba 	bl	80092b4 <abort>
 8008d40:	2000000c 	.word	0x2000000c
 8008d44:	0800a25d 	.word	0x0800a25d
 8008d48:	0800a298 	.word	0x0800a298
 8008d4c:	0800a26a 	.word	0x0800a26a

08008d50 <fiprintf>:
 8008d50:	b40e      	push	{r1, r2, r3}
 8008d52:	b503      	push	{r0, r1, lr}
 8008d54:	0001      	movs	r1, r0
 8008d56:	ab03      	add	r3, sp, #12
 8008d58:	4804      	ldr	r0, [pc, #16]	; (8008d6c <fiprintf+0x1c>)
 8008d5a:	cb04      	ldmia	r3!, {r2}
 8008d5c:	6800      	ldr	r0, [r0, #0]
 8008d5e:	9301      	str	r3, [sp, #4]
 8008d60:	f000 f892 	bl	8008e88 <_vfiprintf_r>
 8008d64:	b002      	add	sp, #8
 8008d66:	bc08      	pop	{r3}
 8008d68:	b003      	add	sp, #12
 8008d6a:	4718      	bx	r3
 8008d6c:	2000000c 	.word	0x2000000c

08008d70 <__ascii_mbtowc>:
 8008d70:	b082      	sub	sp, #8
 8008d72:	2900      	cmp	r1, #0
 8008d74:	d100      	bne.n	8008d78 <__ascii_mbtowc+0x8>
 8008d76:	a901      	add	r1, sp, #4
 8008d78:	1e10      	subs	r0, r2, #0
 8008d7a:	d006      	beq.n	8008d8a <__ascii_mbtowc+0x1a>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d006      	beq.n	8008d8e <__ascii_mbtowc+0x1e>
 8008d80:	7813      	ldrb	r3, [r2, #0]
 8008d82:	600b      	str	r3, [r1, #0]
 8008d84:	7810      	ldrb	r0, [r2, #0]
 8008d86:	1e43      	subs	r3, r0, #1
 8008d88:	4198      	sbcs	r0, r3
 8008d8a:	b002      	add	sp, #8
 8008d8c:	4770      	bx	lr
 8008d8e:	2002      	movs	r0, #2
 8008d90:	4240      	negs	r0, r0
 8008d92:	e7fa      	b.n	8008d8a <__ascii_mbtowc+0x1a>

08008d94 <memmove>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	4288      	cmp	r0, r1
 8008d98:	d902      	bls.n	8008da0 <memmove+0xc>
 8008d9a:	188b      	adds	r3, r1, r2
 8008d9c:	4298      	cmp	r0, r3
 8008d9e:	d303      	bcc.n	8008da8 <memmove+0x14>
 8008da0:	2300      	movs	r3, #0
 8008da2:	e007      	b.n	8008db4 <memmove+0x20>
 8008da4:	5c8b      	ldrb	r3, [r1, r2]
 8008da6:	5483      	strb	r3, [r0, r2]
 8008da8:	3a01      	subs	r2, #1
 8008daa:	d2fb      	bcs.n	8008da4 <memmove+0x10>
 8008dac:	bd10      	pop	{r4, pc}
 8008dae:	5ccc      	ldrb	r4, [r1, r3]
 8008db0:	54c4      	strb	r4, [r0, r3]
 8008db2:	3301      	adds	r3, #1
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d1fa      	bne.n	8008dae <memmove+0x1a>
 8008db8:	e7f8      	b.n	8008dac <memmove+0x18>
	...

08008dbc <__malloc_lock>:
 8008dbc:	b510      	push	{r4, lr}
 8008dbe:	4802      	ldr	r0, [pc, #8]	; (8008dc8 <__malloc_lock+0xc>)
 8008dc0:	f000 fc4f 	bl	8009662 <__retarget_lock_acquire_recursive>
 8008dc4:	bd10      	pop	{r4, pc}
 8008dc6:	46c0      	nop			; (mov r8, r8)
 8008dc8:	20000374 	.word	0x20000374

08008dcc <__malloc_unlock>:
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	4802      	ldr	r0, [pc, #8]	; (8008dd8 <__malloc_unlock+0xc>)
 8008dd0:	f000 fc48 	bl	8009664 <__retarget_lock_release_recursive>
 8008dd4:	bd10      	pop	{r4, pc}
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	20000374 	.word	0x20000374

08008ddc <_realloc_r>:
 8008ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dde:	0007      	movs	r7, r0
 8008de0:	000e      	movs	r6, r1
 8008de2:	0014      	movs	r4, r2
 8008de4:	2900      	cmp	r1, #0
 8008de6:	d105      	bne.n	8008df4 <_realloc_r+0x18>
 8008de8:	0011      	movs	r1, r2
 8008dea:	f7ff fda9 	bl	8008940 <_malloc_r>
 8008dee:	0005      	movs	r5, r0
 8008df0:	0028      	movs	r0, r5
 8008df2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	d103      	bne.n	8008e00 <_realloc_r+0x24>
 8008df8:	f7ff fd36 	bl	8008868 <_free_r>
 8008dfc:	0025      	movs	r5, r4
 8008dfe:	e7f7      	b.n	8008df0 <_realloc_r+0x14>
 8008e00:	f000 fc9e 	bl	8009740 <_malloc_usable_size_r>
 8008e04:	9001      	str	r0, [sp, #4]
 8008e06:	4284      	cmp	r4, r0
 8008e08:	d803      	bhi.n	8008e12 <_realloc_r+0x36>
 8008e0a:	0035      	movs	r5, r6
 8008e0c:	0843      	lsrs	r3, r0, #1
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	d3ee      	bcc.n	8008df0 <_realloc_r+0x14>
 8008e12:	0021      	movs	r1, r4
 8008e14:	0038      	movs	r0, r7
 8008e16:	f7ff fd93 	bl	8008940 <_malloc_r>
 8008e1a:	1e05      	subs	r5, r0, #0
 8008e1c:	d0e8      	beq.n	8008df0 <_realloc_r+0x14>
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	0022      	movs	r2, r4
 8008e22:	429c      	cmp	r4, r3
 8008e24:	d900      	bls.n	8008e28 <_realloc_r+0x4c>
 8008e26:	001a      	movs	r2, r3
 8008e28:	0031      	movs	r1, r6
 8008e2a:	0028      	movs	r0, r5
 8008e2c:	f7ff f94b 	bl	80080c6 <memcpy>
 8008e30:	0031      	movs	r1, r6
 8008e32:	0038      	movs	r0, r7
 8008e34:	f7ff fd18 	bl	8008868 <_free_r>
 8008e38:	e7da      	b.n	8008df0 <_realloc_r+0x14>

08008e3a <__sfputc_r>:
 8008e3a:	6893      	ldr	r3, [r2, #8]
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	6093      	str	r3, [r2, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	da04      	bge.n	8008e50 <__sfputc_r+0x16>
 8008e46:	6994      	ldr	r4, [r2, #24]
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	db07      	blt.n	8008e5c <__sfputc_r+0x22>
 8008e4c:	290a      	cmp	r1, #10
 8008e4e:	d005      	beq.n	8008e5c <__sfputc_r+0x22>
 8008e50:	6813      	ldr	r3, [r2, #0]
 8008e52:	1c58      	adds	r0, r3, #1
 8008e54:	6010      	str	r0, [r2, #0]
 8008e56:	7019      	strb	r1, [r3, #0]
 8008e58:	0008      	movs	r0, r1
 8008e5a:	bd10      	pop	{r4, pc}
 8008e5c:	f000 f94e 	bl	80090fc <__swbuf_r>
 8008e60:	0001      	movs	r1, r0
 8008e62:	e7f9      	b.n	8008e58 <__sfputc_r+0x1e>

08008e64 <__sfputs_r>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	0006      	movs	r6, r0
 8008e68:	000f      	movs	r7, r1
 8008e6a:	0014      	movs	r4, r2
 8008e6c:	18d5      	adds	r5, r2, r3
 8008e6e:	42ac      	cmp	r4, r5
 8008e70:	d101      	bne.n	8008e76 <__sfputs_r+0x12>
 8008e72:	2000      	movs	r0, #0
 8008e74:	e007      	b.n	8008e86 <__sfputs_r+0x22>
 8008e76:	7821      	ldrb	r1, [r4, #0]
 8008e78:	003a      	movs	r2, r7
 8008e7a:	0030      	movs	r0, r6
 8008e7c:	f7ff ffdd 	bl	8008e3a <__sfputc_r>
 8008e80:	3401      	adds	r4, #1
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	d1f3      	bne.n	8008e6e <__sfputs_r+0xa>
 8008e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e88 <_vfiprintf_r>:
 8008e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e8a:	b0a1      	sub	sp, #132	; 0x84
 8008e8c:	0006      	movs	r6, r0
 8008e8e:	000c      	movs	r4, r1
 8008e90:	001f      	movs	r7, r3
 8008e92:	9203      	str	r2, [sp, #12]
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d004      	beq.n	8008ea2 <_vfiprintf_r+0x1a>
 8008e98:	6983      	ldr	r3, [r0, #24]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <_vfiprintf_r+0x1a>
 8008e9e:	f000 fb3f 	bl	8009520 <__sinit>
 8008ea2:	4b8e      	ldr	r3, [pc, #568]	; (80090dc <_vfiprintf_r+0x254>)
 8008ea4:	429c      	cmp	r4, r3
 8008ea6:	d11c      	bne.n	8008ee2 <_vfiprintf_r+0x5a>
 8008ea8:	6874      	ldr	r4, [r6, #4]
 8008eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eac:	07db      	lsls	r3, r3, #31
 8008eae:	d405      	bmi.n	8008ebc <_vfiprintf_r+0x34>
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	059b      	lsls	r3, r3, #22
 8008eb4:	d402      	bmi.n	8008ebc <_vfiprintf_r+0x34>
 8008eb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eb8:	f000 fbd3 	bl	8009662 <__retarget_lock_acquire_recursive>
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	071b      	lsls	r3, r3, #28
 8008ec0:	d502      	bpl.n	8008ec8 <_vfiprintf_r+0x40>
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d11d      	bne.n	8008f04 <_vfiprintf_r+0x7c>
 8008ec8:	0021      	movs	r1, r4
 8008eca:	0030      	movs	r0, r6
 8008ecc:	f000 f97a 	bl	80091c4 <__swsetup_r>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d017      	beq.n	8008f04 <_vfiprintf_r+0x7c>
 8008ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ed6:	07db      	lsls	r3, r3, #31
 8008ed8:	d50d      	bpl.n	8008ef6 <_vfiprintf_r+0x6e>
 8008eda:	2001      	movs	r0, #1
 8008edc:	4240      	negs	r0, r0
 8008ede:	b021      	add	sp, #132	; 0x84
 8008ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ee2:	4b7f      	ldr	r3, [pc, #508]	; (80090e0 <_vfiprintf_r+0x258>)
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	d101      	bne.n	8008eec <_vfiprintf_r+0x64>
 8008ee8:	68b4      	ldr	r4, [r6, #8]
 8008eea:	e7de      	b.n	8008eaa <_vfiprintf_r+0x22>
 8008eec:	4b7d      	ldr	r3, [pc, #500]	; (80090e4 <_vfiprintf_r+0x25c>)
 8008eee:	429c      	cmp	r4, r3
 8008ef0:	d1db      	bne.n	8008eaa <_vfiprintf_r+0x22>
 8008ef2:	68f4      	ldr	r4, [r6, #12]
 8008ef4:	e7d9      	b.n	8008eaa <_vfiprintf_r+0x22>
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	059b      	lsls	r3, r3, #22
 8008efa:	d4ee      	bmi.n	8008eda <_vfiprintf_r+0x52>
 8008efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008efe:	f000 fbb1 	bl	8009664 <__retarget_lock_release_recursive>
 8008f02:	e7ea      	b.n	8008eda <_vfiprintf_r+0x52>
 8008f04:	2300      	movs	r3, #0
 8008f06:	ad08      	add	r5, sp, #32
 8008f08:	616b      	str	r3, [r5, #20]
 8008f0a:	3320      	adds	r3, #32
 8008f0c:	766b      	strb	r3, [r5, #25]
 8008f0e:	3310      	adds	r3, #16
 8008f10:	76ab      	strb	r3, [r5, #26]
 8008f12:	9707      	str	r7, [sp, #28]
 8008f14:	9f03      	ldr	r7, [sp, #12]
 8008f16:	783b      	ldrb	r3, [r7, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <_vfiprintf_r+0x98>
 8008f1c:	2b25      	cmp	r3, #37	; 0x25
 8008f1e:	d14e      	bne.n	8008fbe <_vfiprintf_r+0x136>
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	1afb      	subs	r3, r7, r3
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	429f      	cmp	r7, r3
 8008f2a:	d00d      	beq.n	8008f48 <_vfiprintf_r+0xc0>
 8008f2c:	9b05      	ldr	r3, [sp, #20]
 8008f2e:	0021      	movs	r1, r4
 8008f30:	0030      	movs	r0, r6
 8008f32:	9a03      	ldr	r2, [sp, #12]
 8008f34:	f7ff ff96 	bl	8008e64 <__sfputs_r>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d100      	bne.n	8008f3e <_vfiprintf_r+0xb6>
 8008f3c:	e0b5      	b.n	80090aa <_vfiprintf_r+0x222>
 8008f3e:	696a      	ldr	r2, [r5, #20]
 8008f40:	9b05      	ldr	r3, [sp, #20]
 8008f42:	4694      	mov	ip, r2
 8008f44:	4463      	add	r3, ip
 8008f46:	616b      	str	r3, [r5, #20]
 8008f48:	783b      	ldrb	r3, [r7, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d100      	bne.n	8008f50 <_vfiprintf_r+0xc8>
 8008f4e:	e0ac      	b.n	80090aa <_vfiprintf_r+0x222>
 8008f50:	2201      	movs	r2, #1
 8008f52:	1c7b      	adds	r3, r7, #1
 8008f54:	9303      	str	r3, [sp, #12]
 8008f56:	2300      	movs	r3, #0
 8008f58:	4252      	negs	r2, r2
 8008f5a:	606a      	str	r2, [r5, #4]
 8008f5c:	a904      	add	r1, sp, #16
 8008f5e:	3254      	adds	r2, #84	; 0x54
 8008f60:	1852      	adds	r2, r2, r1
 8008f62:	602b      	str	r3, [r5, #0]
 8008f64:	60eb      	str	r3, [r5, #12]
 8008f66:	60ab      	str	r3, [r5, #8]
 8008f68:	7013      	strb	r3, [r2, #0]
 8008f6a:	65ab      	str	r3, [r5, #88]	; 0x58
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	2205      	movs	r2, #5
 8008f70:	7819      	ldrb	r1, [r3, #0]
 8008f72:	485d      	ldr	r0, [pc, #372]	; (80090e8 <_vfiprintf_r+0x260>)
 8008f74:	f7ff f89c 	bl	80080b0 <memchr>
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	1c5f      	adds	r7, r3, #1
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d120      	bne.n	8008fc2 <_vfiprintf_r+0x13a>
 8008f80:	682a      	ldr	r2, [r5, #0]
 8008f82:	06d3      	lsls	r3, r2, #27
 8008f84:	d504      	bpl.n	8008f90 <_vfiprintf_r+0x108>
 8008f86:	2353      	movs	r3, #83	; 0x53
 8008f88:	a904      	add	r1, sp, #16
 8008f8a:	185b      	adds	r3, r3, r1
 8008f8c:	2120      	movs	r1, #32
 8008f8e:	7019      	strb	r1, [r3, #0]
 8008f90:	0713      	lsls	r3, r2, #28
 8008f92:	d504      	bpl.n	8008f9e <_vfiprintf_r+0x116>
 8008f94:	2353      	movs	r3, #83	; 0x53
 8008f96:	a904      	add	r1, sp, #16
 8008f98:	185b      	adds	r3, r3, r1
 8008f9a:	212b      	movs	r1, #43	; 0x2b
 8008f9c:	7019      	strb	r1, [r3, #0]
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa4:	d016      	beq.n	8008fd4 <_vfiprintf_r+0x14c>
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	68eb      	ldr	r3, [r5, #12]
 8008faa:	9f03      	ldr	r7, [sp, #12]
 8008fac:	783a      	ldrb	r2, [r7, #0]
 8008fae:	1c78      	adds	r0, r7, #1
 8008fb0:	3a30      	subs	r2, #48	; 0x30
 8008fb2:	4684      	mov	ip, r0
 8008fb4:	2a09      	cmp	r2, #9
 8008fb6:	d94f      	bls.n	8009058 <_vfiprintf_r+0x1d0>
 8008fb8:	2900      	cmp	r1, #0
 8008fba:	d111      	bne.n	8008fe0 <_vfiprintf_r+0x158>
 8008fbc:	e017      	b.n	8008fee <_vfiprintf_r+0x166>
 8008fbe:	3701      	adds	r7, #1
 8008fc0:	e7a9      	b.n	8008f16 <_vfiprintf_r+0x8e>
 8008fc2:	4b49      	ldr	r3, [pc, #292]	; (80090e8 <_vfiprintf_r+0x260>)
 8008fc4:	682a      	ldr	r2, [r5, #0]
 8008fc6:	1ac0      	subs	r0, r0, r3
 8008fc8:	2301      	movs	r3, #1
 8008fca:	4083      	lsls	r3, r0
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	9703      	str	r7, [sp, #12]
 8008fd2:	e7cb      	b.n	8008f6c <_vfiprintf_r+0xe4>
 8008fd4:	9b07      	ldr	r3, [sp, #28]
 8008fd6:	1d19      	adds	r1, r3, #4
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	9107      	str	r1, [sp, #28]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	db01      	blt.n	8008fe4 <_vfiprintf_r+0x15c>
 8008fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fe2:	e004      	b.n	8008fee <_vfiprintf_r+0x166>
 8008fe4:	425b      	negs	r3, r3
 8008fe6:	60eb      	str	r3, [r5, #12]
 8008fe8:	2302      	movs	r3, #2
 8008fea:	4313      	orrs	r3, r2
 8008fec:	602b      	str	r3, [r5, #0]
 8008fee:	783b      	ldrb	r3, [r7, #0]
 8008ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ff2:	d10a      	bne.n	800900a <_vfiprintf_r+0x182>
 8008ff4:	787b      	ldrb	r3, [r7, #1]
 8008ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff8:	d137      	bne.n	800906a <_vfiprintf_r+0x1e2>
 8008ffa:	9b07      	ldr	r3, [sp, #28]
 8008ffc:	3702      	adds	r7, #2
 8008ffe:	1d1a      	adds	r2, r3, #4
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	9207      	str	r2, [sp, #28]
 8009004:	2b00      	cmp	r3, #0
 8009006:	db2d      	blt.n	8009064 <_vfiprintf_r+0x1dc>
 8009008:	9309      	str	r3, [sp, #36]	; 0x24
 800900a:	2203      	movs	r2, #3
 800900c:	7839      	ldrb	r1, [r7, #0]
 800900e:	4837      	ldr	r0, [pc, #220]	; (80090ec <_vfiprintf_r+0x264>)
 8009010:	f7ff f84e 	bl	80080b0 <memchr>
 8009014:	2800      	cmp	r0, #0
 8009016:	d007      	beq.n	8009028 <_vfiprintf_r+0x1a0>
 8009018:	4b34      	ldr	r3, [pc, #208]	; (80090ec <_vfiprintf_r+0x264>)
 800901a:	682a      	ldr	r2, [r5, #0]
 800901c:	1ac0      	subs	r0, r0, r3
 800901e:	2340      	movs	r3, #64	; 0x40
 8009020:	4083      	lsls	r3, r0
 8009022:	4313      	orrs	r3, r2
 8009024:	3701      	adds	r7, #1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	7839      	ldrb	r1, [r7, #0]
 800902a:	1c7b      	adds	r3, r7, #1
 800902c:	2206      	movs	r2, #6
 800902e:	4830      	ldr	r0, [pc, #192]	; (80090f0 <_vfiprintf_r+0x268>)
 8009030:	9303      	str	r3, [sp, #12]
 8009032:	7629      	strb	r1, [r5, #24]
 8009034:	f7ff f83c 	bl	80080b0 <memchr>
 8009038:	2800      	cmp	r0, #0
 800903a:	d045      	beq.n	80090c8 <_vfiprintf_r+0x240>
 800903c:	4b2d      	ldr	r3, [pc, #180]	; (80090f4 <_vfiprintf_r+0x26c>)
 800903e:	2b00      	cmp	r3, #0
 8009040:	d127      	bne.n	8009092 <_vfiprintf_r+0x20a>
 8009042:	2207      	movs	r2, #7
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	3307      	adds	r3, #7
 8009048:	4393      	bics	r3, r2
 800904a:	3308      	adds	r3, #8
 800904c:	9307      	str	r3, [sp, #28]
 800904e:	696b      	ldr	r3, [r5, #20]
 8009050:	9a04      	ldr	r2, [sp, #16]
 8009052:	189b      	adds	r3, r3, r2
 8009054:	616b      	str	r3, [r5, #20]
 8009056:	e75d      	b.n	8008f14 <_vfiprintf_r+0x8c>
 8009058:	210a      	movs	r1, #10
 800905a:	434b      	muls	r3, r1
 800905c:	4667      	mov	r7, ip
 800905e:	189b      	adds	r3, r3, r2
 8009060:	3909      	subs	r1, #9
 8009062:	e7a3      	b.n	8008fac <_vfiprintf_r+0x124>
 8009064:	2301      	movs	r3, #1
 8009066:	425b      	negs	r3, r3
 8009068:	e7ce      	b.n	8009008 <_vfiprintf_r+0x180>
 800906a:	2300      	movs	r3, #0
 800906c:	001a      	movs	r2, r3
 800906e:	3701      	adds	r7, #1
 8009070:	606b      	str	r3, [r5, #4]
 8009072:	7839      	ldrb	r1, [r7, #0]
 8009074:	1c78      	adds	r0, r7, #1
 8009076:	3930      	subs	r1, #48	; 0x30
 8009078:	4684      	mov	ip, r0
 800907a:	2909      	cmp	r1, #9
 800907c:	d903      	bls.n	8009086 <_vfiprintf_r+0x1fe>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0c3      	beq.n	800900a <_vfiprintf_r+0x182>
 8009082:	9209      	str	r2, [sp, #36]	; 0x24
 8009084:	e7c1      	b.n	800900a <_vfiprintf_r+0x182>
 8009086:	230a      	movs	r3, #10
 8009088:	435a      	muls	r2, r3
 800908a:	4667      	mov	r7, ip
 800908c:	1852      	adds	r2, r2, r1
 800908e:	3b09      	subs	r3, #9
 8009090:	e7ef      	b.n	8009072 <_vfiprintf_r+0x1ea>
 8009092:	ab07      	add	r3, sp, #28
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	0022      	movs	r2, r4
 8009098:	0029      	movs	r1, r5
 800909a:	0030      	movs	r0, r6
 800909c:	4b16      	ldr	r3, [pc, #88]	; (80090f8 <_vfiprintf_r+0x270>)
 800909e:	f7fd fd6f 	bl	8006b80 <_printf_float>
 80090a2:	9004      	str	r0, [sp, #16]
 80090a4:	9b04      	ldr	r3, [sp, #16]
 80090a6:	3301      	adds	r3, #1
 80090a8:	d1d1      	bne.n	800904e <_vfiprintf_r+0x1c6>
 80090aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ac:	07db      	lsls	r3, r3, #31
 80090ae:	d405      	bmi.n	80090bc <_vfiprintf_r+0x234>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	059b      	lsls	r3, r3, #22
 80090b4:	d402      	bmi.n	80090bc <_vfiprintf_r+0x234>
 80090b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b8:	f000 fad4 	bl	8009664 <__retarget_lock_release_recursive>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	065b      	lsls	r3, r3, #25
 80090c0:	d500      	bpl.n	80090c4 <_vfiprintf_r+0x23c>
 80090c2:	e70a      	b.n	8008eda <_vfiprintf_r+0x52>
 80090c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80090c6:	e70a      	b.n	8008ede <_vfiprintf_r+0x56>
 80090c8:	ab07      	add	r3, sp, #28
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	0022      	movs	r2, r4
 80090ce:	0029      	movs	r1, r5
 80090d0:	0030      	movs	r0, r6
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <_vfiprintf_r+0x270>)
 80090d4:	f7fe f806 	bl	80070e4 <_printf_i>
 80090d8:	e7e3      	b.n	80090a2 <_vfiprintf_r+0x21a>
 80090da:	46c0      	nop			; (mov r8, r8)
 80090dc:	0800a3c4 	.word	0x0800a3c4
 80090e0:	0800a3e4 	.word	0x0800a3e4
 80090e4:	0800a3a4 	.word	0x0800a3a4
 80090e8:	0800a24c 	.word	0x0800a24c
 80090ec:	0800a252 	.word	0x0800a252
 80090f0:	0800a256 	.word	0x0800a256
 80090f4:	08006b81 	.word	0x08006b81
 80090f8:	08008e65 	.word	0x08008e65

080090fc <__swbuf_r>:
 80090fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fe:	0005      	movs	r5, r0
 8009100:	000e      	movs	r6, r1
 8009102:	0014      	movs	r4, r2
 8009104:	2800      	cmp	r0, #0
 8009106:	d004      	beq.n	8009112 <__swbuf_r+0x16>
 8009108:	6983      	ldr	r3, [r0, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <__swbuf_r+0x16>
 800910e:	f000 fa07 	bl	8009520 <__sinit>
 8009112:	4b22      	ldr	r3, [pc, #136]	; (800919c <__swbuf_r+0xa0>)
 8009114:	429c      	cmp	r4, r3
 8009116:	d12e      	bne.n	8009176 <__swbuf_r+0x7a>
 8009118:	686c      	ldr	r4, [r5, #4]
 800911a:	69a3      	ldr	r3, [r4, #24]
 800911c:	60a3      	str	r3, [r4, #8]
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	071b      	lsls	r3, r3, #28
 8009122:	d532      	bpl.n	800918a <__swbuf_r+0x8e>
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d02f      	beq.n	800918a <__swbuf_r+0x8e>
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	6922      	ldr	r2, [r4, #16]
 800912e:	b2f7      	uxtb	r7, r6
 8009130:	1a98      	subs	r0, r3, r2
 8009132:	6963      	ldr	r3, [r4, #20]
 8009134:	b2f6      	uxtb	r6, r6
 8009136:	4283      	cmp	r3, r0
 8009138:	dc05      	bgt.n	8009146 <__swbuf_r+0x4a>
 800913a:	0021      	movs	r1, r4
 800913c:	0028      	movs	r0, r5
 800913e:	f000 f94d 	bl	80093dc <_fflush_r>
 8009142:	2800      	cmp	r0, #0
 8009144:	d127      	bne.n	8009196 <__swbuf_r+0x9a>
 8009146:	68a3      	ldr	r3, [r4, #8]
 8009148:	3001      	adds	r0, #1
 800914a:	3b01      	subs	r3, #1
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	6022      	str	r2, [r4, #0]
 8009154:	701f      	strb	r7, [r3, #0]
 8009156:	6963      	ldr	r3, [r4, #20]
 8009158:	4283      	cmp	r3, r0
 800915a:	d004      	beq.n	8009166 <__swbuf_r+0x6a>
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	07db      	lsls	r3, r3, #31
 8009160:	d507      	bpl.n	8009172 <__swbuf_r+0x76>
 8009162:	2e0a      	cmp	r6, #10
 8009164:	d105      	bne.n	8009172 <__swbuf_r+0x76>
 8009166:	0021      	movs	r1, r4
 8009168:	0028      	movs	r0, r5
 800916a:	f000 f937 	bl	80093dc <_fflush_r>
 800916e:	2800      	cmp	r0, #0
 8009170:	d111      	bne.n	8009196 <__swbuf_r+0x9a>
 8009172:	0030      	movs	r0, r6
 8009174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009176:	4b0a      	ldr	r3, [pc, #40]	; (80091a0 <__swbuf_r+0xa4>)
 8009178:	429c      	cmp	r4, r3
 800917a:	d101      	bne.n	8009180 <__swbuf_r+0x84>
 800917c:	68ac      	ldr	r4, [r5, #8]
 800917e:	e7cc      	b.n	800911a <__swbuf_r+0x1e>
 8009180:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <__swbuf_r+0xa8>)
 8009182:	429c      	cmp	r4, r3
 8009184:	d1c9      	bne.n	800911a <__swbuf_r+0x1e>
 8009186:	68ec      	ldr	r4, [r5, #12]
 8009188:	e7c7      	b.n	800911a <__swbuf_r+0x1e>
 800918a:	0021      	movs	r1, r4
 800918c:	0028      	movs	r0, r5
 800918e:	f000 f819 	bl	80091c4 <__swsetup_r>
 8009192:	2800      	cmp	r0, #0
 8009194:	d0c9      	beq.n	800912a <__swbuf_r+0x2e>
 8009196:	2601      	movs	r6, #1
 8009198:	4276      	negs	r6, r6
 800919a:	e7ea      	b.n	8009172 <__swbuf_r+0x76>
 800919c:	0800a3c4 	.word	0x0800a3c4
 80091a0:	0800a3e4 	.word	0x0800a3e4
 80091a4:	0800a3a4 	.word	0x0800a3a4

080091a8 <__ascii_wctomb>:
 80091a8:	0003      	movs	r3, r0
 80091aa:	1e08      	subs	r0, r1, #0
 80091ac:	d005      	beq.n	80091ba <__ascii_wctomb+0x12>
 80091ae:	2aff      	cmp	r2, #255	; 0xff
 80091b0:	d904      	bls.n	80091bc <__ascii_wctomb+0x14>
 80091b2:	228a      	movs	r2, #138	; 0x8a
 80091b4:	2001      	movs	r0, #1
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	4240      	negs	r0, r0
 80091ba:	4770      	bx	lr
 80091bc:	2001      	movs	r0, #1
 80091be:	700a      	strb	r2, [r1, #0]
 80091c0:	e7fb      	b.n	80091ba <__ascii_wctomb+0x12>
	...

080091c4 <__swsetup_r>:
 80091c4:	4b37      	ldr	r3, [pc, #220]	; (80092a4 <__swsetup_r+0xe0>)
 80091c6:	b570      	push	{r4, r5, r6, lr}
 80091c8:	681d      	ldr	r5, [r3, #0]
 80091ca:	0006      	movs	r6, r0
 80091cc:	000c      	movs	r4, r1
 80091ce:	2d00      	cmp	r5, #0
 80091d0:	d005      	beq.n	80091de <__swsetup_r+0x1a>
 80091d2:	69ab      	ldr	r3, [r5, #24]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d102      	bne.n	80091de <__swsetup_r+0x1a>
 80091d8:	0028      	movs	r0, r5
 80091da:	f000 f9a1 	bl	8009520 <__sinit>
 80091de:	4b32      	ldr	r3, [pc, #200]	; (80092a8 <__swsetup_r+0xe4>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	d10f      	bne.n	8009204 <__swsetup_r+0x40>
 80091e4:	686c      	ldr	r4, [r5, #4]
 80091e6:	230c      	movs	r3, #12
 80091e8:	5ee2      	ldrsh	r2, [r4, r3]
 80091ea:	b293      	uxth	r3, r2
 80091ec:	0711      	lsls	r1, r2, #28
 80091ee:	d42d      	bmi.n	800924c <__swsetup_r+0x88>
 80091f0:	06d9      	lsls	r1, r3, #27
 80091f2:	d411      	bmi.n	8009218 <__swsetup_r+0x54>
 80091f4:	2309      	movs	r3, #9
 80091f6:	2001      	movs	r0, #1
 80091f8:	6033      	str	r3, [r6, #0]
 80091fa:	3337      	adds	r3, #55	; 0x37
 80091fc:	4313      	orrs	r3, r2
 80091fe:	81a3      	strh	r3, [r4, #12]
 8009200:	4240      	negs	r0, r0
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	4b29      	ldr	r3, [pc, #164]	; (80092ac <__swsetup_r+0xe8>)
 8009206:	429c      	cmp	r4, r3
 8009208:	d101      	bne.n	800920e <__swsetup_r+0x4a>
 800920a:	68ac      	ldr	r4, [r5, #8]
 800920c:	e7eb      	b.n	80091e6 <__swsetup_r+0x22>
 800920e:	4b28      	ldr	r3, [pc, #160]	; (80092b0 <__swsetup_r+0xec>)
 8009210:	429c      	cmp	r4, r3
 8009212:	d1e8      	bne.n	80091e6 <__swsetup_r+0x22>
 8009214:	68ec      	ldr	r4, [r5, #12]
 8009216:	e7e6      	b.n	80091e6 <__swsetup_r+0x22>
 8009218:	075b      	lsls	r3, r3, #29
 800921a:	d513      	bpl.n	8009244 <__swsetup_r+0x80>
 800921c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800921e:	2900      	cmp	r1, #0
 8009220:	d008      	beq.n	8009234 <__swsetup_r+0x70>
 8009222:	0023      	movs	r3, r4
 8009224:	3344      	adds	r3, #68	; 0x44
 8009226:	4299      	cmp	r1, r3
 8009228:	d002      	beq.n	8009230 <__swsetup_r+0x6c>
 800922a:	0030      	movs	r0, r6
 800922c:	f7ff fb1c 	bl	8008868 <_free_r>
 8009230:	2300      	movs	r3, #0
 8009232:	6363      	str	r3, [r4, #52]	; 0x34
 8009234:	2224      	movs	r2, #36	; 0x24
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	4393      	bics	r3, r2
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	2300      	movs	r3, #0
 800923e:	6063      	str	r3, [r4, #4]
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	6023      	str	r3, [r4, #0]
 8009244:	2308      	movs	r3, #8
 8009246:	89a2      	ldrh	r2, [r4, #12]
 8009248:	4313      	orrs	r3, r2
 800924a:	81a3      	strh	r3, [r4, #12]
 800924c:	6923      	ldr	r3, [r4, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10b      	bne.n	800926a <__swsetup_r+0xa6>
 8009252:	21a0      	movs	r1, #160	; 0xa0
 8009254:	2280      	movs	r2, #128	; 0x80
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	0089      	lsls	r1, r1, #2
 800925a:	0092      	lsls	r2, r2, #2
 800925c:	400b      	ands	r3, r1
 800925e:	4293      	cmp	r3, r2
 8009260:	d003      	beq.n	800926a <__swsetup_r+0xa6>
 8009262:	0021      	movs	r1, r4
 8009264:	0030      	movs	r0, r6
 8009266:	f000 fa27 	bl	80096b8 <__smakebuf_r>
 800926a:	220c      	movs	r2, #12
 800926c:	5ea3      	ldrsh	r3, [r4, r2]
 800926e:	2001      	movs	r0, #1
 8009270:	001a      	movs	r2, r3
 8009272:	b299      	uxth	r1, r3
 8009274:	4002      	ands	r2, r0
 8009276:	4203      	tst	r3, r0
 8009278:	d00f      	beq.n	800929a <__swsetup_r+0xd6>
 800927a:	2200      	movs	r2, #0
 800927c:	60a2      	str	r2, [r4, #8]
 800927e:	6962      	ldr	r2, [r4, #20]
 8009280:	4252      	negs	r2, r2
 8009282:	61a2      	str	r2, [r4, #24]
 8009284:	2000      	movs	r0, #0
 8009286:	6922      	ldr	r2, [r4, #16]
 8009288:	4282      	cmp	r2, r0
 800928a:	d1ba      	bne.n	8009202 <__swsetup_r+0x3e>
 800928c:	060a      	lsls	r2, r1, #24
 800928e:	d5b8      	bpl.n	8009202 <__swsetup_r+0x3e>
 8009290:	2240      	movs	r2, #64	; 0x40
 8009292:	4313      	orrs	r3, r2
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	3801      	subs	r0, #1
 8009298:	e7b3      	b.n	8009202 <__swsetup_r+0x3e>
 800929a:	0788      	lsls	r0, r1, #30
 800929c:	d400      	bmi.n	80092a0 <__swsetup_r+0xdc>
 800929e:	6962      	ldr	r2, [r4, #20]
 80092a0:	60a2      	str	r2, [r4, #8]
 80092a2:	e7ef      	b.n	8009284 <__swsetup_r+0xc0>
 80092a4:	2000000c 	.word	0x2000000c
 80092a8:	0800a3c4 	.word	0x0800a3c4
 80092ac:	0800a3e4 	.word	0x0800a3e4
 80092b0:	0800a3a4 	.word	0x0800a3a4

080092b4 <abort>:
 80092b4:	2006      	movs	r0, #6
 80092b6:	b510      	push	{r4, lr}
 80092b8:	f000 fa74 	bl	80097a4 <raise>
 80092bc:	2001      	movs	r0, #1
 80092be:	f7fa f9b0 	bl	8003622 <_exit>
	...

080092c4 <__sflush_r>:
 80092c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092c6:	898b      	ldrh	r3, [r1, #12]
 80092c8:	0005      	movs	r5, r0
 80092ca:	000c      	movs	r4, r1
 80092cc:	071a      	lsls	r2, r3, #28
 80092ce:	d45f      	bmi.n	8009390 <__sflush_r+0xcc>
 80092d0:	684a      	ldr	r2, [r1, #4]
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	dc04      	bgt.n	80092e0 <__sflush_r+0x1c>
 80092d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80092d8:	2a00      	cmp	r2, #0
 80092da:	dc01      	bgt.n	80092e0 <__sflush_r+0x1c>
 80092dc:	2000      	movs	r0, #0
 80092de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80092e2:	2f00      	cmp	r7, #0
 80092e4:	d0fa      	beq.n	80092dc <__sflush_r+0x18>
 80092e6:	2200      	movs	r2, #0
 80092e8:	2180      	movs	r1, #128	; 0x80
 80092ea:	682e      	ldr	r6, [r5, #0]
 80092ec:	602a      	str	r2, [r5, #0]
 80092ee:	001a      	movs	r2, r3
 80092f0:	0149      	lsls	r1, r1, #5
 80092f2:	400a      	ands	r2, r1
 80092f4:	420b      	tst	r3, r1
 80092f6:	d034      	beq.n	8009362 <__sflush_r+0x9e>
 80092f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	075b      	lsls	r3, r3, #29
 80092fe:	d506      	bpl.n	800930e <__sflush_r+0x4a>
 8009300:	6863      	ldr	r3, [r4, #4]
 8009302:	1ac0      	subs	r0, r0, r3
 8009304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <__sflush_r+0x4a>
 800930a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800930c:	1ac0      	subs	r0, r0, r3
 800930e:	0002      	movs	r2, r0
 8009310:	6a21      	ldr	r1, [r4, #32]
 8009312:	2300      	movs	r3, #0
 8009314:	0028      	movs	r0, r5
 8009316:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009318:	47b8      	blx	r7
 800931a:	89a1      	ldrh	r1, [r4, #12]
 800931c:	1c43      	adds	r3, r0, #1
 800931e:	d106      	bne.n	800932e <__sflush_r+0x6a>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	2b1d      	cmp	r3, #29
 8009324:	d831      	bhi.n	800938a <__sflush_r+0xc6>
 8009326:	4a2c      	ldr	r2, [pc, #176]	; (80093d8 <__sflush_r+0x114>)
 8009328:	40da      	lsrs	r2, r3
 800932a:	07d3      	lsls	r3, r2, #31
 800932c:	d52d      	bpl.n	800938a <__sflush_r+0xc6>
 800932e:	2300      	movs	r3, #0
 8009330:	6063      	str	r3, [r4, #4]
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	04cb      	lsls	r3, r1, #19
 8009338:	d505      	bpl.n	8009346 <__sflush_r+0x82>
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	d102      	bne.n	8009344 <__sflush_r+0x80>
 800933e:	682b      	ldr	r3, [r5, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d100      	bne.n	8009346 <__sflush_r+0x82>
 8009344:	6560      	str	r0, [r4, #84]	; 0x54
 8009346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009348:	602e      	str	r6, [r5, #0]
 800934a:	2900      	cmp	r1, #0
 800934c:	d0c6      	beq.n	80092dc <__sflush_r+0x18>
 800934e:	0023      	movs	r3, r4
 8009350:	3344      	adds	r3, #68	; 0x44
 8009352:	4299      	cmp	r1, r3
 8009354:	d002      	beq.n	800935c <__sflush_r+0x98>
 8009356:	0028      	movs	r0, r5
 8009358:	f7ff fa86 	bl	8008868 <_free_r>
 800935c:	2000      	movs	r0, #0
 800935e:	6360      	str	r0, [r4, #52]	; 0x34
 8009360:	e7bd      	b.n	80092de <__sflush_r+0x1a>
 8009362:	2301      	movs	r3, #1
 8009364:	0028      	movs	r0, r5
 8009366:	6a21      	ldr	r1, [r4, #32]
 8009368:	47b8      	blx	r7
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	d1c5      	bne.n	80092fa <__sflush_r+0x36>
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0c2      	beq.n	80092fa <__sflush_r+0x36>
 8009374:	2b1d      	cmp	r3, #29
 8009376:	d001      	beq.n	800937c <__sflush_r+0xb8>
 8009378:	2b16      	cmp	r3, #22
 800937a:	d101      	bne.n	8009380 <__sflush_r+0xbc>
 800937c:	602e      	str	r6, [r5, #0]
 800937e:	e7ad      	b.n	80092dc <__sflush_r+0x18>
 8009380:	2340      	movs	r3, #64	; 0x40
 8009382:	89a2      	ldrh	r2, [r4, #12]
 8009384:	4313      	orrs	r3, r2
 8009386:	81a3      	strh	r3, [r4, #12]
 8009388:	e7a9      	b.n	80092de <__sflush_r+0x1a>
 800938a:	2340      	movs	r3, #64	; 0x40
 800938c:	430b      	orrs	r3, r1
 800938e:	e7fa      	b.n	8009386 <__sflush_r+0xc2>
 8009390:	690f      	ldr	r7, [r1, #16]
 8009392:	2f00      	cmp	r7, #0
 8009394:	d0a2      	beq.n	80092dc <__sflush_r+0x18>
 8009396:	680a      	ldr	r2, [r1, #0]
 8009398:	600f      	str	r7, [r1, #0]
 800939a:	1bd2      	subs	r2, r2, r7
 800939c:	9201      	str	r2, [sp, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	079b      	lsls	r3, r3, #30
 80093a2:	d100      	bne.n	80093a6 <__sflush_r+0xe2>
 80093a4:	694a      	ldr	r2, [r1, #20]
 80093a6:	60a2      	str	r2, [r4, #8]
 80093a8:	9b01      	ldr	r3, [sp, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	dc00      	bgt.n	80093b0 <__sflush_r+0xec>
 80093ae:	e795      	b.n	80092dc <__sflush_r+0x18>
 80093b0:	003a      	movs	r2, r7
 80093b2:	0028      	movs	r0, r5
 80093b4:	9b01      	ldr	r3, [sp, #4]
 80093b6:	6a21      	ldr	r1, [r4, #32]
 80093b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093ba:	47b0      	blx	r6
 80093bc:	2800      	cmp	r0, #0
 80093be:	dc06      	bgt.n	80093ce <__sflush_r+0x10a>
 80093c0:	2340      	movs	r3, #64	; 0x40
 80093c2:	2001      	movs	r0, #1
 80093c4:	89a2      	ldrh	r2, [r4, #12]
 80093c6:	4240      	negs	r0, r0
 80093c8:	4313      	orrs	r3, r2
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	e787      	b.n	80092de <__sflush_r+0x1a>
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	183f      	adds	r7, r7, r0
 80093d2:	1a1b      	subs	r3, r3, r0
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	e7e7      	b.n	80093a8 <__sflush_r+0xe4>
 80093d8:	20400001 	.word	0x20400001

080093dc <_fflush_r>:
 80093dc:	690b      	ldr	r3, [r1, #16]
 80093de:	b570      	push	{r4, r5, r6, lr}
 80093e0:	0005      	movs	r5, r0
 80093e2:	000c      	movs	r4, r1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <_fflush_r+0x12>
 80093e8:	2500      	movs	r5, #0
 80093ea:	0028      	movs	r0, r5
 80093ec:	bd70      	pop	{r4, r5, r6, pc}
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d004      	beq.n	80093fc <_fflush_r+0x20>
 80093f2:	6983      	ldr	r3, [r0, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <_fflush_r+0x20>
 80093f8:	f000 f892 	bl	8009520 <__sinit>
 80093fc:	4b14      	ldr	r3, [pc, #80]	; (8009450 <_fflush_r+0x74>)
 80093fe:	429c      	cmp	r4, r3
 8009400:	d11b      	bne.n	800943a <_fflush_r+0x5e>
 8009402:	686c      	ldr	r4, [r5, #4]
 8009404:	220c      	movs	r2, #12
 8009406:	5ea3      	ldrsh	r3, [r4, r2]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0ed      	beq.n	80093e8 <_fflush_r+0xc>
 800940c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800940e:	07d2      	lsls	r2, r2, #31
 8009410:	d404      	bmi.n	800941c <_fflush_r+0x40>
 8009412:	059b      	lsls	r3, r3, #22
 8009414:	d402      	bmi.n	800941c <_fflush_r+0x40>
 8009416:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009418:	f000 f923 	bl	8009662 <__retarget_lock_acquire_recursive>
 800941c:	0028      	movs	r0, r5
 800941e:	0021      	movs	r1, r4
 8009420:	f7ff ff50 	bl	80092c4 <__sflush_r>
 8009424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009426:	0005      	movs	r5, r0
 8009428:	07db      	lsls	r3, r3, #31
 800942a:	d4de      	bmi.n	80093ea <_fflush_r+0xe>
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	059b      	lsls	r3, r3, #22
 8009430:	d4db      	bmi.n	80093ea <_fflush_r+0xe>
 8009432:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009434:	f000 f916 	bl	8009664 <__retarget_lock_release_recursive>
 8009438:	e7d7      	b.n	80093ea <_fflush_r+0xe>
 800943a:	4b06      	ldr	r3, [pc, #24]	; (8009454 <_fflush_r+0x78>)
 800943c:	429c      	cmp	r4, r3
 800943e:	d101      	bne.n	8009444 <_fflush_r+0x68>
 8009440:	68ac      	ldr	r4, [r5, #8]
 8009442:	e7df      	b.n	8009404 <_fflush_r+0x28>
 8009444:	4b04      	ldr	r3, [pc, #16]	; (8009458 <_fflush_r+0x7c>)
 8009446:	429c      	cmp	r4, r3
 8009448:	d1dc      	bne.n	8009404 <_fflush_r+0x28>
 800944a:	68ec      	ldr	r4, [r5, #12]
 800944c:	e7da      	b.n	8009404 <_fflush_r+0x28>
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	0800a3c4 	.word	0x0800a3c4
 8009454:	0800a3e4 	.word	0x0800a3e4
 8009458:	0800a3a4 	.word	0x0800a3a4

0800945c <std>:
 800945c:	2300      	movs	r3, #0
 800945e:	b510      	push	{r4, lr}
 8009460:	0004      	movs	r4, r0
 8009462:	6003      	str	r3, [r0, #0]
 8009464:	6043      	str	r3, [r0, #4]
 8009466:	6083      	str	r3, [r0, #8]
 8009468:	8181      	strh	r1, [r0, #12]
 800946a:	6643      	str	r3, [r0, #100]	; 0x64
 800946c:	0019      	movs	r1, r3
 800946e:	81c2      	strh	r2, [r0, #14]
 8009470:	6103      	str	r3, [r0, #16]
 8009472:	6143      	str	r3, [r0, #20]
 8009474:	6183      	str	r3, [r0, #24]
 8009476:	2208      	movs	r2, #8
 8009478:	305c      	adds	r0, #92	; 0x5c
 800947a:	f7fd facf 	bl	8006a1c <memset>
 800947e:	4b05      	ldr	r3, [pc, #20]	; (8009494 <std+0x38>)
 8009480:	6224      	str	r4, [r4, #32]
 8009482:	6263      	str	r3, [r4, #36]	; 0x24
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <std+0x3c>)
 8009486:	62a3      	str	r3, [r4, #40]	; 0x28
 8009488:	4b04      	ldr	r3, [pc, #16]	; (800949c <std+0x40>)
 800948a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800948c:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <std+0x44>)
 800948e:	6323      	str	r3, [r4, #48]	; 0x30
 8009490:	bd10      	pop	{r4, pc}
 8009492:	46c0      	nop			; (mov r8, r8)
 8009494:	080097e5 	.word	0x080097e5
 8009498:	0800980d 	.word	0x0800980d
 800949c:	08009845 	.word	0x08009845
 80094a0:	08009871 	.word	0x08009871

080094a4 <_cleanup_r>:
 80094a4:	b510      	push	{r4, lr}
 80094a6:	4902      	ldr	r1, [pc, #8]	; (80094b0 <_cleanup_r+0xc>)
 80094a8:	f000 f8ba 	bl	8009620 <_fwalk_reent>
 80094ac:	bd10      	pop	{r4, pc}
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	080093dd 	.word	0x080093dd

080094b4 <__sfmoreglue>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	2568      	movs	r5, #104	; 0x68
 80094b8:	1e4a      	subs	r2, r1, #1
 80094ba:	4355      	muls	r5, r2
 80094bc:	000e      	movs	r6, r1
 80094be:	0029      	movs	r1, r5
 80094c0:	3174      	adds	r1, #116	; 0x74
 80094c2:	f7ff fa3d 	bl	8008940 <_malloc_r>
 80094c6:	1e04      	subs	r4, r0, #0
 80094c8:	d008      	beq.n	80094dc <__sfmoreglue+0x28>
 80094ca:	2100      	movs	r1, #0
 80094cc:	002a      	movs	r2, r5
 80094ce:	6001      	str	r1, [r0, #0]
 80094d0:	6046      	str	r6, [r0, #4]
 80094d2:	300c      	adds	r0, #12
 80094d4:	60a0      	str	r0, [r4, #8]
 80094d6:	3268      	adds	r2, #104	; 0x68
 80094d8:	f7fd faa0 	bl	8006a1c <memset>
 80094dc:	0020      	movs	r0, r4
 80094de:	bd70      	pop	{r4, r5, r6, pc}

080094e0 <__sfp_lock_acquire>:
 80094e0:	b510      	push	{r4, lr}
 80094e2:	4802      	ldr	r0, [pc, #8]	; (80094ec <__sfp_lock_acquire+0xc>)
 80094e4:	f000 f8bd 	bl	8009662 <__retarget_lock_acquire_recursive>
 80094e8:	bd10      	pop	{r4, pc}
 80094ea:	46c0      	nop			; (mov r8, r8)
 80094ec:	20000375 	.word	0x20000375

080094f0 <__sfp_lock_release>:
 80094f0:	b510      	push	{r4, lr}
 80094f2:	4802      	ldr	r0, [pc, #8]	; (80094fc <__sfp_lock_release+0xc>)
 80094f4:	f000 f8b6 	bl	8009664 <__retarget_lock_release_recursive>
 80094f8:	bd10      	pop	{r4, pc}
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	20000375 	.word	0x20000375

08009500 <__sinit_lock_acquire>:
 8009500:	b510      	push	{r4, lr}
 8009502:	4802      	ldr	r0, [pc, #8]	; (800950c <__sinit_lock_acquire+0xc>)
 8009504:	f000 f8ad 	bl	8009662 <__retarget_lock_acquire_recursive>
 8009508:	bd10      	pop	{r4, pc}
 800950a:	46c0      	nop			; (mov r8, r8)
 800950c:	20000376 	.word	0x20000376

08009510 <__sinit_lock_release>:
 8009510:	b510      	push	{r4, lr}
 8009512:	4802      	ldr	r0, [pc, #8]	; (800951c <__sinit_lock_release+0xc>)
 8009514:	f000 f8a6 	bl	8009664 <__retarget_lock_release_recursive>
 8009518:	bd10      	pop	{r4, pc}
 800951a:	46c0      	nop			; (mov r8, r8)
 800951c:	20000376 	.word	0x20000376

08009520 <__sinit>:
 8009520:	b513      	push	{r0, r1, r4, lr}
 8009522:	0004      	movs	r4, r0
 8009524:	f7ff ffec 	bl	8009500 <__sinit_lock_acquire>
 8009528:	69a3      	ldr	r3, [r4, #24]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <__sinit+0x14>
 800952e:	f7ff ffef 	bl	8009510 <__sinit_lock_release>
 8009532:	bd13      	pop	{r0, r1, r4, pc}
 8009534:	64a3      	str	r3, [r4, #72]	; 0x48
 8009536:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009538:	6523      	str	r3, [r4, #80]	; 0x50
 800953a:	4b13      	ldr	r3, [pc, #76]	; (8009588 <__sinit+0x68>)
 800953c:	4a13      	ldr	r2, [pc, #76]	; (800958c <__sinit+0x6c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	62a2      	str	r2, [r4, #40]	; 0x28
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	42a3      	cmp	r3, r4
 8009546:	d101      	bne.n	800954c <__sinit+0x2c>
 8009548:	2301      	movs	r3, #1
 800954a:	61a3      	str	r3, [r4, #24]
 800954c:	0020      	movs	r0, r4
 800954e:	f000 f81f 	bl	8009590 <__sfp>
 8009552:	6060      	str	r0, [r4, #4]
 8009554:	0020      	movs	r0, r4
 8009556:	f000 f81b 	bl	8009590 <__sfp>
 800955a:	60a0      	str	r0, [r4, #8]
 800955c:	0020      	movs	r0, r4
 800955e:	f000 f817 	bl	8009590 <__sfp>
 8009562:	2200      	movs	r2, #0
 8009564:	2104      	movs	r1, #4
 8009566:	60e0      	str	r0, [r4, #12]
 8009568:	6860      	ldr	r0, [r4, #4]
 800956a:	f7ff ff77 	bl	800945c <std>
 800956e:	2201      	movs	r2, #1
 8009570:	2109      	movs	r1, #9
 8009572:	68a0      	ldr	r0, [r4, #8]
 8009574:	f7ff ff72 	bl	800945c <std>
 8009578:	2202      	movs	r2, #2
 800957a:	2112      	movs	r1, #18
 800957c:	68e0      	ldr	r0, [r4, #12]
 800957e:	f7ff ff6d 	bl	800945c <std>
 8009582:	2301      	movs	r3, #1
 8009584:	61a3      	str	r3, [r4, #24]
 8009586:	e7d2      	b.n	800952e <__sinit+0xe>
 8009588:	0800a028 	.word	0x0800a028
 800958c:	080094a5 	.word	0x080094a5

08009590 <__sfp>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	0007      	movs	r7, r0
 8009594:	f7ff ffa4 	bl	80094e0 <__sfp_lock_acquire>
 8009598:	4b1f      	ldr	r3, [pc, #124]	; (8009618 <__sfp+0x88>)
 800959a:	681e      	ldr	r6, [r3, #0]
 800959c:	69b3      	ldr	r3, [r6, #24]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <__sfp+0x18>
 80095a2:	0030      	movs	r0, r6
 80095a4:	f7ff ffbc 	bl	8009520 <__sinit>
 80095a8:	3648      	adds	r6, #72	; 0x48
 80095aa:	68b4      	ldr	r4, [r6, #8]
 80095ac:	6873      	ldr	r3, [r6, #4]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	d504      	bpl.n	80095bc <__sfp+0x2c>
 80095b2:	6833      	ldr	r3, [r6, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d022      	beq.n	80095fe <__sfp+0x6e>
 80095b8:	6836      	ldr	r6, [r6, #0]
 80095ba:	e7f6      	b.n	80095aa <__sfp+0x1a>
 80095bc:	220c      	movs	r2, #12
 80095be:	5ea5      	ldrsh	r5, [r4, r2]
 80095c0:	2d00      	cmp	r5, #0
 80095c2:	d11a      	bne.n	80095fa <__sfp+0x6a>
 80095c4:	0020      	movs	r0, r4
 80095c6:	4b15      	ldr	r3, [pc, #84]	; (800961c <__sfp+0x8c>)
 80095c8:	3058      	adds	r0, #88	; 0x58
 80095ca:	60e3      	str	r3, [r4, #12]
 80095cc:	6665      	str	r5, [r4, #100]	; 0x64
 80095ce:	f000 f847 	bl	8009660 <__retarget_lock_init_recursive>
 80095d2:	f7ff ff8d 	bl	80094f0 <__sfp_lock_release>
 80095d6:	0020      	movs	r0, r4
 80095d8:	2208      	movs	r2, #8
 80095da:	0029      	movs	r1, r5
 80095dc:	6025      	str	r5, [r4, #0]
 80095de:	60a5      	str	r5, [r4, #8]
 80095e0:	6065      	str	r5, [r4, #4]
 80095e2:	6125      	str	r5, [r4, #16]
 80095e4:	6165      	str	r5, [r4, #20]
 80095e6:	61a5      	str	r5, [r4, #24]
 80095e8:	305c      	adds	r0, #92	; 0x5c
 80095ea:	f7fd fa17 	bl	8006a1c <memset>
 80095ee:	6365      	str	r5, [r4, #52]	; 0x34
 80095f0:	63a5      	str	r5, [r4, #56]	; 0x38
 80095f2:	64a5      	str	r5, [r4, #72]	; 0x48
 80095f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80095f6:	0020      	movs	r0, r4
 80095f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095fa:	3468      	adds	r4, #104	; 0x68
 80095fc:	e7d7      	b.n	80095ae <__sfp+0x1e>
 80095fe:	2104      	movs	r1, #4
 8009600:	0038      	movs	r0, r7
 8009602:	f7ff ff57 	bl	80094b4 <__sfmoreglue>
 8009606:	1e04      	subs	r4, r0, #0
 8009608:	6030      	str	r0, [r6, #0]
 800960a:	d1d5      	bne.n	80095b8 <__sfp+0x28>
 800960c:	f7ff ff70 	bl	80094f0 <__sfp_lock_release>
 8009610:	230c      	movs	r3, #12
 8009612:	603b      	str	r3, [r7, #0]
 8009614:	e7ef      	b.n	80095f6 <__sfp+0x66>
 8009616:	46c0      	nop			; (mov r8, r8)
 8009618:	0800a028 	.word	0x0800a028
 800961c:	ffff0001 	.word	0xffff0001

08009620 <_fwalk_reent>:
 8009620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009622:	0004      	movs	r4, r0
 8009624:	0006      	movs	r6, r0
 8009626:	2700      	movs	r7, #0
 8009628:	9101      	str	r1, [sp, #4]
 800962a:	3448      	adds	r4, #72	; 0x48
 800962c:	6863      	ldr	r3, [r4, #4]
 800962e:	68a5      	ldr	r5, [r4, #8]
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	9b00      	ldr	r3, [sp, #0]
 8009634:	3b01      	subs	r3, #1
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	d504      	bpl.n	8009644 <_fwalk_reent+0x24>
 800963a:	6824      	ldr	r4, [r4, #0]
 800963c:	2c00      	cmp	r4, #0
 800963e:	d1f5      	bne.n	800962c <_fwalk_reent+0xc>
 8009640:	0038      	movs	r0, r7
 8009642:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009644:	89ab      	ldrh	r3, [r5, #12]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d908      	bls.n	800965c <_fwalk_reent+0x3c>
 800964a:	220e      	movs	r2, #14
 800964c:	5eab      	ldrsh	r3, [r5, r2]
 800964e:	3301      	adds	r3, #1
 8009650:	d004      	beq.n	800965c <_fwalk_reent+0x3c>
 8009652:	0029      	movs	r1, r5
 8009654:	0030      	movs	r0, r6
 8009656:	9b01      	ldr	r3, [sp, #4]
 8009658:	4798      	blx	r3
 800965a:	4307      	orrs	r7, r0
 800965c:	3568      	adds	r5, #104	; 0x68
 800965e:	e7e8      	b.n	8009632 <_fwalk_reent+0x12>

08009660 <__retarget_lock_init_recursive>:
 8009660:	4770      	bx	lr

08009662 <__retarget_lock_acquire_recursive>:
 8009662:	4770      	bx	lr

08009664 <__retarget_lock_release_recursive>:
 8009664:	4770      	bx	lr
	...

08009668 <__swhatbuf_r>:
 8009668:	b570      	push	{r4, r5, r6, lr}
 800966a:	000e      	movs	r6, r1
 800966c:	001d      	movs	r5, r3
 800966e:	230e      	movs	r3, #14
 8009670:	5ec9      	ldrsh	r1, [r1, r3]
 8009672:	0014      	movs	r4, r2
 8009674:	b096      	sub	sp, #88	; 0x58
 8009676:	2900      	cmp	r1, #0
 8009678:	da08      	bge.n	800968c <__swhatbuf_r+0x24>
 800967a:	220c      	movs	r2, #12
 800967c:	5eb3      	ldrsh	r3, [r6, r2]
 800967e:	2200      	movs	r2, #0
 8009680:	602a      	str	r2, [r5, #0]
 8009682:	061b      	lsls	r3, r3, #24
 8009684:	d411      	bmi.n	80096aa <__swhatbuf_r+0x42>
 8009686:	2380      	movs	r3, #128	; 0x80
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	e00f      	b.n	80096ac <__swhatbuf_r+0x44>
 800968c:	466a      	mov	r2, sp
 800968e:	f000 f91b 	bl	80098c8 <_fstat_r>
 8009692:	2800      	cmp	r0, #0
 8009694:	dbf1      	blt.n	800967a <__swhatbuf_r+0x12>
 8009696:	23f0      	movs	r3, #240	; 0xf0
 8009698:	9901      	ldr	r1, [sp, #4]
 800969a:	021b      	lsls	r3, r3, #8
 800969c:	4019      	ands	r1, r3
 800969e:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <__swhatbuf_r+0x4c>)
 80096a0:	18c9      	adds	r1, r1, r3
 80096a2:	424b      	negs	r3, r1
 80096a4:	4159      	adcs	r1, r3
 80096a6:	6029      	str	r1, [r5, #0]
 80096a8:	e7ed      	b.n	8009686 <__swhatbuf_r+0x1e>
 80096aa:	2340      	movs	r3, #64	; 0x40
 80096ac:	2000      	movs	r0, #0
 80096ae:	6023      	str	r3, [r4, #0]
 80096b0:	b016      	add	sp, #88	; 0x58
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	ffffe000 	.word	0xffffe000

080096b8 <__smakebuf_r>:
 80096b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ba:	2602      	movs	r6, #2
 80096bc:	898b      	ldrh	r3, [r1, #12]
 80096be:	0005      	movs	r5, r0
 80096c0:	000c      	movs	r4, r1
 80096c2:	4233      	tst	r3, r6
 80096c4:	d006      	beq.n	80096d4 <__smakebuf_r+0x1c>
 80096c6:	0023      	movs	r3, r4
 80096c8:	3347      	adds	r3, #71	; 0x47
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	6123      	str	r3, [r4, #16]
 80096ce:	2301      	movs	r3, #1
 80096d0:	6163      	str	r3, [r4, #20]
 80096d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80096d4:	466a      	mov	r2, sp
 80096d6:	ab01      	add	r3, sp, #4
 80096d8:	f7ff ffc6 	bl	8009668 <__swhatbuf_r>
 80096dc:	9900      	ldr	r1, [sp, #0]
 80096de:	0007      	movs	r7, r0
 80096e0:	0028      	movs	r0, r5
 80096e2:	f7ff f92d 	bl	8008940 <_malloc_r>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d108      	bne.n	80096fc <__smakebuf_r+0x44>
 80096ea:	220c      	movs	r2, #12
 80096ec:	5ea3      	ldrsh	r3, [r4, r2]
 80096ee:	059a      	lsls	r2, r3, #22
 80096f0:	d4ef      	bmi.n	80096d2 <__smakebuf_r+0x1a>
 80096f2:	2203      	movs	r2, #3
 80096f4:	4393      	bics	r3, r2
 80096f6:	431e      	orrs	r6, r3
 80096f8:	81a6      	strh	r6, [r4, #12]
 80096fa:	e7e4      	b.n	80096c6 <__smakebuf_r+0xe>
 80096fc:	4b0f      	ldr	r3, [pc, #60]	; (800973c <__smakebuf_r+0x84>)
 80096fe:	62ab      	str	r3, [r5, #40]	; 0x28
 8009700:	2380      	movs	r3, #128	; 0x80
 8009702:	89a2      	ldrh	r2, [r4, #12]
 8009704:	6020      	str	r0, [r4, #0]
 8009706:	4313      	orrs	r3, r2
 8009708:	81a3      	strh	r3, [r4, #12]
 800970a:	9b00      	ldr	r3, [sp, #0]
 800970c:	6120      	str	r0, [r4, #16]
 800970e:	6163      	str	r3, [r4, #20]
 8009710:	9b01      	ldr	r3, [sp, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00d      	beq.n	8009732 <__smakebuf_r+0x7a>
 8009716:	0028      	movs	r0, r5
 8009718:	230e      	movs	r3, #14
 800971a:	5ee1      	ldrsh	r1, [r4, r3]
 800971c:	f000 f8e6 	bl	80098ec <_isatty_r>
 8009720:	2800      	cmp	r0, #0
 8009722:	d006      	beq.n	8009732 <__smakebuf_r+0x7a>
 8009724:	2203      	movs	r2, #3
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	4393      	bics	r3, r2
 800972a:	001a      	movs	r2, r3
 800972c:	2301      	movs	r3, #1
 800972e:	4313      	orrs	r3, r2
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	89a0      	ldrh	r0, [r4, #12]
 8009734:	4307      	orrs	r7, r0
 8009736:	81a7      	strh	r7, [r4, #12]
 8009738:	e7cb      	b.n	80096d2 <__smakebuf_r+0x1a>
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	080094a5 	.word	0x080094a5

08009740 <_malloc_usable_size_r>:
 8009740:	1f0b      	subs	r3, r1, #4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	1f18      	subs	r0, r3, #4
 8009746:	2b00      	cmp	r3, #0
 8009748:	da01      	bge.n	800974e <_malloc_usable_size_r+0xe>
 800974a:	580b      	ldr	r3, [r1, r0]
 800974c:	18c0      	adds	r0, r0, r3
 800974e:	4770      	bx	lr

08009750 <_raise_r>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	0004      	movs	r4, r0
 8009754:	000d      	movs	r5, r1
 8009756:	291f      	cmp	r1, #31
 8009758:	d904      	bls.n	8009764 <_raise_r+0x14>
 800975a:	2316      	movs	r3, #22
 800975c:	6003      	str	r3, [r0, #0]
 800975e:	2001      	movs	r0, #1
 8009760:	4240      	negs	r0, r0
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009766:	2b00      	cmp	r3, #0
 8009768:	d004      	beq.n	8009774 <_raise_r+0x24>
 800976a:	008a      	lsls	r2, r1, #2
 800976c:	189b      	adds	r3, r3, r2
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	2a00      	cmp	r2, #0
 8009772:	d108      	bne.n	8009786 <_raise_r+0x36>
 8009774:	0020      	movs	r0, r4
 8009776:	f000 f831 	bl	80097dc <_getpid_r>
 800977a:	002a      	movs	r2, r5
 800977c:	0001      	movs	r1, r0
 800977e:	0020      	movs	r0, r4
 8009780:	f000 f81a 	bl	80097b8 <_kill_r>
 8009784:	e7ed      	b.n	8009762 <_raise_r+0x12>
 8009786:	2000      	movs	r0, #0
 8009788:	2a01      	cmp	r2, #1
 800978a:	d0ea      	beq.n	8009762 <_raise_r+0x12>
 800978c:	1c51      	adds	r1, r2, #1
 800978e:	d103      	bne.n	8009798 <_raise_r+0x48>
 8009790:	2316      	movs	r3, #22
 8009792:	3001      	adds	r0, #1
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	e7e4      	b.n	8009762 <_raise_r+0x12>
 8009798:	2400      	movs	r4, #0
 800979a:	0028      	movs	r0, r5
 800979c:	601c      	str	r4, [r3, #0]
 800979e:	4790      	blx	r2
 80097a0:	0020      	movs	r0, r4
 80097a2:	e7de      	b.n	8009762 <_raise_r+0x12>

080097a4 <raise>:
 80097a4:	b510      	push	{r4, lr}
 80097a6:	4b03      	ldr	r3, [pc, #12]	; (80097b4 <raise+0x10>)
 80097a8:	0001      	movs	r1, r0
 80097aa:	6818      	ldr	r0, [r3, #0]
 80097ac:	f7ff ffd0 	bl	8009750 <_raise_r>
 80097b0:	bd10      	pop	{r4, pc}
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	2000000c 	.word	0x2000000c

080097b8 <_kill_r>:
 80097b8:	2300      	movs	r3, #0
 80097ba:	b570      	push	{r4, r5, r6, lr}
 80097bc:	4d06      	ldr	r5, [pc, #24]	; (80097d8 <_kill_r+0x20>)
 80097be:	0004      	movs	r4, r0
 80097c0:	0008      	movs	r0, r1
 80097c2:	0011      	movs	r1, r2
 80097c4:	602b      	str	r3, [r5, #0]
 80097c6:	f7f9 ff1c 	bl	8003602 <_kill>
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	d103      	bne.n	80097d6 <_kill_r+0x1e>
 80097ce:	682b      	ldr	r3, [r5, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d000      	beq.n	80097d6 <_kill_r+0x1e>
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	20000370 	.word	0x20000370

080097dc <_getpid_r>:
 80097dc:	b510      	push	{r4, lr}
 80097de:	f7f9 ff0a 	bl	80035f6 <_getpid>
 80097e2:	bd10      	pop	{r4, pc}

080097e4 <__sread>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	000c      	movs	r4, r1
 80097e8:	250e      	movs	r5, #14
 80097ea:	5f49      	ldrsh	r1, [r1, r5]
 80097ec:	f000 f8a4 	bl	8009938 <_read_r>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	db03      	blt.n	80097fc <__sread+0x18>
 80097f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80097f6:	181b      	adds	r3, r3, r0
 80097f8:	6563      	str	r3, [r4, #84]	; 0x54
 80097fa:	bd70      	pop	{r4, r5, r6, pc}
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	4a02      	ldr	r2, [pc, #8]	; (8009808 <__sread+0x24>)
 8009800:	4013      	ands	r3, r2
 8009802:	81a3      	strh	r3, [r4, #12]
 8009804:	e7f9      	b.n	80097fa <__sread+0x16>
 8009806:	46c0      	nop			; (mov r8, r8)
 8009808:	ffffefff 	.word	0xffffefff

0800980c <__swrite>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	001f      	movs	r7, r3
 8009810:	898b      	ldrh	r3, [r1, #12]
 8009812:	0005      	movs	r5, r0
 8009814:	000c      	movs	r4, r1
 8009816:	0016      	movs	r6, r2
 8009818:	05db      	lsls	r3, r3, #23
 800981a:	d505      	bpl.n	8009828 <__swrite+0x1c>
 800981c:	230e      	movs	r3, #14
 800981e:	5ec9      	ldrsh	r1, [r1, r3]
 8009820:	2200      	movs	r2, #0
 8009822:	2302      	movs	r3, #2
 8009824:	f000 f874 	bl	8009910 <_lseek_r>
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	4a05      	ldr	r2, [pc, #20]	; (8009840 <__swrite+0x34>)
 800982c:	0028      	movs	r0, r5
 800982e:	4013      	ands	r3, r2
 8009830:	81a3      	strh	r3, [r4, #12]
 8009832:	0032      	movs	r2, r6
 8009834:	230e      	movs	r3, #14
 8009836:	5ee1      	ldrsh	r1, [r4, r3]
 8009838:	003b      	movs	r3, r7
 800983a:	f000 f81f 	bl	800987c <_write_r>
 800983e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009840:	ffffefff 	.word	0xffffefff

08009844 <__sseek>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	000c      	movs	r4, r1
 8009848:	250e      	movs	r5, #14
 800984a:	5f49      	ldrsh	r1, [r1, r5]
 800984c:	f000 f860 	bl	8009910 <_lseek_r>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	1c42      	adds	r2, r0, #1
 8009854:	d103      	bne.n	800985e <__sseek+0x1a>
 8009856:	4a05      	ldr	r2, [pc, #20]	; (800986c <__sseek+0x28>)
 8009858:	4013      	ands	r3, r2
 800985a:	81a3      	strh	r3, [r4, #12]
 800985c:	bd70      	pop	{r4, r5, r6, pc}
 800985e:	2280      	movs	r2, #128	; 0x80
 8009860:	0152      	lsls	r2, r2, #5
 8009862:	4313      	orrs	r3, r2
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	6560      	str	r0, [r4, #84]	; 0x54
 8009868:	e7f8      	b.n	800985c <__sseek+0x18>
 800986a:	46c0      	nop			; (mov r8, r8)
 800986c:	ffffefff 	.word	0xffffefff

08009870 <__sclose>:
 8009870:	b510      	push	{r4, lr}
 8009872:	230e      	movs	r3, #14
 8009874:	5ec9      	ldrsh	r1, [r1, r3]
 8009876:	f000 f815 	bl	80098a4 <_close_r>
 800987a:	bd10      	pop	{r4, pc}

0800987c <_write_r>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	0004      	movs	r4, r0
 8009880:	0008      	movs	r0, r1
 8009882:	0011      	movs	r1, r2
 8009884:	001a      	movs	r2, r3
 8009886:	2300      	movs	r3, #0
 8009888:	4d05      	ldr	r5, [pc, #20]	; (80098a0 <_write_r+0x24>)
 800988a:	602b      	str	r3, [r5, #0]
 800988c:	f7f9 fef2 	bl	8003674 <_write>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d103      	bne.n	800989c <_write_r+0x20>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d000      	beq.n	800989c <_write_r+0x20>
 800989a:	6023      	str	r3, [r4, #0]
 800989c:	bd70      	pop	{r4, r5, r6, pc}
 800989e:	46c0      	nop			; (mov r8, r8)
 80098a0:	20000370 	.word	0x20000370

080098a4 <_close_r>:
 80098a4:	2300      	movs	r3, #0
 80098a6:	b570      	push	{r4, r5, r6, lr}
 80098a8:	4d06      	ldr	r5, [pc, #24]	; (80098c4 <_close_r+0x20>)
 80098aa:	0004      	movs	r4, r0
 80098ac:	0008      	movs	r0, r1
 80098ae:	602b      	str	r3, [r5, #0]
 80098b0:	f7f9 fefc 	bl	80036ac <_close>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	d103      	bne.n	80098c0 <_close_r+0x1c>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d000      	beq.n	80098c0 <_close_r+0x1c>
 80098be:	6023      	str	r3, [r4, #0]
 80098c0:	bd70      	pop	{r4, r5, r6, pc}
 80098c2:	46c0      	nop			; (mov r8, r8)
 80098c4:	20000370 	.word	0x20000370

080098c8 <_fstat_r>:
 80098c8:	2300      	movs	r3, #0
 80098ca:	b570      	push	{r4, r5, r6, lr}
 80098cc:	4d06      	ldr	r5, [pc, #24]	; (80098e8 <_fstat_r+0x20>)
 80098ce:	0004      	movs	r4, r0
 80098d0:	0008      	movs	r0, r1
 80098d2:	0011      	movs	r1, r2
 80098d4:	602b      	str	r3, [r5, #0]
 80098d6:	f7f9 fef3 	bl	80036c0 <_fstat>
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	d103      	bne.n	80098e6 <_fstat_r+0x1e>
 80098de:	682b      	ldr	r3, [r5, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d000      	beq.n	80098e6 <_fstat_r+0x1e>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	20000370 	.word	0x20000370

080098ec <_isatty_r>:
 80098ec:	2300      	movs	r3, #0
 80098ee:	b570      	push	{r4, r5, r6, lr}
 80098f0:	4d06      	ldr	r5, [pc, #24]	; (800990c <_isatty_r+0x20>)
 80098f2:	0004      	movs	r4, r0
 80098f4:	0008      	movs	r0, r1
 80098f6:	602b      	str	r3, [r5, #0]
 80098f8:	f7f9 fef0 	bl	80036dc <_isatty>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d103      	bne.n	8009908 <_isatty_r+0x1c>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d000      	beq.n	8009908 <_isatty_r+0x1c>
 8009906:	6023      	str	r3, [r4, #0]
 8009908:	bd70      	pop	{r4, r5, r6, pc}
 800990a:	46c0      	nop			; (mov r8, r8)
 800990c:	20000370 	.word	0x20000370

08009910 <_lseek_r>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	0004      	movs	r4, r0
 8009914:	0008      	movs	r0, r1
 8009916:	0011      	movs	r1, r2
 8009918:	001a      	movs	r2, r3
 800991a:	2300      	movs	r3, #0
 800991c:	4d05      	ldr	r5, [pc, #20]	; (8009934 <_lseek_r+0x24>)
 800991e:	602b      	str	r3, [r5, #0]
 8009920:	f7f9 fee5 	bl	80036ee <_lseek>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d103      	bne.n	8009930 <_lseek_r+0x20>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d000      	beq.n	8009930 <_lseek_r+0x20>
 800992e:	6023      	str	r3, [r4, #0]
 8009930:	bd70      	pop	{r4, r5, r6, pc}
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	20000370 	.word	0x20000370

08009938 <_read_r>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	0004      	movs	r4, r0
 800993c:	0008      	movs	r0, r1
 800993e:	0011      	movs	r1, r2
 8009940:	001a      	movs	r2, r3
 8009942:	2300      	movs	r3, #0
 8009944:	4d05      	ldr	r5, [pc, #20]	; (800995c <_read_r+0x24>)
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	f7f9 fe77 	bl	800363a <_read>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d103      	bne.n	8009958 <_read_r+0x20>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d000      	beq.n	8009958 <_read_r+0x20>
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	bd70      	pop	{r4, r5, r6, pc}
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	20000370 	.word	0x20000370

08009960 <log>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	0004      	movs	r4, r0
 8009964:	000d      	movs	r5, r1
 8009966:	f000 f831 	bl	80099cc <__ieee754_log>
 800996a:	0022      	movs	r2, r4
 800996c:	0006      	movs	r6, r0
 800996e:	000f      	movs	r7, r1
 8009970:	002b      	movs	r3, r5
 8009972:	0020      	movs	r0, r4
 8009974:	0029      	movs	r1, r5
 8009976:	f7f8 fd89 	bl	800248c <__aeabi_dcmpun>
 800997a:	2800      	cmp	r0, #0
 800997c:	d115      	bne.n	80099aa <log+0x4a>
 800997e:	2200      	movs	r2, #0
 8009980:	2300      	movs	r3, #0
 8009982:	0020      	movs	r0, r4
 8009984:	0029      	movs	r1, r5
 8009986:	f7f6 fd7b 	bl	8000480 <__aeabi_dcmpgt>
 800998a:	2800      	cmp	r0, #0
 800998c:	d10d      	bne.n	80099aa <log+0x4a>
 800998e:	2200      	movs	r2, #0
 8009990:	2300      	movs	r3, #0
 8009992:	0020      	movs	r0, r4
 8009994:	0029      	movs	r1, r5
 8009996:	f7f6 fd59 	bl	800044c <__aeabi_dcmpeq>
 800999a:	2800      	cmp	r0, #0
 800999c:	d008      	beq.n	80099b0 <log+0x50>
 800999e:	f7fd f813 	bl	80069c8 <__errno>
 80099a2:	2322      	movs	r3, #34	; 0x22
 80099a4:	2600      	movs	r6, #0
 80099a6:	4f07      	ldr	r7, [pc, #28]	; (80099c4 <log+0x64>)
 80099a8:	6003      	str	r3, [r0, #0]
 80099aa:	0030      	movs	r0, r6
 80099ac:	0039      	movs	r1, r7
 80099ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b0:	f7fd f80a 	bl	80069c8 <__errno>
 80099b4:	2321      	movs	r3, #33	; 0x21
 80099b6:	6003      	str	r3, [r0, #0]
 80099b8:	4803      	ldr	r0, [pc, #12]	; (80099c8 <log+0x68>)
 80099ba:	f000 f9b7 	bl	8009d2c <nan>
 80099be:	0006      	movs	r6, r0
 80099c0:	000f      	movs	r7, r1
 80099c2:	e7f2      	b.n	80099aa <log+0x4a>
 80099c4:	fff00000 	.word	0xfff00000
 80099c8:	0800a298 	.word	0x0800a298

080099cc <__ieee754_log>:
 80099cc:	2280      	movs	r2, #128	; 0x80
 80099ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d0:	000b      	movs	r3, r1
 80099d2:	b08d      	sub	sp, #52	; 0x34
 80099d4:	0352      	lsls	r2, r2, #13
 80099d6:	4291      	cmp	r1, r2
 80099d8:	da22      	bge.n	8009a20 <__ieee754_log+0x54>
 80099da:	004a      	lsls	r2, r1, #1
 80099dc:	0852      	lsrs	r2, r2, #1
 80099de:	4302      	orrs	r2, r0
 80099e0:	d107      	bne.n	80099f2 <__ieee754_log+0x26>
 80099e2:	2200      	movs	r2, #0
 80099e4:	2300      	movs	r3, #0
 80099e6:	2000      	movs	r0, #0
 80099e8:	49b3      	ldr	r1, [pc, #716]	; (8009cb8 <__ieee754_log+0x2ec>)
 80099ea:	f7f7 fb4f 	bl	800108c <__aeabi_ddiv>
 80099ee:	b00d      	add	sp, #52	; 0x34
 80099f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099f2:	2900      	cmp	r1, #0
 80099f4:	da05      	bge.n	8009a02 <__ieee754_log+0x36>
 80099f6:	0002      	movs	r2, r0
 80099f8:	f7f8 f9b6 	bl	8001d68 <__aeabi_dsub>
 80099fc:	2200      	movs	r2, #0
 80099fe:	2300      	movs	r3, #0
 8009a00:	e7f3      	b.n	80099ea <__ieee754_log+0x1e>
 8009a02:	4bae      	ldr	r3, [pc, #696]	; (8009cbc <__ieee754_log+0x2f0>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	f7f7 ff43 	bl	8001890 <__aeabi_dmul>
 8009a0a:	2436      	movs	r4, #54	; 0x36
 8009a0c:	000b      	movs	r3, r1
 8009a0e:	4264      	negs	r4, r4
 8009a10:	4aab      	ldr	r2, [pc, #684]	; (8009cc0 <__ieee754_log+0x2f4>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	dd06      	ble.n	8009a24 <__ieee754_log+0x58>
 8009a16:	0002      	movs	r2, r0
 8009a18:	000b      	movs	r3, r1
 8009a1a:	f7f6 fffb 	bl	8000a14 <__aeabi_dadd>
 8009a1e:	e7e6      	b.n	80099ee <__ieee754_log+0x22>
 8009a20:	2400      	movs	r4, #0
 8009a22:	e7f5      	b.n	8009a10 <__ieee754_log+0x44>
 8009a24:	4da7      	ldr	r5, [pc, #668]	; (8009cc4 <__ieee754_log+0x2f8>)
 8009a26:	151a      	asrs	r2, r3, #20
 8009a28:	1952      	adds	r2, r2, r5
 8009a2a:	1912      	adds	r2, r2, r4
 8009a2c:	031b      	lsls	r3, r3, #12
 8009a2e:	4ca6      	ldr	r4, [pc, #664]	; (8009cc8 <__ieee754_log+0x2fc>)
 8009a30:	0b1b      	lsrs	r3, r3, #12
 8009a32:	9302      	str	r3, [sp, #8]
 8009a34:	191c      	adds	r4, r3, r4
 8009a36:	2380      	movs	r3, #128	; 0x80
 8009a38:	035b      	lsls	r3, r3, #13
 8009a3a:	4023      	ands	r3, r4
 8009a3c:	4ca3      	ldr	r4, [pc, #652]	; (8009ccc <__ieee754_log+0x300>)
 8009a3e:	9d02      	ldr	r5, [sp, #8]
 8009a40:	405c      	eors	r4, r3
 8009a42:	151b      	asrs	r3, r3, #20
 8009a44:	189b      	adds	r3, r3, r2
 8009a46:	4325      	orrs	r5, r4
 8009a48:	2200      	movs	r2, #0
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	0029      	movs	r1, r5
 8009a4e:	4b9f      	ldr	r3, [pc, #636]	; (8009ccc <__ieee754_log+0x300>)
 8009a50:	f7f8 f98a 	bl	8001d68 <__aeabi_dsub>
 8009a54:	9b02      	ldr	r3, [sp, #8]
 8009a56:	0006      	movs	r6, r0
 8009a58:	3302      	adds	r3, #2
 8009a5a:	031b      	lsls	r3, r3, #12
 8009a5c:	000f      	movs	r7, r1
 8009a5e:	2200      	movs	r2, #0
 8009a60:	0b1b      	lsrs	r3, r3, #12
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	dc64      	bgt.n	8009b30 <__ieee754_log+0x164>
 8009a66:	2300      	movs	r3, #0
 8009a68:	f7f6 fcf0 	bl	800044c <__aeabi_dcmpeq>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d019      	beq.n	8009aa4 <__ieee754_log+0xd8>
 8009a70:	9b00      	ldr	r3, [sp, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d100      	bne.n	8009a78 <__ieee754_log+0xac>
 8009a76:	e11c      	b.n	8009cb2 <__ieee754_log+0x2e6>
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f7f8 fd5b 	bl	8002534 <__aeabi_i2d>
 8009a7e:	4a94      	ldr	r2, [pc, #592]	; (8009cd0 <__ieee754_log+0x304>)
 8009a80:	4b94      	ldr	r3, [pc, #592]	; (8009cd4 <__ieee754_log+0x308>)
 8009a82:	0004      	movs	r4, r0
 8009a84:	000d      	movs	r5, r1
 8009a86:	f7f7 ff03 	bl	8001890 <__aeabi_dmul>
 8009a8a:	4a93      	ldr	r2, [pc, #588]	; (8009cd8 <__ieee754_log+0x30c>)
 8009a8c:	0006      	movs	r6, r0
 8009a8e:	000f      	movs	r7, r1
 8009a90:	4b92      	ldr	r3, [pc, #584]	; (8009cdc <__ieee754_log+0x310>)
 8009a92:	0020      	movs	r0, r4
 8009a94:	0029      	movs	r1, r5
 8009a96:	f7f7 fefb 	bl	8001890 <__aeabi_dmul>
 8009a9a:	0002      	movs	r2, r0
 8009a9c:	000b      	movs	r3, r1
 8009a9e:	0030      	movs	r0, r6
 8009aa0:	0039      	movs	r1, r7
 8009aa2:	e7ba      	b.n	8009a1a <__ieee754_log+0x4e>
 8009aa4:	4a8e      	ldr	r2, [pc, #568]	; (8009ce0 <__ieee754_log+0x314>)
 8009aa6:	4b8f      	ldr	r3, [pc, #572]	; (8009ce4 <__ieee754_log+0x318>)
 8009aa8:	0030      	movs	r0, r6
 8009aaa:	0039      	movs	r1, r7
 8009aac:	f7f7 fef0 	bl	8001890 <__aeabi_dmul>
 8009ab0:	0002      	movs	r2, r0
 8009ab2:	000b      	movs	r3, r1
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	498c      	ldr	r1, [pc, #560]	; (8009ce8 <__ieee754_log+0x31c>)
 8009ab8:	f7f8 f956 	bl	8001d68 <__aeabi_dsub>
 8009abc:	0032      	movs	r2, r6
 8009abe:	0004      	movs	r4, r0
 8009ac0:	000d      	movs	r5, r1
 8009ac2:	003b      	movs	r3, r7
 8009ac4:	0030      	movs	r0, r6
 8009ac6:	0039      	movs	r1, r7
 8009ac8:	f7f7 fee2 	bl	8001890 <__aeabi_dmul>
 8009acc:	000b      	movs	r3, r1
 8009ace:	0002      	movs	r2, r0
 8009ad0:	0029      	movs	r1, r5
 8009ad2:	0020      	movs	r0, r4
 8009ad4:	f7f7 fedc 	bl	8001890 <__aeabi_dmul>
 8009ad8:	9b00      	ldr	r3, [sp, #0]
 8009ada:	9002      	str	r0, [sp, #8]
 8009adc:	9103      	str	r1, [sp, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <__ieee754_log+0x124>
 8009ae2:	0002      	movs	r2, r0
 8009ae4:	000b      	movs	r3, r1
 8009ae6:	0030      	movs	r0, r6
 8009ae8:	0039      	movs	r1, r7
 8009aea:	f7f8 f93d 	bl	8001d68 <__aeabi_dsub>
 8009aee:	e77e      	b.n	80099ee <__ieee754_log+0x22>
 8009af0:	9800      	ldr	r0, [sp, #0]
 8009af2:	f7f8 fd1f 	bl	8002534 <__aeabi_i2d>
 8009af6:	4a76      	ldr	r2, [pc, #472]	; (8009cd0 <__ieee754_log+0x304>)
 8009af8:	4b76      	ldr	r3, [pc, #472]	; (8009cd4 <__ieee754_log+0x308>)
 8009afa:	0004      	movs	r4, r0
 8009afc:	000d      	movs	r5, r1
 8009afe:	f7f7 fec7 	bl	8001890 <__aeabi_dmul>
 8009b02:	4a75      	ldr	r2, [pc, #468]	; (8009cd8 <__ieee754_log+0x30c>)
 8009b04:	9000      	str	r0, [sp, #0]
 8009b06:	9101      	str	r1, [sp, #4]
 8009b08:	4b74      	ldr	r3, [pc, #464]	; (8009cdc <__ieee754_log+0x310>)
 8009b0a:	0020      	movs	r0, r4
 8009b0c:	0029      	movs	r1, r5
 8009b0e:	f7f7 febf 	bl	8001890 <__aeabi_dmul>
 8009b12:	0002      	movs	r2, r0
 8009b14:	000b      	movs	r3, r1
 8009b16:	9802      	ldr	r0, [sp, #8]
 8009b18:	9903      	ldr	r1, [sp, #12]
 8009b1a:	f7f8 f925 	bl	8001d68 <__aeabi_dsub>
 8009b1e:	0032      	movs	r2, r6
 8009b20:	003b      	movs	r3, r7
 8009b22:	f7f8 f921 	bl	8001d68 <__aeabi_dsub>
 8009b26:	0002      	movs	r2, r0
 8009b28:	000b      	movs	r3, r1
 8009b2a:	9800      	ldr	r0, [sp, #0]
 8009b2c:	9901      	ldr	r1, [sp, #4]
 8009b2e:	e7dc      	b.n	8009aea <__ieee754_log+0x11e>
 8009b30:	2380      	movs	r3, #128	; 0x80
 8009b32:	05db      	lsls	r3, r3, #23
 8009b34:	f7f6 ff6e 	bl	8000a14 <__aeabi_dadd>
 8009b38:	0002      	movs	r2, r0
 8009b3a:	000b      	movs	r3, r1
 8009b3c:	0030      	movs	r0, r6
 8009b3e:	0039      	movs	r1, r7
 8009b40:	f7f7 faa4 	bl	800108c <__aeabi_ddiv>
 8009b44:	9004      	str	r0, [sp, #16]
 8009b46:	9105      	str	r1, [sp, #20]
 8009b48:	9800      	ldr	r0, [sp, #0]
 8009b4a:	f7f8 fcf3 	bl	8002534 <__aeabi_i2d>
 8009b4e:	9a04      	ldr	r2, [sp, #16]
 8009b50:	9b05      	ldr	r3, [sp, #20]
 8009b52:	9006      	str	r0, [sp, #24]
 8009b54:	9107      	str	r1, [sp, #28]
 8009b56:	0010      	movs	r0, r2
 8009b58:	0019      	movs	r1, r3
 8009b5a:	f7f7 fe99 	bl	8001890 <__aeabi_dmul>
 8009b5e:	4a63      	ldr	r2, [pc, #396]	; (8009cec <__ieee754_log+0x320>)
 8009b60:	9b02      	ldr	r3, [sp, #8]
 8009b62:	4694      	mov	ip, r2
 8009b64:	4463      	add	r3, ip
 8009b66:	0002      	movs	r2, r0
 8009b68:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b6a:	000b      	movs	r3, r1
 8009b6c:	9008      	str	r0, [sp, #32]
 8009b6e:	9109      	str	r1, [sp, #36]	; 0x24
 8009b70:	f7f7 fe8e 	bl	8001890 <__aeabi_dmul>
 8009b74:	0004      	movs	r4, r0
 8009b76:	000d      	movs	r5, r1
 8009b78:	4a5d      	ldr	r2, [pc, #372]	; (8009cf0 <__ieee754_log+0x324>)
 8009b7a:	4b5e      	ldr	r3, [pc, #376]	; (8009cf4 <__ieee754_log+0x328>)
 8009b7c:	f7f7 fe88 	bl	8001890 <__aeabi_dmul>
 8009b80:	4a5d      	ldr	r2, [pc, #372]	; (8009cf8 <__ieee754_log+0x32c>)
 8009b82:	4b5e      	ldr	r3, [pc, #376]	; (8009cfc <__ieee754_log+0x330>)
 8009b84:	f7f6 ff46 	bl	8000a14 <__aeabi_dadd>
 8009b88:	0022      	movs	r2, r4
 8009b8a:	002b      	movs	r3, r5
 8009b8c:	f7f7 fe80 	bl	8001890 <__aeabi_dmul>
 8009b90:	4a5b      	ldr	r2, [pc, #364]	; (8009d00 <__ieee754_log+0x334>)
 8009b92:	4b5c      	ldr	r3, [pc, #368]	; (8009d04 <__ieee754_log+0x338>)
 8009b94:	f7f6 ff3e 	bl	8000a14 <__aeabi_dadd>
 8009b98:	0022      	movs	r2, r4
 8009b9a:	002b      	movs	r3, r5
 8009b9c:	f7f7 fe78 	bl	8001890 <__aeabi_dmul>
 8009ba0:	4a59      	ldr	r2, [pc, #356]	; (8009d08 <__ieee754_log+0x33c>)
 8009ba2:	4b5a      	ldr	r3, [pc, #360]	; (8009d0c <__ieee754_log+0x340>)
 8009ba4:	f7f6 ff36 	bl	8000a14 <__aeabi_dadd>
 8009ba8:	9a08      	ldr	r2, [sp, #32]
 8009baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bac:	f7f7 fe70 	bl	8001890 <__aeabi_dmul>
 8009bb0:	4a57      	ldr	r2, [pc, #348]	; (8009d10 <__ieee754_log+0x344>)
 8009bb2:	9008      	str	r0, [sp, #32]
 8009bb4:	9109      	str	r1, [sp, #36]	; 0x24
 8009bb6:	4b57      	ldr	r3, [pc, #348]	; (8009d14 <__ieee754_log+0x348>)
 8009bb8:	0020      	movs	r0, r4
 8009bba:	0029      	movs	r1, r5
 8009bbc:	f7f7 fe68 	bl	8001890 <__aeabi_dmul>
 8009bc0:	4a55      	ldr	r2, [pc, #340]	; (8009d18 <__ieee754_log+0x34c>)
 8009bc2:	4b56      	ldr	r3, [pc, #344]	; (8009d1c <__ieee754_log+0x350>)
 8009bc4:	f7f6 ff26 	bl	8000a14 <__aeabi_dadd>
 8009bc8:	0022      	movs	r2, r4
 8009bca:	002b      	movs	r3, r5
 8009bcc:	f7f7 fe60 	bl	8001890 <__aeabi_dmul>
 8009bd0:	4a53      	ldr	r2, [pc, #332]	; (8009d20 <__ieee754_log+0x354>)
 8009bd2:	4b54      	ldr	r3, [pc, #336]	; (8009d24 <__ieee754_log+0x358>)
 8009bd4:	f7f6 ff1e 	bl	8000a14 <__aeabi_dadd>
 8009bd8:	0022      	movs	r2, r4
 8009bda:	002b      	movs	r3, r5
 8009bdc:	f7f7 fe58 	bl	8001890 <__aeabi_dmul>
 8009be0:	0002      	movs	r2, r0
 8009be2:	000b      	movs	r3, r1
 8009be4:	9808      	ldr	r0, [sp, #32]
 8009be6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009be8:	f7f6 ff14 	bl	8000a14 <__aeabi_dadd>
 8009bec:	9a02      	ldr	r2, [sp, #8]
 8009bee:	4b4e      	ldr	r3, [pc, #312]	; (8009d28 <__ieee754_log+0x35c>)
 8009bf0:	0004      	movs	r4, r0
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bf6:	000d      	movs	r5, r1
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dd34      	ble.n	8009c68 <__ieee754_log+0x29c>
 8009bfe:	2200      	movs	r2, #0
 8009c00:	4b39      	ldr	r3, [pc, #228]	; (8009ce8 <__ieee754_log+0x31c>)
 8009c02:	0030      	movs	r0, r6
 8009c04:	0039      	movs	r1, r7
 8009c06:	f7f7 fe43 	bl	8001890 <__aeabi_dmul>
 8009c0a:	0032      	movs	r2, r6
 8009c0c:	003b      	movs	r3, r7
 8009c0e:	f7f7 fe3f 	bl	8001890 <__aeabi_dmul>
 8009c12:	0002      	movs	r2, r0
 8009c14:	000b      	movs	r3, r1
 8009c16:	9002      	str	r0, [sp, #8]
 8009c18:	9103      	str	r1, [sp, #12]
 8009c1a:	0020      	movs	r0, r4
 8009c1c:	0029      	movs	r1, r5
 8009c1e:	f7f6 fef9 	bl	8000a14 <__aeabi_dadd>
 8009c22:	9a04      	ldr	r2, [sp, #16]
 8009c24:	9b05      	ldr	r3, [sp, #20]
 8009c26:	f7f7 fe33 	bl	8001890 <__aeabi_dmul>
 8009c2a:	9b00      	ldr	r3, [sp, #0]
 8009c2c:	0004      	movs	r4, r0
 8009c2e:	000d      	movs	r5, r1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d106      	bne.n	8009c42 <__ieee754_log+0x276>
 8009c34:	0002      	movs	r2, r0
 8009c36:	000b      	movs	r3, r1
 8009c38:	9802      	ldr	r0, [sp, #8]
 8009c3a:	9903      	ldr	r1, [sp, #12]
 8009c3c:	f7f8 f894 	bl	8001d68 <__aeabi_dsub>
 8009c40:	e74f      	b.n	8009ae2 <__ieee754_log+0x116>
 8009c42:	4a23      	ldr	r2, [pc, #140]	; (8009cd0 <__ieee754_log+0x304>)
 8009c44:	4b23      	ldr	r3, [pc, #140]	; (8009cd4 <__ieee754_log+0x308>)
 8009c46:	9806      	ldr	r0, [sp, #24]
 8009c48:	9907      	ldr	r1, [sp, #28]
 8009c4a:	f7f7 fe21 	bl	8001890 <__aeabi_dmul>
 8009c4e:	4a22      	ldr	r2, [pc, #136]	; (8009cd8 <__ieee754_log+0x30c>)
 8009c50:	9000      	str	r0, [sp, #0]
 8009c52:	9101      	str	r1, [sp, #4]
 8009c54:	9806      	ldr	r0, [sp, #24]
 8009c56:	9907      	ldr	r1, [sp, #28]
 8009c58:	4b20      	ldr	r3, [pc, #128]	; (8009cdc <__ieee754_log+0x310>)
 8009c5a:	f7f7 fe19 	bl	8001890 <__aeabi_dmul>
 8009c5e:	0022      	movs	r2, r4
 8009c60:	002b      	movs	r3, r5
 8009c62:	f7f6 fed7 	bl	8000a14 <__aeabi_dadd>
 8009c66:	e754      	b.n	8009b12 <__ieee754_log+0x146>
 8009c68:	0002      	movs	r2, r0
 8009c6a:	000b      	movs	r3, r1
 8009c6c:	0030      	movs	r0, r6
 8009c6e:	0039      	movs	r1, r7
 8009c70:	f7f8 f87a 	bl	8001d68 <__aeabi_dsub>
 8009c74:	9a04      	ldr	r2, [sp, #16]
 8009c76:	9b05      	ldr	r3, [sp, #20]
 8009c78:	f7f7 fe0a 	bl	8001890 <__aeabi_dmul>
 8009c7c:	9b00      	ldr	r3, [sp, #0]
 8009c7e:	0004      	movs	r4, r0
 8009c80:	000d      	movs	r5, r1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d102      	bne.n	8009c8c <__ieee754_log+0x2c0>
 8009c86:	0002      	movs	r2, r0
 8009c88:	000b      	movs	r3, r1
 8009c8a:	e72c      	b.n	8009ae6 <__ieee754_log+0x11a>
 8009c8c:	4a10      	ldr	r2, [pc, #64]	; (8009cd0 <__ieee754_log+0x304>)
 8009c8e:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <__ieee754_log+0x308>)
 8009c90:	9806      	ldr	r0, [sp, #24]
 8009c92:	9907      	ldr	r1, [sp, #28]
 8009c94:	f7f7 fdfc 	bl	8001890 <__aeabi_dmul>
 8009c98:	4a0f      	ldr	r2, [pc, #60]	; (8009cd8 <__ieee754_log+0x30c>)
 8009c9a:	9000      	str	r0, [sp, #0]
 8009c9c:	9101      	str	r1, [sp, #4]
 8009c9e:	9806      	ldr	r0, [sp, #24]
 8009ca0:	9907      	ldr	r1, [sp, #28]
 8009ca2:	4b0e      	ldr	r3, [pc, #56]	; (8009cdc <__ieee754_log+0x310>)
 8009ca4:	f7f7 fdf4 	bl	8001890 <__aeabi_dmul>
 8009ca8:	0002      	movs	r2, r0
 8009caa:	000b      	movs	r3, r1
 8009cac:	0020      	movs	r0, r4
 8009cae:	0029      	movs	r1, r5
 8009cb0:	e733      	b.n	8009b1a <__ieee754_log+0x14e>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	e69a      	b.n	80099ee <__ieee754_log+0x22>
 8009cb8:	c3500000 	.word	0xc3500000
 8009cbc:	43500000 	.word	0x43500000
 8009cc0:	7fefffff 	.word	0x7fefffff
 8009cc4:	fffffc01 	.word	0xfffffc01
 8009cc8:	00095f64 	.word	0x00095f64
 8009ccc:	3ff00000 	.word	0x3ff00000
 8009cd0:	fee00000 	.word	0xfee00000
 8009cd4:	3fe62e42 	.word	0x3fe62e42
 8009cd8:	35793c76 	.word	0x35793c76
 8009cdc:	3dea39ef 	.word	0x3dea39ef
 8009ce0:	55555555 	.word	0x55555555
 8009ce4:	3fd55555 	.word	0x3fd55555
 8009ce8:	3fe00000 	.word	0x3fe00000
 8009cec:	fff9eb86 	.word	0xfff9eb86
 8009cf0:	df3e5244 	.word	0xdf3e5244
 8009cf4:	3fc2f112 	.word	0x3fc2f112
 8009cf8:	96cb03de 	.word	0x96cb03de
 8009cfc:	3fc74664 	.word	0x3fc74664
 8009d00:	94229359 	.word	0x94229359
 8009d04:	3fd24924 	.word	0x3fd24924
 8009d08:	55555593 	.word	0x55555593
 8009d0c:	3fe55555 	.word	0x3fe55555
 8009d10:	d078c69f 	.word	0xd078c69f
 8009d14:	3fc39a09 	.word	0x3fc39a09
 8009d18:	1d8e78af 	.word	0x1d8e78af
 8009d1c:	3fcc71c5 	.word	0x3fcc71c5
 8009d20:	9997fa04 	.word	0x9997fa04
 8009d24:	3fd99999 	.word	0x3fd99999
 8009d28:	0006b851 	.word	0x0006b851

08009d2c <nan>:
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	4901      	ldr	r1, [pc, #4]	; (8009d34 <nan+0x8>)
 8009d30:	4770      	bx	lr
 8009d32:	46c0      	nop			; (mov r8, r8)
 8009d34:	7ff80000 	.word	0x7ff80000

08009d38 <_init>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3e:	bc08      	pop	{r3}
 8009d40:	469e      	mov	lr, r3
 8009d42:	4770      	bx	lr

08009d44 <_fini>:
 8009d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d46:	46c0      	nop			; (mov r8, r8)
 8009d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4a:	bc08      	pop	{r3}
 8009d4c:	469e      	mov	lr, r3
 8009d4e:	4770      	bx	lr
